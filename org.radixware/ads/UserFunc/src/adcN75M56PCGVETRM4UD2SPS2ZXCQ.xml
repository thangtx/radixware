<?xml version="1.0" encoding="UTF-8"?>
<AdsDefinition xmlns="http://schemas.radixware.org/adsdef.xsd" xmlns:xsc="http://schemas.radixware.org/xscml.xsd" FormatVersion="0">
  <AdsClassDefinition Id="adcN75M56PCGVETRM4UD2SPS2ZXCQ" Name="UserFuncCompiler" Type="3" Environment="common">
    <AccessRules IsFinal="true" IsPublished="false">
      <Transparence Extendable="false"/>
    </AccessRules>
    <Headers>
      <Src Name="HeaderadcUIRYA3DLT5CCDB5T43CNACW5ZM"/>
    </Headers>
    <Bodies>
      <Src Name="Bodyadc3NTJMVC2V5HQTBXG773TY5NW7E">
        <xsc:Item>
          <xsc:Java>private org.radixware.kernel.common.compiler.lookup.AdsWorkspace sharedWorkspace;
private org.radixware.kernel.common.check.IProblemHandler externalHandler;
public boolean useSharedWorkspace = false;
public static final String USE_SHARED_WORKSPACE_ON_CFG_IMPORT = "rdx.use.shared.workspace.on.cfg.import";</xsc:Java>
        </xsc:Item>
      </Src>
    </Bodies>
    <MethodGroup Id="cmg7UP7ML4HPVB3FIAVDSKU3F4L3E" Name="Root"/>
    <PropertyGroup Id="cpgRKGZFRYOOJDYPODZVJ4MQ2VFLA" Name="Root"/>
    <Properties/>
    <Methods>
      <Method Id="mthJTZUH32PCZDQLOWMBFDGTH6E3Q" Name="compile" Nature="0" IsOverride="false">
        <AccessRules IsFinal="true" IsPublished="false"/>
        <Parameters>
          <Parameter Name="userFunc" Id="mprZRJCCO7MKND3RNUOHBTDTMKOJ4">
            <Type TypeId="400" extStr="org.radixware.kernel.common.defs.ads.userfunc.AdsUserFuncDef"/>
          </Parameter>
          <Parameter Name="problemHandler" Id="mpr5OXUGDE2PVCCLKLG3BXD7TYMVA">
            <Type TypeId="400" extStr="org.radixware.kernel.common.check.IProblemHandler"/>
          </Parameter>
          <Parameter Name="fakeResult" Id="mprZ7TGMSV6VVGZ5KIB5VMJMORHGI">
            <Type TypeId="401" extStr="boolean"/>
          </Parameter>
        </Parameters>
        <ReturnType TypeId="401" extStr="byte" Dimension="1"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>org.radixware.kernel.common.defs.ads.build.Make make = new org.radixware.kernel.common.defs.ads.build.Make(true);

try {

    if (!userFunc.isInBranch()) {
        return null;
    }
    userFunc.touch();

//if (!org.radixware.kernel.common.utils.Utils.equals(storedVersion, currentVersion)) {
//    problemHandler.accept(org.radixware.kernel.common.check.RadixProblem.Factory.newError(userFunc, "Invalid function version: " + String.valueOf(storedVersion) + ". Must be " + String.valueOf(currentVersion) + ". Possibly, function profile was modified. Try to save it."));
//    return null;
//}
    final org.radixware.kernel.common.check.IProblemHandler extHandler = problemHandler;
    final boolean[] wasErrors = new boolean[]{false};
    org.radixware.kernel.common.check.IProblemHandler diagnoseHandler = new org.radixware.kernel.common.check.IProblemHandler() {
        public void accept(org.radixware.kernel.common.check.RadixProblem problem) {
            if (problem.Severity == org.radixware.kernel.common.check.RadixProblem.ESeverity.ERROR) {
                wasErrors[0] = true;
            }
            extHandler.accept(problem);
        }
    };

    userFunc.check(diagnoseHandler);
    if (wasErrors[0])
        return null;

    if (useSharedWorkspace) {
        </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcN75M56PCGVETRM4UD2SPS2ZXCQ mthJHAUJF4G35B45JOECUUALIXX3I" Invoke="true">
                <xsc:Presentation>initializeWorkspace</xsc:Presentation>
              </xsc:IdReference>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(userFunc.getBranch());
        this.externalHandler = diagnoseHandler;
        make.compile(sharedWorkspace, userFunc,null, true, true);
        this.externalHandler = null;
    } else {
        make.compile(userFunc, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsMZRCOG2E6FFA7AWAMSHCXA5JBU aciABE2KZKRJRELNJAMWZGMPNLOC4" Invoke="true">
                <xsc:Presentation>Common::RuntimeEnvironmentType:SERVER</xsc:Presentation>
              </xsc:IdReference>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>, diagnoseHandler, null, true, true);
    }

    if (wasErrors[0]) {
        return null;
    }

    java.util.List&lt;java.util.List&lt;org.radixware.kernel.common.defs.ads.build.Make.Distribution>> allDists = null;
    java.util.List&lt;org.radixware.kernel.common.defs.ads.build.Make.Distribution> ufDists = null;
    if (!fakeResult) {
        allDists = new java.util.LinkedList&lt;java.util.List&lt;org.radixware.kernel.common.defs.ads.build.Make.Distribution>>();
        ufDists = make.computeDistribution(</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsMZRCOG2E6FFA7AWAMSHCXA5JBU aciABE2KZKRJRELNJAMWZGMPNLOC4" Invoke="true">
                <xsc:Presentation>Common::RuntimeEnvironmentType:SERVER</xsc:Presentation>
              </xsc:IdReference>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>, problemHandler, null);
        allDists.add(ufDists);
    }

    if (!fakeResult &amp;&amp; ufDists != null &amp;&amp; ufDists.size() > 0) {
        org.radixware.kernel.common.defs.ads.localization.AdsLocalizingBundleDef bundle = userFunc.findExistingLocalizingBundle();
        if (bundle != null) {
            make.compile(bundle, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsMZRCOG2E6FFA7AWAMSHCXA5JBU aciANTA3DRPMNFQTLS2LVJHGJDKQI" Invoke="true">
                <xsc:Presentation>Common::RuntimeEnvironmentType:COMMON</xsc:Presentation>
              </xsc:IdReference>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>, diagnoseHandler, null, true, false);
            java.util.List&lt;org.radixware.kernel.common.defs.ads.build.Make.Distribution> mlbDists = make.computeDistribution(</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsMZRCOG2E6FFA7AWAMSHCXA5JBU aciANTA3DRPMNFQTLS2LVJHGJDKQI" Invoke="true">
                <xsc:Presentation>Common::RuntimeEnvironmentType:COMMON</xsc:Presentation>
              </xsc:IdReference>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>, problemHandler, null);
            allDists.add(mlbDists);
        }
    }
    if (wasErrors[0]) {
        return null;
    }

    if (fakeResult) {
        return new byte[0];
    }

    java.util.List&lt;org.radixware.kernel.common.defs.ads.build.Make.CompoundDistribution> dists = org.radixware.kernel.common.defs.ads.build.Make.Distribution.merge(allDists);

// make.computeDistribution(org.radixware.kernel.common.enums.ERuntimeEnvironmentType.SERVER, problemHandler, null);
    for (org.radixware.kernel.common.defs.ads.build.Make.CompoundDistribution d : dists) {
//if (d instanceof org.radixware.kernel.common.defs.ads.build.Make.JarDistribution &amp;&amp; d.contains(userFunc)) {
        //org.radixware.kernel.common.defs.ads.build.Make.JarDistribution dist = (org.radixware.kernel.common.defs.ads.build.Make.JarDistribution) d;
        java.io.File jarFile = d.mkJar(problemHandler);
        if (jarFile != null &amp;&amp; jarFile.exists()) {
            try {
                try {
                    byte[] result = org.radixware.kernel.common.utils.FileUtils.readBinaryFile(jarFile);
                    return result;
                } finally {
                    org.radixware.kernel.common.utils.FileUtils.deleteFile(jarFile);
                    jarFile.delete();
                }
            } catch (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="axcT6PDWQP2FRBGJJE4ZJYCMR2CDM">
                <xsc:Presentation>Exceptions::IOException</xsc:Presentation>
              </xsc:TypeDeclaration>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> e) {
                problemHandler.accept(org.radixware.kernel.common.check.RadixProblem.Factory.newError(userFunc, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:LocalizedString StringId="mlsE546QQKZSBAKDET4JDY4SDH5KU"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>));
            }
        } else {
            problemHandler.accept(org.radixware.kernel.common.check.RadixProblem.Factory.newError(userFunc, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:LocalizedString StringId="mlsQIEHQLSG5BGX7FZAHSFDS66ZBU"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>));
        }
        break;
    }

    return null;
} finally {
    make.reset();
}</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthBODVNFSER5H3FHWWXJWQ3Y72XY" Name="UserFuncCompiler" Nature="0" IsConstructor="true" IsOverride="false">
        <AccessRules IsPublished="false"/>
        <Sources>
          <Src/>
        </Sources>
      </Method>
      <Method Id="mthYIPHDNFUHZGKJCTCCSL7ELLBG4" Name="close" Nature="0" IsOverride="false">
        <AccessRules IsPublished="false"/>
        <Parameters>
          <Parameter Name="branch" Id="mprSUS5MNPWHFCZTIDMGRH2TP4CLM">
            <Type TypeId="400" extStr="org.radixware.kernel.common.repository.Branch"/>
          </Parameter>
        </Parameters>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>if (branch != null) {
    for (org.radixware.kernel.common.repository.Layer l : branch.getLayers()) {
        ((org.radixware.kernel.common.repository.ads.AdsSegment) l.getAds()).getBuildPath().cleanup();
    }
}</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthJHAUJF4G35B45JOECUUALIXX3I" Name="initializeWorkspace" Nature="0" IsOverride="false">
        <AccessRules IsPublished="false"/>
        <Parameters>
          <Parameter Name="branch" Id="mprRRD4LIA4GFHVLN7IIZQ7QFGXEM">
            <Type TypeId="400" extStr="org.radixware.kernel.common.repository.Branch"/>
          </Parameter>
        </Parameters>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>
if (sharedWorkspace == null) {
    if (branch != null) {
        sharedWorkspace = new org.radixware.kernel.common.compiler.lookup.AdsWorkspace(
                </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcEWGZMSHL3BFCFFIJVRGAJSRPEY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.getLayerForUDF(branch),
                </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsMZRCOG2E6FFA7AWAMSHCXA5JBU aciABE2KZKRJRELNJAMWZGMPNLOC4" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>,
                new org.radixware.kernel.common.compiler.core.problems.AdsProblemReporter(new org.radixware.kernel.common.check.IProblemHandler() {
                    public void accept(org.radixware.kernel.common.check.RadixProblem problem) {
                        if (externalHandler != null) {
                            externalHandler.accept(problem);
                        }
                    }
                }),
                false,
                true);
    }
}</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthDU3A4L352NA57OQFOXA5OMQ5PQ" Name="finalizeWorkspace" Nature="0" IsOverride="false">
        <AccessRules IsPublished="false"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>if (sharedWorkspace != null) {
    sharedWorkspace.cleanup();
    sharedWorkspace = null;
}</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
    </Methods>
  </AdsClassDefinition>
</AdsDefinition>