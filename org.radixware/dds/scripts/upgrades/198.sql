alter table RDX_PC_CHANNELUNIT
	add DELIVERYACKSAPID NUMBER(9,0) null
/


alter table RDX_PC_OUTMESSAGE
	add DELIVERYCALLBACKCLASSNAME VARCHAR2(1000 char) null
/

alter table RDX_PC_OUTMESSAGE
	add DELIVERYCALLBACKMETHODNAME VARCHAR2(1000 char) null
/

alter table RDX_PC_OUTMESSAGE
	add DELIVERYTIMEOUT NUMBER(9,0) null
/


alter table RDX_PC_SENTMESSAGE
	add SENDCALLBACKREQUIRED NUMBER(1,0) null
/

alter table RDX_PC_SENTMESSAGE
	add DELIVERYCALLBACKCLASSNAME VARCHAR2(1000 char) null
/

alter table RDX_PC_SENTMESSAGE
	add DELIVERYCALLBACKMETHODNAME VARCHAR2(1000 char) null
/

alter table RDX_PC_SENTMESSAGE
	add DELIVERYCALLBACKREQUIRED NUMBER(1,0) null
/

alter table RDX_PC_SENTMESSAGE
	add DELIVERYEXPTIMEMILLIS NUMBER(18,0) null
/

alter table RDX_PC_SENTMESSAGE
	add LASTDELIVERYCALLBACKTIME DATE null
/

create index IDX_RDX_PC_SENTMESSAGE_CB_DLVR on RDX_PC_SENTMESSAGE (DELIVERYCALLBACKREQUIRED asc, DELIVERYEXPTIMEMILLIS asc)
/

create index IDX_RDX_PC_SENTMESSAGE_CB_SEND on RDX_PC_SENTMESSAGE (SENDCALLBACKREQUIRED asc)
/

alter table RDX_PC_CHANNELUNIT
	add constraint FK_RDX_PC_CHANNELUNIT_SAP foreign key (DELIVERYACKSAPID)
	references RDX_SAP (ID)
/



drop trigger TADR_RDX_PC_OUTMESSAGE
/

create or replace trigger TADR_RDX_PC_OUTMESSAGE
after delete on RDX_PC_OUTMESSAGE
for each row
Begin
  if :old.FAILEDMESSAGE is NULL -- otherwise resend is possible
        and (:old.HISTMODE = 0 or :old.STOREATTACHINHIST = 0) then
    Delete from RDX_PC_ATTACHMENT where RDX_PC_ATTACHMENT.MESSID=:old.ID;
  end if;
End;
/

