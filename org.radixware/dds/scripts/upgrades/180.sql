declare
 clb CLOB;
 cursor_name INTEGER;
 ret INTEGER;
 x varchar2(32767);
 count_ INTEGER;
begin

select count(*) into count_ from rdx_ddsVersion;

-- only for native radix system
if count_ = 1 then -- one layer: radixware.org 

-- !!! head acs_utils

dbms_lob.createTemporary(clb, false, dbms_lob.SESSION);
x := 'create or replace package RDX_ACS_UTILS as' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function buildAssignedAccessAreaU2R(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		row_ in RDX_AC_User2Role%ROWTYPE' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return TRdxAcsArea;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (buildAssignedAccessAreaU2R, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function buildAssignedAccessAreaG2R(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		row_ in RDX_AC_UserGroup2Role%ROWTYPE' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return TRdxAcsArea;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (buildAssignedAccessAreaG2R, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure compileRights;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure compileRightsForGroup(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUserGroup in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure compileRightsForUser(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure moveRightsFromUserToGroup(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		group_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function existsRightsOnUser2Role(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		id_ in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function existsRightsOnGroup2Role(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		id_ in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isSuperAdmin(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (isSuperAdmin, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := 'end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
 cursor_name := DBMS_SQL.OPEN_CURSOR;
 DBMS_SQL.PARSE ( cursor_name, clb, DBMS_SQL.NATIVE);
 ret := DBMS_SQL.EXECUTE (cursor_name);
 DBMS_SQL.CLOSE_CURSOR (cursor_name);
 DBMS_LOB.freeTemporary(clb);
 
-- !!! body acs_utils

dbms_lob.createTemporary(clb, false, dbms_lob.SESSION);
x := 'create or replace package body RDX_ACS_UTILS as' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function buildAssignedAccessAreaU2R(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		row_ in RDX_AC_User2Role%ROWTYPE' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return TRdxAcsArea' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return NULL;   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function buildAssignedAccessAreaG2R(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		row_ in RDX_AC_UserGroup2Role%ROWTYPE' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return TRdxAcsArea' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	return NULL;   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure compileRights' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure compileRightsForGroup(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUserGroup in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure compileRightsForUser(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure moveRightsFromUserToGroup(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		group_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 INSERT INTO RDX_AC_USERGROUP (name) VALUES (group_);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 INSERT INTO RDX_AC_USER2USERGROUP (userName, groupName) VALUES (user_, group_);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  for ind in (Select * from RDX_AC_USER2ROLE where userName = User_ and  isOwn = 1)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          INSERT INTO RDX_AC_USERGROUP2ROLE (ID, GroupName) VALUES ( SQN_RDX_AC_USERGROUP2ROLEID.NEXTVAL, group_);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          DELETE FROM RDX_AC_USER2ROLE WHERE id=ind.id;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function existsRightsOnUser2Role(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		id_ in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function existsRightsOnGroup2Role(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		id_ in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isSuperAdmin(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := 'end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
 cursor_name := DBMS_SQL.OPEN_CURSOR;
 DBMS_SQL.PARSE ( cursor_name, clb, DBMS_SQL.NATIVE);
 ret := DBMS_SQL.EXECUTE (cursor_name);
 DBMS_SQL.CLOSE_CURSOR (cursor_name);
DBMS_LOB.freeTemporary(clb);

-- !!! head acs

dbms_lob.createTemporary(clb, false, dbms_lob.SESSION);
x := 'create or replace package RDX_ACS as' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	cRight_unbounded       constant integer := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	cRight_boundedByPart   constant integer := 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	cRight_prohibited      constant integer := 2;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	cRight_boundedByGroup  constant integer := 3;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	cRight_boundedByUser   constant integer := 4;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	Type long_str_list IS TABLE OF VARCHAR2(32767);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	Type int_list_type IS TABLE OF integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure clearInheritRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUserGroup in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	/*' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	Функции используемые для проверки того чтобы пользователь не смог ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	назначить дублирующие права, ...' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	*/' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserHasRoleInArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRole in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (curUserHasRoleInArea, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userHasRoleInArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRole in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (userHasRoleInArea, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userHasExplicitRoleInArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRole in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (userHasExplicitRoleInArea, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserHasAnyOfRolesInArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRolesArr in clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (curUserHasAnyOfRolesInArea, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userHasAnyOfRolesInArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRolesArr in clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (userHasAnyOfRolesInArea, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserHasRoleForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRole in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (curUserHasRoleForObject, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userHasRoleForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRole in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (userHasRoleForObject, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserHasAnyOfRolesForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRolesArr in clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (curUserHasAnyOfRolesForObject, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userHasRoleForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRole in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userHasAnyOfRolesForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRolesArr in clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (userHasAnyOfRolesForObject, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserAllRolesInAllAreas return varchar2;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (curUserAllRolesInAllAreas, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userAllRolesInAllAreas(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return varchar2;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (userAllRolesInAllAreas, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function getCurUserAllRolesForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return varchar2;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (getCurUserAllRolesForObject, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function getAllRolesForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return varchar2;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (getAllRolesForObject, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserIsInGroup(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pGroup in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (curUserIsInGroup, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userIsInGroup(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pGroup in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (userIsInGroup, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function areaListToStr(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		areaList_ in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return varchar2;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (areaListToStr, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function areaToStr(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		area_ in TRdxAcsArea' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return varchar2;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (areaToStr, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function strToArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		str_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return TRdxAcsArea;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (strToArea, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function strToAreaList(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		str in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return TRdxAcsAreaList;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (strToAreaList, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isGroupExist(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		name_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure acsUtilsBuild;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isUserHaveGroupRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		group_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isCurUserHaveGroupRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		group_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isUserHaveUserRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user2_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isCurUserHaveUserRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isUserHaveOwnRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isGroupHaveRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		group_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (isGroupHaveRights, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserGroupAdministered(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pGroup in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (curUserGroupAdministered, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserNullGroupAdministered return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (curUserNullGroupAdministered, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function mayReplaceOrRevokeRole(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userTable in integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		Id_ in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (mayReplaceOrRevokeRole, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function getNext2RoleId(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userTable in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function usedDualControlWhenAssignRoles return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (usedDualControlWhenAssignRoles, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure getRolesAndU2GCount(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userTable in integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userOrGroupName in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		acceptedRCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		unacceptedRCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		acceptedU2GCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		unacceptedU2GCount out integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (getRolesAndU2GCount, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure acceptRolesAndU2G(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userTable in integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userOrGroupName in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		ignoredRoles out varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		ignoredUsersOrGroups out varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		addedRCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		replacedRCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		removedRCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		addedU2GCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		removedU2GCount out integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function haveNotAcceptedEntities return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure getNotAcceptedEntities(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user2UserGroupCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		firstUser2UserGroup out varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userGroup2RoleCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		firstUserGroup2Role out varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user2RoleCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		firstUser2Role out varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isNewUserOrGroup2Role(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userTable in integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		Id_ in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (isNewUserOrGroup2Role, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure fillPartitions(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		modeIn_ in integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		modeOut_ out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		partitionIn_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		partitionsOut_ in out long_str_list,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		partitionGroupId_ in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (fillPartitions, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function equalPartition(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		part1 in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		part2 in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer deterministic;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	PRAGMA RESTRICT_REFERENCES (equalPartition, WNDS);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function readPartitions(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		partitionGroupId in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return clob;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := 'end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
 cursor_name := DBMS_SQL.OPEN_CURSOR;
 DBMS_SQL.PARSE ( cursor_name, clb, DBMS_SQL.NATIVE);
 ret := DBMS_SQL.EXECUTE (cursor_name);
 DBMS_SQL.CLOSE_CURSOR (cursor_name);
DBMS_LOB.freeTemporary(clb);

-- !!! body acs

dbms_lob.createTemporary(clb, false, dbms_lob.SESSION);
x := 'create or replace package body RDX_ACS as' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	Type TIdRecord IS RECORD (IdValue varchar(50));' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	Type TIdRecordList is table of TIdRecord index by binary_integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	type str_list_type  is table of varchar2(50) index BY BINARY_INTEGER;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function packAccessPartitionValue(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		val in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	res varchar2(32767);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  res := Replace(val, ''\'',  ''\\'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  res := Replace(res, '')'',  ''\)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  return res;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function contentId(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		roleId in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		list in TIdRecordList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 if (list.first() is not null) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   for i in list.first() .. list.last() ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   loop ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     if list.exists(i) and list(i).IdValue = roleid then         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   end loop;                               ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function unPackAccessPartitionValue(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		val in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	res varchar2(32767);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  res := Replace(val, ''\)'', '')'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  res := Replace(res, ''\\'', ''\'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  return res;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure clearInheritRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUserGroup in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    delete from RDX_AC_USER2ROLE u2r where u2r.isOwn = 0 and username in (select username from RDX_AC_USER2USERGROUP where GroupName=pUserGroup);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function containsPointInArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		area_ in TRdxAcsArea,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		largerArea_ in TRdxAcsArea' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return boolean' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     n1        boolean;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     n2        boolean;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     largerAreaSize integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     areaSize       integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     sFamilyID varchar2(50); ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   if (largerArea_ is null) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     return true;         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   largerAreaSize  := largerArea_.boundaries.COUNT();   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   if (largerAreaSize = 0) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     return true;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   end if;                              ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   areaSize := area_.boundaries.COUNT();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   For i in 1 .. largerAreaSize' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       sFamilyID := largerArea_.boundaries(i).FamilyID; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      n1 := largerArea_.boundaries(i).KeyVal is NULL;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      <<label1>> for j in 1 .. areaSize' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         if sFamilyID = area_.boundaries(j).FamilyID then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if (area_.boundaries(j).Prohibited = 1)then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              return false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           n2 := area_.boundaries(j).KeyVal is null; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if (' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               (n1 and n2) or' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                (' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                 (not n1) and' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                 (not n2) and' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                 (largerArea_.boundaries(i).KeyVal = area_.boundaries(j).KeyVal)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                )' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               ) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              exit label1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           return false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end loop; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     end loop;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   return true; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function containsPointInArea2(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		largerArea_ in TRdxAcsArea,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		area_ in TRdxAcsArea' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return boolean' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    n1        boolean;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    n2        boolean;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    find      boolean;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    largerAreaSize integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    areaSize       integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    sFamilyID varchar2(50);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if (largerArea_ is null) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     return true;         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    largerAreaSize      := largerArea_.boundaries.COUNT();   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if (largerAreaSize = 0) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     return true;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;                              ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if (area_ is null) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     return false;         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    areaSize := area_.boundaries.COUNT();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if (areaSize = 0) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     return false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. largerAreaSize' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     Loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       sFamilyID := largerArea_.boundaries(i).FamilyID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       if (largerArea_.boundaries(i).Prohibited = 0) then         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         n1 := largerArea_.boundaries(i).KeyVal is NULL;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         find := false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         <<label1>> for j in 1 .. areaSize ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             if sFamilyID = area_.boundaries(j).FamilyID then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               n2 := area_.boundaries(j).KeyVal is null; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               if (' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                   (area_.boundaries(j).Prohibited = 1)or' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                   (n1 and n2) or ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    (' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                     (not n1) and ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                     (not n2) and ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                     (largerArea_.boundaries(i).KeyVal = area_.boundaries(j).KeyVal)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    )  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  ) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  begin       ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  find := true;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  exit label1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               return false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if not find then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             return false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         n2 := false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         <<label2>>for j in 1 .. areaSize ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                      if (sFamilyID = area_.boundaries(j).FamilyID) then  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                         if (area_.boundaries(j).Prohibited = 1) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            n2 := true;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            exit label2;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                         else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                           return false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                         end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                      end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         if not n2 then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           return false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     end loop;   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return true;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function strToArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		str in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pos in out integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return TRdxAcsArea' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    res TRdxAcsArea; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    prohibited integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    newPos integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    newPos2 integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    newPos3 integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    accessPartitionKey varchar2(30);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    accessPartitionValue varchar2(32767);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	if SubStr(str, pos, 1)<>''('' then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  RAISE_APPLICATION_ERROR (-20100, RDX_ACS_Vars.error_Message);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	pos:=pos+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	res := TRdxAcsArea(TRdxAcsCoordinates());' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	<<lbl1>>while(true)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      if SubStr(str , pos, 1)='')'' then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         exit lbl1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      if SubStr(str , pos, 1)<>''('' then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         RAISE_APPLICATION_ERROR (-20100, RDX_ACS_Vars.error_Message || str);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      pos:=pos+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      if SubStr(str , pos, 1)=''0'' then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         prohibited := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      else ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        if SubStr(str , pos, 1)=''1'' then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           prohibited := 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           RAISE_APPLICATION_ERROR (-20100, RDX_ACS_Vars.error_Message || str);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      pos:=pos+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      if SubStr(str , pos, 1)<>'','' then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         RAISE_APPLICATION_ERROR (-20100, RDX_ACS_Vars.error_Message || str);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      pos:=pos+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      accessPartitionKey := SubStr(str, pos,29); ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      pos:=pos+29;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      if SubStr(str, pos, 1)<>'','' then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         RAISE_APPLICATION_ERROR (-20100, RDX_ACS_Vars.error_Message || str);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      pos := pos+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      newPos:=InStr(str, '')'', pos);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      if newPos = 0 then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         RAISE_APPLICATION_ERROR (-20100, RDX_ACS_Vars.error_Message || str);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end if;      ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      if newPos = pos then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         accessPartitionValue := null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      <<lbl2>>while (true)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         if (SubStr(str, newPos-1, 1)=''\'')then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             newPos2 := newPos-2;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             <<lbl3>>while (true)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if (SubStr(str, newPos2, 1)<>''\'')then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  exit lbl3;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if (SubStr(str, newPos2-1, 1)<>''\'')then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  exit lbl2;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                newPos2 := newPos2-2;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                newPos := newPos+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                newPos:=InStr(str, '')'', newPos);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            exit lbl2;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         end if;         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         accessPartitionValue := RDX_ACS.unPackAccessPartitionValue(SubStr(str, pos, newPos-pos));' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      pos := newPos+ 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      res.boundaries.EXTEND();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      res.boundaries(res.boundaries.COUNT()):=TRdxAcsCoordinate(prohibited, accessPartitionKey, accessPartitionValue);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	return res;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserHasRoleInArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRole in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  return RDX_ACS.userHasRoleInArea(RDX_Arte.getUserName(), pRole, pPointList); ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userHasExplicitRoleInArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRole in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Area TRdxAcsArea; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    flag boolean;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    dd integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    flag := pPointList is null or pPointList.COUNT()=0;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    for ind in (Select * from RDX_AC_USER2ROLE' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             where isNew=0 and isOwn=0 and userName = pUser and  pRole = roleId)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       if flag then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          return 1;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       Area := RDX_ACS_UTILS.buildAssignedAccessAreaU2R(ind);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       for i in pPointList.FIRST()..pPointList.LAST()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if RDX_ACS.containsPointInArea2(Area, pPointList(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end if;                                          ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         end loop;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     end loop;   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    exception ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      when others then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      RAISE_APPLICATION_ERROR (' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         -20100, ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         ''raise exception detected - '' || SQLERRM || '' code = '' ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         TO_CHAR(SQLCODE) || '' in userHasRoleInArea('' ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         pUser || '', '' || pRole ||  '', '' || RDX_ACS.areaListToStr(pPointList) || '')'' ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         );  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userHasRoleInArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRole in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Area TRdxAcsArea; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    flag boolean;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    dd integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    flag := pPointList is null or pPointList.COUNT()=0;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    for ind in (Select * from RDX_AC_USER2ROLE' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             where isNew=0 and isOwn=0 and userName = pUser and  pRole || RDX_ACS_Vars.sysSuperAdminRoleId LIKE ''%'' || roleId || ''%'')' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       if flag then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          return 1;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       Area := RDX_ACS_UTILS.buildAssignedAccessAreaU2R(ind);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       for i in pPointList.FIRST()..pPointList.LAST()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if RDX_ACS.containsPointInArea2(Area, pPointList(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end if;                                          ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         end loop;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     end loop;   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    exception ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      when others then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      RAISE_APPLICATION_ERROR (' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         -20100, ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         ''raise exception detected - '' || SQLERRM || '' code = '' ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         TO_CHAR(SQLCODE) || '' in userHasRoleInArea('' ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         pUser || '', '' || pRole ||  '', '' || RDX_ACS.areaListToStr(pPointList) || '')'' ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         );  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserHasAnyOfRolesInArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRolesArr in clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    roles RDX_Array.ARR_STR;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    roles := RDX_Array.fromStr(pRolesArr);    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if roles.COUNT > 0 then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        for idx in roles.FIRST .. roles.LAST loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if RDX_ACS.curUserHasRoleInArea(roles(idx), pPointList) != 0 then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        return RDX_ACS.curUserHasRoleInArea(RDX_ACS_Vars.sysSuperAdminRoleId, pPointList);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userHasAnyOfRolesInArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRolesArr in clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    roles RDX_Array.ARR_STR;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    roles := RDX_Array.fromStr(pRolesArr);    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if roles.COUNT > 0 then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        for idx in roles.FIRST .. roles.LAST loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if RDX_ACS.userHasRoleInArea(pUser, roles(idx), pPointList) != 0 then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        return RDX_ACS.curUserHasRoleInArea(RDX_ACS_Vars.sysSuperAdminRoleId, pPointList);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserHasRoleForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRole in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return RDX_ACS.userHasRoleForObject(RDX_Arte.getUserName(), pRole, pPointList); ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userHasRoleForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRole in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Area TRdxAcsArea; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    flag boolean;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    flag := pPointList is null or pPointList.COUNT()=0;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    for ind in (Select * from RDX_AC_USER2ROLE' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             where isNew=0  and isOwn=0 and userName = pUser and  pRole || RDX_ACS_Vars.sysSuperAdminRoleId LIKE ''%'' || roleId || ''%'')' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       if flag then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          return 1;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       Area := RDX_ACS_UTILS.buildAssignedAccessAreaU2R(ind);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       for i in pPointList.FIRST()..pPointList.LAST()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if RDX_ACS.containsPointInArea(Area, pPointList(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         end loop; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     end loop;        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userHasAnyOfRolesForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRolesArr in clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    roles RDX_Array.ARR_STR;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    roles := RDX_Array.fromStr(pRolesArr);    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if roles.COUNT > 0 then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        for idx in roles.FIRST .. roles.LAST loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if RDX_ACS.userHasRoleInArea(pUser, roles(idx), pPointList) != 0 then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        return RDX_ACS.curUserHasRoleInArea(RDX_ACS_Vars.sysSuperAdminRoleId, pPointList);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserHasAnyOfRolesForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRolesArr in clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    roles RDX_Array.ARR_STR;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    roles := RDX_Array.fromStr(pRolesArr);    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if roles.COUNT > 0 then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        for idx in roles.FIRST .. roles.LAST loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if RDX_ACS.curUserHasRoleForObject(roles(idx), pPointList) != 0 then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        return RDX_ACS.curUserHasRoleInArea(RDX_ACS_Vars.sysSuperAdminRoleId, pPointList);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userIsInGroup(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pGroup in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    rez integer(1);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    rez:=0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    SELECT COUNT(*) INTO rez FROM RDX_AC_USER2USERGROUP WHERE ROWNUM <= 1 AND userName = pUser and groupName = pGroup;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return rez;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserIsInGroup(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pGroup in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  return RDX_ACS.userIsInGroup(RDX_Arte.getUserName(), pGroup);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function areaListToStr(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		areaList_ in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    result_  varchar2(32767);   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    size_    integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     if areaList_ is null then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        return null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     size_ := areaList_.COUNT(); ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     result_ := ''('';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     for i in 1 .. size_' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       Loop ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           result_ := result_ || RDX_ACS.areaToStr(areaList_(i));' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if i=size_ then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             result_ := result_ || '')''; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end if;            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       end loop;   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return result_;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function areaToStr(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		area_ in TRdxAcsArea' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    result_  varchar2(32767);   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    size_    integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if area_ is null then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      return null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    size_ := area_.boundaries.COUNT();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    result_ := ''('';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    for i in 1 .. size_' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       Loop ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           result_ := result_ || ''('';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           result_ := result_ || TO_CHAR(area_.boundaries(i).Prohibited) || '','';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           result_ := result_ || area_.boundaries(i).FamilyID   || '','';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if area_.boundaries(i).KeyVal is not null then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               result_ := result_ || RDX_ACS.packAccessPartitionValue(area_.boundaries(i).KeyVal);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           result_ := result_ || '')''; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       end loop;   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    result_ := result_ || '')'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return result_;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure writeToClob(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		clob_ in out clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		val in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 x VARCHAR2(32767);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  x := val  || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  DBMS_LOB.writeappend(clob_, length(x), x);    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure fillCompileRightsBody(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		body_ in out clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		prefix_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		str_list0 in str_list_type,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		exists_Package in int_list_type,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		index_main in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		srcTableName in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userName_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  x varchar2(32767);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  n     integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    n := str_list0.count();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, prefix_ || '' if ('' || index_main || ''.MA$$'' || str_list0(i) || '' = RDX_ACS.cRight_boundedByUser) then'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        if (exists_Package(i) = 1) then    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, prefix_ || ''    partitionsList'' || to_char(i) || ''.delete();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, prefix_ || ''    partitionsList'' || to_char(i) || ''.extend(1);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, prefix_ || ''    partitionsList'' || to_char(i) || ''(1):=ACS$'' || str_list0(i) || ''.getUserAssignment(RDX_Arte.getUserName());'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, prefix_ || ''    mode'' || to_char(i) || '':=RDX_ACS.cRight_boundedByPart;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        else    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, prefix_ || ''    raise_application_error(-20000, '''''' || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               ''System rights package ACS$'' || str_list0(i) || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               '' not found, but found RDX_ACS.cRight_boundedByUser bounding mode (Table='' || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               srcTableName || '', Id = '''' || '' || index_main || ''.Id || '''').'''');'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, prefix_ || '' else'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, prefix_ || ''    RDX_ACS.fillPartitions('' || index_main || ''.MA$$'' || str_list0(i) || '', '' ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                                     ''mode'' || to_char(i)  || '', '' || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                                     '''' || index_main || ''.PA$$'' || str_list0(i) || '', '' ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                                     ''partitionsList'' || to_char(i) || '', '' || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                                     '''' || index_main || ''.PG$$'' || str_list0(i) || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                                     '');'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, prefix_ || '' end if;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x := LPAD('' '', i);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, prefix_ || x || ''for i'' || to_char(i) || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                 '' in partitionsList'' || to_char(i) || ''.first() .. partitionsList'' || to_char(i) || ''.last()'');  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, prefix_ || x || ''loop''); ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x := LPAD('' '', n) || ''   INSERT INTO RDX_AC_USER2ROLE(userName, isOwn, RoleId, ID'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        For i in 1 .. n' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        loop ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            x := x || '', PA$$'' || str_list0(i) || '', MA$$'' || str_list0(i);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        end loop; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x:= x || '')'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, prefix_ || x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x := LPAD('' '', n) || ''   VALUES ('' || userName_ || '', 0, '' || index_main || ''.RoleId, SQN_RDX_AC_USER2ROLEID.NEXTVAL'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        For i in 1 .. n' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        loop ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            x := x || '', partitionsList'' || to_char(i) || ''(i'' || to_char(i) || ''), mode'' || to_char(i);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        end loop;     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x:= x || '');'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, prefix_ || x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x := LPAD('' '', n - i + 1);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, prefix_ || x || ''end loop;''); ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;       ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function existsPackage(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		postfix_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 rez integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 SELECT count(*) into rez FROM USER_OBJECTS WHERE OBJECT_TYPE = ''PACKAGE'' and OBJECT_NAME = ''ACS$'' || upper(postfix_) ;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return rez;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure fillPartitions(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		modeIn_ in integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		modeOut_ out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		partitionIn_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		partitionsOut_ in out long_str_list,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		partitionGroupId_ in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    flag boolean;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    partitionVals clob;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    arr RDX_Array.ARR_STR;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    partitionVal VARCHAR2(32767);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    partitionsOut_.delete();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if (modeIn_ = RDX_ACS.cRight_unbounded) or (modeIn_ = RDX_ACS.cRight_prohibited) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         modeOut_:=modeIn_;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         partitionsOut_.Extend(1);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         partitionsOut_(1):=null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    elsif (modeIn_ = RDX_ACS.cRight_boundedByPart) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         modeOut_:=modeIn_;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         partitionsOut_.Extend(1);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         partitionsOut_(1):=partitionIn_;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    elsif (modeIn_ = RDX_ACS.cRight_boundedByGroup) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         flag := partitionGroupId_ is not null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         if flag then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            Select PARTITIONS into partitionVals from RDX_AC_PARTITIONGROUP where partitionGroupId_ = id;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            flag := (partitionVals is not null) and (dbms_lob.getlength(partitionVals)<>0) and (partitionVals<>''[0]'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        if flag then        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            modeOut_:=RDX_ACS.cRight_boundedByPart;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            arr :=  RDX_Array.fromStr(partitionVals);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            partitionsOut_.Extend(arr.count());' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            for i in arr.first() .. arr.last() ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                partitionVal:=arr(i);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if (partitionVal is not null) and length(partitionVal)>31 then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  partitionVal:=substr(partitionVal, 31);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  partitionVal:=null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                partitionsOut_(i) := partitionVal;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            modeOut_:=RDX_ACS.cRight_prohibited;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            partitionsOut_.Extend(1);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            partitionsOut_(1):=null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        raise_application_error(-20000, ''Detected invalid partition mode: '' || to_char(modeIn_)); ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure fillCompileDefineValues(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		body_ in out clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		n in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) deterministic' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	For i in 1 .. n' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  partitionsList'' || to_char(i) || '' RDX_ACS.long_str_list;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  mode'' || to_char(i) || '' integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure fillCompileInitValues(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		body_ in out clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		n in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  partitionsList'' || to_char(i) || '' := RDX_ACS.long_str_list();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure fillLongCycle(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		body_ in out clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		str_list0 in str_list_type' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    n  integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x varchar2(32767);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x2 varchar2(32767);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	n := str_list0.COUNT();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	writeToClob(body_, ''n:=calculatedList1.count;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	writeToClob(body_, ''if (n=0) then'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''  return 0;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end if;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x := LPAD('' '', i);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, x || ''for i'' || to_char(i) || '' in partitionsList'' || to_char(i) || ''.first() .. partitionsList'' || to_char(i) || ''.last()'');         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, x || ''loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, x || ''partition'' || to_char(i) || '' := partitionsList'' || to_char(i) || ''(i'' || to_char(i) || '');'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x := LPAD('' '', n);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, x || ''ok_ := false;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, x || ''for i in 1..n loop'');    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, x || ''  calcPartition'' || to_char(i) || '' := calculatedList'' || to_char(i) || ''(i);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, x || ''  calcMode'' || to_char(i) || '' := calculatedMode'' || to_char(i) || ''(i);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, x || ''  if('');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      x2 := x || ''  ((mode'' || to_char(i) || '' = RDX_ACS.cRight_prohibited) or '' ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                     ''(calcMode'' || to_char(i) || '' = RDX_ACS.cRight_unbounded) or '' ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            ''(mode'' || to_char(i) || '' = RDX_ACS.cRight_boundedByPart and '' ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            ''calcMode'' || to_char(i) || '' = RDX_ACS.cRight_boundedByPart and '' ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            ''RDX_ACS.equalPartition(partition'' || to_char(i) || '', calcPartition'' || to_char(i) || '') = 1))'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      if (i!=n) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x2 := x2 || '' and'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      else  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x2 := x2 || '') then'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end if;                            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, x || x2);      ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, x || '' ok_ := true;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, x || '' exit;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, x || ''end if;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, x || ''end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, x || ''if (not ok_) then'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, x || ''  return 0;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, x || ''end if;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x := LPAD('' '', n - i + 1);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, x || ''end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure fillRights2Table(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		table_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		func_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		body_ in out clob,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		str_list0 in str_list_type,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		exists_Package in int_list_type' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    n  integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x varchar2(32767);    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    n := str_list0.COUNT();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''function '' || func_ || ''(user_ in varchar2, id_ in integer) return integer'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''is'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' partition'' || to_char(i) || '' VARCHAR2(32767);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' mode'' || to_char(i) || '' integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' calcMode'' || to_char(i) || '' integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' groupId'' || to_char(i) || '' integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' partitionsList'' || to_char(i) || '' RDX_ACS.long_str_list;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' calculatedList'' || to_char(i) || '' RDX_ACS.long_str_list;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' calculatedMode'' || to_char(i) || '' RDX_ACS.int_list_type;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' calcPartition'' || to_char(i) || '' VARCHAR2(32767);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' roleId_ varchar(50);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' i integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' n integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' ok_ boolean;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''begin'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x := ''  select roleId'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      x := x || '', MA$$'' || str_list0(i) || '', PA$$'' || str_list0(i) || '', PG$$'' || str_list0(i);      ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x := x || '' into roleId_'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      x := x || '', mode'' || to_char(i) || '', partition'' || to_char(i) || '', groupId'' || to_char(i);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_,  x || '' from '' || table_ || '' where id = id_;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' partitionsList'' || to_char(i) || '' := RDX_ACS.long_str_list();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' calculatedList'' || to_char(i) || '' := RDX_ACS.long_str_list();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' calculatedMode'' || to_char(i) || '' := RDX_ACS.int_list_type();'');        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  if (mode'' || to_char(i) ||  '' = RDX_ACS.cRight_boundedByUser) then'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        if (exists_Package(i) = 1) then    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''    partitionsList'' || to_char(i) || ''.delete();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''    partitionsList'' || to_char(i) || ''.extend(1);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''    partitionsList'' || to_char(i) || ''(1):=ACS$'' || str_list0(i) || ''.getUserAssignment(RDX_Arte.getUserName());'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''    mode'' || to_char(i) || '':=RDX_ACS.cRight_boundedByPart;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        else    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''    raise_application_error(-20000, '''''' || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               ''System rights package ACS$'' || str_list0(i) || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               '' not found, but found RDX_ACS.cRight_boundedByUser bounding mode (Table='' || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               table_ || '', Id = '''' || id_ || '''').'''');'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  else'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''    RDX_ACS.fillPartitions(mode'' || to_char(i)  || '', calcMode'' || to_char(i) || '', '' ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                                     ''partition'' || to_char(i) || '', '' ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                                     ''partitionsList'' || to_char(i) || '', '' || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                                     ''groupId'' || to_char(i)|| ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                                     '');'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  end if;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, ''  i:=1;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, ''  for ind in (Select * from RDX_AC_USER2ROLE where isNew=0 and isOwn = 0 and userName = user_ and '');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, ''                       (roleId_ = roleId or roleId = RDX_ACS_Vars.sysSuperAdminRoleId) )'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, ''  loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n      ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, ''    calculatedList'' || to_char(i) || ''.Extend();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, ''    calculatedMode'' || to_char(i) || ''.Extend();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, ''    calculatedList'' || to_char(i) || ''(i):=ind.PA$$'' || str_list0(i) || '';'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, ''    calculatedMode'' || to_char(i) || ''(i):=ind.MA$$'' || str_list0(i) || '';'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;      ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, ''    i:=i+1;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      writeToClob(body_, ''  end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillLongCycle(body_, str_list0);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''  return 1;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isGroupExist(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		name_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	rez INTEGER;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 rez := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 SELECT COUNT(*) INTO rez FROM RDX_AC_USERGROUP WHERE ROWNUM <= 1 AND name_ = NAME;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return rez;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure acsUtilsBuild' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    str_list0 str_list_type;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    exists_Package int_list_type;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    cur_index  integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    n  integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    i  integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    cursor_name INTEGER;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ret	    INTEGER;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x varchar2(32767);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x2 varchar2(32767);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    body_ clob;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    cur_index := 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    dbms_lob.createTemporary(body_, false, dbms_lob.SESSION);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    exists_Package := int_list_type();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    for ind in (select DISTINCT table_name, column_name from user_tab_columns where  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  table_name = ''RDX_AC_USER2ROLE'' ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                and' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  length(column_name) = 30 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                and ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  column_name like ''PA$$%''' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  order by column_name ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               )                  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x:=ind.column_name;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x:= SUBSTR(x, 5);        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        str_list0(cur_index):=x;        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        exists_Package.EXTEND();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        exists_Package(cur_index):= RDX_ACS.existsPackage(x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        cur_index := cur_index+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    n := str_list0.COUNT();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''create or replace package RDX_ACS_UTILS as'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''function buildAssignedAccessAreaU2R(row_ in RDX_AC_User2Role%ROWTYPE) return TRdxAcsArea;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''PRAGMA RESTRICT_REFERENCES (buildAssignedAccessAreaU2R, WNDS);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''function buildAssignedAccessAreaG2R(row_ in RDX_AC_UserGroup2Role%ROWTYPE) return TRdxAcsArea;'');    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''PRAGMA RESTRICT_REFERENCES (buildAssignedAccessAreaG2R, WNDS);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''procedure compileRights;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''procedure compileRightsForGroup(pUserGroup in varchar2);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''procedure compileRightsForUser(pUser in varchar2);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''procedure moveRightsFromUserToGroup(user_ in varchar2, group_ in varchar2);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x := '''';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x := x || '', mode'' || to_char(i) || '' integer, partitions'' || to_char(i) || '' clob'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''function existsRightsOnArea(user_ in varchar2, role_ in varchar2 '' || x || '') return integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''PRAGMA RESTRICT_REFERENCES (existsRightsOnArea, WNDS);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''function existsRightsOnUser2Role(user_ in varchar2, id_ in integer) return integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''PRAGMA RESTRICT_REFERENCES (existsRightsOnUser2Role, WNDS);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''function existsRightsOnGroup2Role(user_ in varchar2, id_ in integer) return integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''PRAGMA RESTRICT_REFERENCES (existsRightsOnGroup2Role, WNDS);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''function isSuperAdmin(user_ in varchar2) return integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''PRAGMA RESTRICT_REFERENCES (isSuperAdmin, WNDS);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''function gup_'' || str_list0(i) || ''(user_ in varchar2) return clob;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    cursor_name := DBMS_SQL.OPEN_CURSOR;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_SQL.PARSE ( cursor_name, body_, DBMS_SQL.NATIVE );' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ret := DBMS_SQL.EXECUTE ( cursor_name );' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_SQL.CLOSE_CURSOR ( cursor_name );  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    dbms_lob.createTemporary(body_, false, dbms_lob.SESSION);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''CREATE  OR REPLACE package body RDX_ACS_UTILS as'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''/*get unbounded partitions*/'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''function gup_'' || str_list0(i) || ''(user_ in varchar2) return clob'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''is'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' p RDX_Array.ARR_STR;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' i integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''begin'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x:='''';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        For j in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (i<>j) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                x:= x || '' and MA$$'' || str_list0(j) || ''= RDX_ACS.cRight_unbounded'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end if;    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''p := RDX_Array.ARR_STR();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''i := 1;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''for ind in (select PA$$'' || str_list0(i) ||' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                     '' from RDX_AC_USER2ROLE where roleId = RDX_ACS_Vars.sysSuperAdminRoleId and isNew = 0 and isOwn = 0 and userName = user_'' ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                      || '' and MA$$'' || str_list0(i) || ''= RDX_ACS.cRight_boundedByPart'' || x || '')''' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                     );' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  p.extend();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  p(i) := ind.PA$$'' || str_list0(i) || '';'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  i := i+1;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' return RDX_Array.fromArrStr(p);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''end;'');    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''function isSuperAdmin(user_ in varchar2) return integer'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''is'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' count_ integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''begin'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x := '''';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x := x || '' and MA$$'' || str_list0(i) || ''= RDX_ACS.cRight_unbounded'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' select count(*) into count_ from RDX_AC_USER2ROLE where roleId = RDX_ACS_Vars.sysSuperAdminRoleId and isNew = 0 and isOwn = 0 and userName = user_'' || x || '';'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' if count_ > 0 then'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''   return 1;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' end if;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' return 0;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillRights2Table(''RDX_AC_USER2ROLE'', ''existsRightsOnUser2Role'', body_, str_list0, exists_Package);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillRights2Table(''RDX_AC_USERGROUP2ROLE'', ''existsRightsOnGroup2Role'', body_, str_list0, exists_Package);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x := '''';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x := x || '', mode'' || to_char(i) || '' integer, partitions'' || to_char(i) || '' clob'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''function existsRightsOnArea(user_ in varchar2, role_ in varchar2 '' || x || '') return integer'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''is'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' partition'' || to_char(i) || '' VARCHAR2(32767);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' calcPartition'' || to_char(i) || '' VARCHAR2(32767);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' calcMode'' || to_char(i) || '' integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' partitionsList'' || to_char(i) || '' RDX_Array.ARR_STR;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' calculatedList'' || to_char(i) || '' RDX_Array.ARR_STR;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' calculatedMode'' || to_char(i) || '' RDX_ACS.int_list_type;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' i integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' n integer;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' ok_ boolean;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''begin'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' if mode'' || to_char(i) ||'' = RDX_ACS.cRight_prohibited then'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  partitionsList'' || to_char(i) || '':= RDX_Array.fromStr(partitions'' || to_char(i) || '');'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' else'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  partitionsList'' || to_char(i) || '':= RDX_Array.ARR_STR();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  partitionsList'' || to_char(i) || ''.Extend(1);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''  partitionsList'' || to_char(i) || ''(1):=null;'');       ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' end if;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' calculatedList'' || to_char(i) || '':= RDX_Array.ARR_STR();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, '' calculatedMode'' || to_char(i) || '':= RDX_ACS.int_list_type();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''i:=1;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''for ind in (Select * from RDX_AC_USER2ROLE where isNew=0 and isOwn = 0 and userName = user_ and '');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''           (role_ = roleId or roleId = RDX_ACS_Vars.sysSuperAdminRoleId) )'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''   calculatedList'' || to_char(i) || ''.Extend();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''   calculatedMode'' || to_char(i) || ''.Extend();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''   calculatedList'' || to_char(i) || ''(i):=ind.PA$$'' || str_list0(i) || '';'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        writeToClob(body_, ''   calculatedMode'' || to_char(i) || ''(i):=ind.MA$$'' || str_list0(i) || '';'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''   i:=i+1;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillLongCycle(body_, str_list0);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' return 1;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''procedure compileRights'');    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''is'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillCompileDefineValues(body_, n);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''begin'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillCompileInitValues(body_, n);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''/*clear all inherit rights*/'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''delete from RDX_AC_USER2ROLE u2r where u2r.isOwn=0;'');    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '''');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''/*collect rights from RDX_AC_USER2ROLE*/'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''for ind1 in (Select * from RDX_AC_USER2ROLE where isOwn=1 and isNew<>1)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillCompileRightsBody(body_, '''', str_list0, exists_Package, ''ind1'', ''RDX_AC_USER2ROLE'', ''ind1.userName'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '''');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''/*collect rights from RDX_AC_USERGROUP2ROLE*/'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''for ind1 in (Select * from RDX_AC_USERGROUP2ROLE where isNew<>1)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''  for ind2 in (Select * from RDX_AC_USER2USERGROUP where GroupName=ind1.GroupName and state<>1)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''  loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillCompileRightsBody(body_, ''  '', str_list0, exists_Package, ''ind1'', ''RDX_AC_USERGROUP2ROLE'', ''ind2.userName'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''  end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''procedure compileRightsForGroup(pUserGroup in varchar2)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''is'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillCompileDefineValues(body_, n);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''begin'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillCompileInitValues(body_, n);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''RDX_ACS.ClearInheritRights(pUserGroup);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''for ind1 in (select * from RDX_AC_USER2USERGROUP where GroupName=pUserGroup and state<>1)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''  for ind2 in (select * from RDX_AC_USER2USERGROUP where UserName=ind1.UserName and state<>1)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''  loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''    for ind3 in (Select * from RDX_AC_USER2ROLE where isOwn=1 and isNew<>1)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''    loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillCompileRightsBody(body_, ''    '', str_list0, exists_Package, ''ind3'', ''RDX_AC_USER2ROLE'', ''ind1.userName'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''    end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '''');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''    for ind3 in (Select * from RDX_AC_USERGROUP2ROLE where GroupName = ind2.GroupName and isNew<>1)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''    loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillCompileRightsBody(body_, ''    '', str_list0, exists_Package, ''ind3'', ''RDX_AC_USERGROUP2ROLE'', ''ind1.UserName'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''    end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''  end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''procedure compileRightsForUser(pUser in varchar2)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''is'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillCompileDefineValues(body_, n);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''begin'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillCompileInitValues(body_, n);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''delete from RDX_AC_USER2ROLE u2r where u2r.isOwn = 0 and username = pUser and isNew<>1;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''for ind1 in (select * from RDX_AC_USER2ROLE where username = pUser and isOwn=1 and isNew<>1)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillCompileRightsBody(body_, '''', str_list0, exists_Package, ''ind1'', ''RDX_AC_USER2ROLE'', ''pUser'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                                                        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''for ind1 in (select * from RDX_AC_USER2USERGROUP where UserName=pUser and state<>1)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''  for ind2 in (Select * from RDX_AC_USERGROUP2ROLE where GroupName = ind1.GroupName and isNew<>1)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''  loop'');   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS.fillCompileRightsBody(body_, ''  '', str_list0, exists_Package, ''ind2'', ''RDX_AC_USERGROUP2ROLE'', ''pUser'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''  end loop;'');    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    /*' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''procedure compileRightsForGrpBeforeDel(pUserGroup in varchar2)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''is'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''begin'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''null;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''raise_application_error(-20000, ''''Not realized yet'''');'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    */' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    /*' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    t1 := ''      INSERT INTO RDX_AC_USER2ROLE ( userName, isOwn, RoleId, ID'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    t2 := ''               VALUES (ind1.userName, 0, ind3.RoleId, SQN_RDX_AC_USER2ROLEID.NEXTVAL'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        t1 := t1 || '', P'' || str_list(i) || '', M'' || str_list(i);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        t2 := t2 || '', IND3.P'' || str_list(i) || '', IND3.M'' || str_list(i);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''procedure compileRightsForGrpBeforeDel('' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''   pUserGroup    in varchar2)'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''is'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''begin'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''RDX_ACS.ClearInheritRights(pUserGroup);'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''for ind1 in (select * from RDX_AC_USER2USERGROUP where GroupName=pUserGroup and state<>1)'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''  loop'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''  for ind2 in (select * from RDX_AC_USER2USERGROUP where UserName=ind1.UserName and GroupName<>pUserGroup and state<>1)'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''      loop'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''      for ind3 in (Select * from RDX_AC_USERGROUP2ROLE where GroupName = ind2.GroupName and isNew<>1)'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''      loop'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''        '' || t1 || '')'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x); ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''        '' || t2 || '');'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x); ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''      end loop;'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''  end loop;'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''end loop;'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:=''end;'' || CHR(13);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_LOB.writeappend(body_, length(x), x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    */' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    for i in 1 .. 2 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       if i = 1  then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          x:=''function buildAssignedAccessAreaU2R(row_ in RDX_AC_USER2ROLE%ROWTYPE)return TRdxAcsArea'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          x:=''function buildAssignedAccessAreaG2R(row_ in RDX_AC_USERGROUP2ROLE%ROWTYPE)return TRdxAcsArea'';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, x);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, ''is'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, ''res TRdxAcsArea;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, ''Begin'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, ''res := TRdxAcsArea(TRdxAcsCoordinates());'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       for cur_index in 1 .. n ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       loop ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''      if row_.MA$$'' || str_list0(cur_index) || ''<>RDX_ACS.cRight_unbounded then'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''        res.boundaries.EXTEND();'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''        if row_.MA$$'' || str_list0(cur_index) || '' = RDX_ACS.cRight_prohibited  then'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''            res.boundaries(res.boundaries.Count()):=TRdxAcsCoordinate(1, ''''apf''  || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               str_list0(cur_index) ||  '''''', null);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''        elsif row_.MA$$'' || str_list0(cur_index) || '' = RDX_ACS.cRight_boundedByPart then'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''            res.boundaries(res.boundaries.Count()):=TRdxAcsCoordinate(0, ''''apf''  || ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               str_list0(cur_index) ||  '''''', row_.PA$$'' || str_list0(cur_index) ||'');'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''        else'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''            raise_application_error(-20000, ''''Invalid argument'''');'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''        end if;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            writeToClob(body_, ''      end if;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' return res;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       writeToClob(body_, '' end;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''procedure moveRightsFromUserToGroup(user_ in varchar2, group_ in varchar2)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''is'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''begin'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' INSERT INTO RDX_AC_USERGROUP (name) VALUES (group_);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, '' INSERT INTO RDX_AC_USER2USERGROUP (userName, groupName) VALUES (user_, group_);'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''  for ind in (Select * from  RDX_AC_USER2ROLE where userName = User_ and  isOwn = 1 and isNew<>1)'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''     loop'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:='''';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x := x || '', PA$$'' || str_list0(i) || '', MA$$'' || str_list0(i) || '', PG$$'' || str_list0(i);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''      INSERT INTO RDX_AC_USERGROUP2ROLE (ID, GroupName, roleId'' || x || '')'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    x:='''';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    For i in 1 .. n' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        x := x || '', IND.PA$$'' || str_list0(i) || '', IND.MA$$'' || str_list0(i) || '', IND.PG$$'' || str_list0(i);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''      VALUES ( SQN_RDX_AC_USERGROUP2ROLEID.NEXTVAL, group_, IND.roleId'' || x || '');'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''      DELETE FROM RDX_AC_USER2ROLE WHERE id=ind.id;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''     end loop;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    writeToClob(body_, ''end;'');' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    cursor_name := DBMS_SQL.OPEN_CURSOR;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_SQL.PARSE ( cursor_name, body_, DBMS_SQL.NATIVE );' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ret := DBMS_SQL.EXECUTE ( cursor_name );' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    DBMS_SQL.CLOSE_CURSOR ( cursor_name );' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserAllRolesInAllAreas return varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return RDX_ACS.userAllRolesInAllAreas(RDX_Arte.getUserName());  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userAllRolesInAllAreas(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    vRole  varchar2(30);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    vRoles varchar2(4000);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Area TRdxAcsArea;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    vRoles := '''';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    for ind in (select distinct ROLEID from RDX_AC_USER2ROLE where isNew=0  and isOwn=0 and  username = pUser)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          if vRoles is NULL then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             vRoles := ind.ROLEID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             vRoles := vRoles || '','' || ind.ROLEID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       end loop; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return vRoles;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function getCurUserAllRolesForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return RDX_ACS.getAllRolesForObject(RDX_Arte.getUserName(), pPointList);  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function getAllRolesForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    vRole  varchar2(30);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    vRoles varchar2(4000);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Area TRdxAcsArea;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    rightsList TIdRecordList;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    curIndex integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin                                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    vRoles := '''';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if pPointList is null or pPointList.COUNT=0 then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    begin             ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    for ind in (select distinct ROLEID from RDX_AC_USER2ROLE where isNew=0  and isOwn=0 and  username = pUser)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           if (RDX_ACS.contentId(ind.ROLEID, rightsList)=0) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               curIndex := rightsList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               rightsList(curIndex).IdValue := ind.ROLEID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               if vRoles is NULL then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  vRoles := ind.ROLEID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                  vRoles := vRoles || '','' || ind.ROLEID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	               end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	       end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     begin                 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     for ind in (select distinct * from RDX_AC_USER2ROLE where isNew=0 and  userName = pUser )' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        Area := RDX_ACS_UTILS.buildAssignedAccessAreaU2R(ind);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        for i in pPointList.FIRST..pPointList.LAST' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              if RDX_ACS.containsPointInArea(Area, pPointList(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                 begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (RDX_ACS.contentId(ind.ROLEID, rightsList)=0) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := rightsList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        rightsList(curIndex).IdValue := ind.ROLEID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if vRoles is null then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                           vRoles := ind.ROLEID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                           vRoles := vRoles || '','' || ind.ROLEID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        EXIT;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                     end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                 end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	           end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return vRoles; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function strToArea(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		str_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return TRdxAcsArea' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    pos_ integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    pos_:=1; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return RDX_ACS.strToArea(str_, pos_);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function strToAreaList(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		str in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return TRdxAcsAreaList' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    list TRdxAcsAreaList;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    pos_ integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    area TRdxAcsArea;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    pos_:=1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    list := TRdxAcsAreaList();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if SubStr(str, pos_, 1)<>''('' then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        RAISE_APPLICATION_ERROR (-20100, RDX_ACS_Vars.error_Message || str );' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    pos_:=pos_+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    <<lbl>>while (SubStr(str, pos_, 1)<>'')'')' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            loop ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                area :=  RDX_ACS.strToArea(str, pos_);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                list.extend();' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                list(list.Count()):=area;     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                pos_:=pos_+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end loop;                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return list;    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function userHasRoleForObject(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pUser in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pRole in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pPointList in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	return RDX_ACS.userHasRoleForObject(pUser, pRole,  RDX_ACS.strToAreaList(pPointList));' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isCurUserHaveUserRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  return RDX_ACS.isUserHaveUserRights(user_, RDX_Arte.getUserName);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isUserHaveGroupRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		group_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	userArea TRdxAcsArea;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	groupArea TRdxAcsArea;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	flag boolean;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  for g2r_row in (select DISTINCT  * from RDX_AC_USERGROUP2ROLE where isNew=0 and groupname = group_)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop                                                     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    flag := false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    groupArea := RDX_ACS_UTILS.buildAssignedAccessAreaG2R(g2r_row);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    <<L>>for u2r_row in (select DISTINCT  * from RDX_AC_USER2ROLE U2R where isNew=0 and isOwn=0 and username = user_ and' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            (g2r_row.roleId = U2R.roleId or U2R.roleId = RDX_ACS_Vars.sysSuperAdminRoleId))' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            loop      ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              userArea := RDX_ACS_UTILS.buildAssignedAccessAreaU2R(u2r_row);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              if RDX_ACS.containsPointInArea2(userArea, groupArea) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                 flag := true;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                 exit L;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end loop; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if not flag then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      return 0; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isUserHaveUserRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user2_ in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	userArea TRdxAcsArea;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	lowerUserArea TRdxAcsArea;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	flag boolean;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  for u2r_row1 in (select DISTINCT * from RDX_AC_USER2ROLE where isNew=0 and isOwn=0 and username = user2_)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    loop                                                     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    flag := false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    lowerUserArea := RDX_ACS_UTILS.buildAssignedAccessAreaU2R(u2r_row1);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    <<L>>for u2r_row in (select DISTINCT * from RDX_AC_USER2ROLE U2R where isNew=0 and isOwn=0 and username = user_ and' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            (u2r_row1.roleId = U2R.roleId or U2R.roleId = RDX_ACS_Vars.sysSuperAdminRoleId))' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              userArea := RDX_ACS_UTILS.buildAssignedAccessAreaU2R(u2r_row);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              if RDX_ACS.containsPointInArea2(userArea, lowerUserArea) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                 flag := true;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                 exit L;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	              end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end loop; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if not flag then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      return 0; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isCurUserHaveGroupRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		group_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  return RDX_ACS.isUserHaveGroupRights(group_, RDX_Arte.getUserName);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isGroupHaveRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		group_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	rez INTEGER;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 rez := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 SELECT COUNT(*) INTO rez FROM RDX_AC_USERGROUP2ROLE WHERE ROWNUM <= 1 AND groupName = group_;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return rez;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isUserHaveOwnRights(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user_ in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	rez INTEGER;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 rez := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 SELECT COUNT(*) INTO rez FROM RDX_AC_USER2ROLE WHERE ROWNUM <= 1 AND userName = user_ AND isOwn = 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return rez;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserGroupAdministered(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		pGroup in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 for ind in (Select * from RDX_AC_USER2ROLE' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             where isNew=0 and isOwn=0 and userName = RDX_Arte.getUserName())' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     loop         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         if ind.MA$$1ZOQHCO35XORDCV2AANE2UAFXA = RDX_ACS.cRight_unbounded or' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            (ind.MA$$1ZOQHCO35XORDCV2AANE2UAFXA = RDX_ACS.cRight_boundedByPart and ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             ind.PA$$1ZOQHCO35XORDCV2AANE2UAFXA is not null and' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             ind.PA$$1ZOQHCO35XORDCV2AANE2UAFXA = pGroup)                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function curUserNullGroupAdministered return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 for ind in (Select * from RDX_AC_USER2ROLE' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             where isNew=0 and isOwn=0 and userName = RDX_Arte.getUserName())' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     loop         ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	         if ind.MA$$1ZOQHCO35XORDCV2AANE2UAFXA = RDX_ACS.cRight_unbounded or' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            (ind.MA$$1ZOQHCO35XORDCV2AANE2UAFXA = RDX_ACS.cRight_boundedByPart and ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             ind.PA$$1ZOQHCO35XORDCV2AANE2UAFXA is null)                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	          end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function isNewUserOrGroup2Role(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userTable in integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		Id_ in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 rez integer := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 if (userTable = 1) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    select 1 into rez  from dual where exists (Select * from RDX_AC_USER2ROLE where  ID = Id_ and ISNEW <> 0);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    exception when NO_DATA_FOUND then rez  := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    select 1 into rez  from dual where exists (Select * from RDX_AC_USERGROUP2ROLE where ID = Id_ and ISNEW <> 0);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    exception when NO_DATA_FOUND then rez  := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  end  if;       ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return rez;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function mayReplaceOrRevokeRole(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userTable in integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		Id_ in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 rez integer := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 if (userTable = 1) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    select 1 into rez  from dual where exists (Select * from RDX_AC_USER2ROLE where ISNEW=0 AND ID = Id_) and  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                   not exists (Select * from RDX_AC_USER2ROLE where REPLACEDID = Id_);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    exception when NO_DATA_FOUND then rez  := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    select 1 into rez  from dual where exists (Select * from RDX_AC_USERGROUP2ROLE where ISNEW=0 AND ID = Id_) and  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                   not exists (Select * from RDX_AC_USERGROUP2ROLE where REPLACEDID = Id_);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    exception when NO_DATA_FOUND then rez  := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  end  if;       ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return rez;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function getNext2RoleId(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userTable in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   if (userTable=1) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      return SQN_RDX_AC_USER2ROLEID.nextVal;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   else ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      return SQN_RDX_AC_USERGROUP2ROLEID.nextVal;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   end if;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function usedDualControlWhenAssignRoles return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 rez integer := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    select RDX_SYSTEM.DUALCONTROLFORASSIGNROLE into rez from RDX_SYSTEM where ID=1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    exception when NO_DATA_FOUND then rez  := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end;       ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return rez;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure acceptRolesAndU2G(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userTable in integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userOrGroupName in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		ignoredRoles out varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		ignoredUsersOrGroups out varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		addedRCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		replacedRCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		removedRCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		addedU2GCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		removedU2GCount out integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  curIndex integer;   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  Type TUser2RoleIdRecord IS RECORD (IdValue RDX_AC_USER2ROLE.ID%Type);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  Type TUser2RoleIdRecordList is table of TUser2RoleIdRecord index by binary_integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ignoredRolesList TUser2RoleIdRecordList;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  addedRolesList TUser2RoleIdRecordList;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  replacedRolesList TUser2RoleIdRecordList; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  removedRolesList TUser2RoleIdRecordList;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  addedRoles integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  replacedRoles integer;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  removedRoles integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  addedU2G integer;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  removedU2G integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  flag boolean;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  Type TUserOrGroupNameRecord IS RECORD (NameValue RDX_AC_USER.NAME%Type);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  Type TUserOrGroupNameRecordList is table of TUserOrGroupNameRecord index by binary_integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ignoredUsersOrGroupsList TUserOrGroupNameRecordList;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  addedUsersOrGroupsList TUserOrGroupNameRecordList;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  removedUsersOrGroupsList TUserOrGroupNameRecordList;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  outputBuffer varchar(32767);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  addedRoles := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  replacedRoles := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  removedRoles := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  addedU2G := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  removedU2G := 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	if (userTable=1) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        for item in (Select * from RDX_AC_USER2ROLE where ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                USERNAME = userOrGroupName and ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ISNEW = 1 and ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ISOWN = 1 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            )' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if (RDX_Arte.getUserName = item.EDITORNAME) then                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    curIndex := ignoredRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (item.REPLACEDID is null) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ignoredRolesList(curIndex).IdValue := item.ID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ignoredRolesList(curIndex).IdValue := item.REPLACEDID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end if;   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    GOTO end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if ((item.REPLACEDID is null) and (item.ROLEID is not null)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (RDX_ACS_UTILS.existsRightsOnUser2Role(RDX_Arte.getUserName(), item.ID)=0) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := ignoredRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ignoredRolesList(curIndex).IdValue := item.ID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        addedRoles := addedRoles + 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := addedRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        addedRolesList(curIndex).IdValue := item.ID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    GOTO end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if ((item.REPLACEDID is not null) and (item.ROLEID is null)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (RDX_ACS_UTILS.existsRightsOnUser2Role(RDX_Arte.getUserName(), item.REPLACEDID)=0) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := ignoredRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ignoredRolesList(curIndex).IdValue := item.REPLACEDID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        removedRoles := removedRoles + 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := removedRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        removedRolesList(curIndex).IdValue := item.REPLACEDID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := removedRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        removedRolesList(curIndex).IdValue := item.ID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    GOTO end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if ((item.REPLACEDID is not null) and (item.ROLEID is not null)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                         RDX_ACS_UTILS.existsRightsOnUser2Role(RDX_Arte.getUserName(), item.REPLACEDID)=0' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                         or' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                         RDX_ACS_UTILS.existsRightsOnUser2Role(RDX_Arte.getUserName(), item.ID)=0' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ) ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := ignoredRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ignoredRolesList(curIndex).IdValue := item.REPLACEDID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        replacedRoles := replacedRoles + 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := replacedRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        replacedRolesList(curIndex).IdValue := item.ID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := removedRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        removedRolesList(curIndex).IdValue := item.REPLACEDID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    GOTO end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                <<end_loop>> ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end loop;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (addedRolesList.first() is not null) then     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in addedRolesList.first() .. addedRolesList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (addedRolesList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            update RDX_AC_USER2ROLE SET ISNEW=0, ACCEPTORNAME=RDX_Arte.getUserName  where ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                ID = addedRolesList(i).IdValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (replacedRolesList.first() is not null) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in replacedRolesList.first() .. replacedRolesList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (replacedRolesList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            update RDX_AC_USER2ROLE SET ISNEW=0, ACCEPTORNAME=RDX_Arte.getUserName, REPLACEDID=null  where ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                ID = replacedRolesList(i).IdValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (removedRolesList.first() is not null) then     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in removedRolesList.first() .. removedRolesList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (removedRolesList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            delete from RDX_AC_USER2ROLE where ID = removedRolesList(i).IdValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            flag := true;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            outputBuffer := '''';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (ignoredRolesList.first() is not null) then     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in ignoredRolesList.first() .. ignoredRolesList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (ignoredRolesList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            if (flag  = true)then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               flag := false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               outputBuffer := outputBuffer || chr(10);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            end if;                        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            outputBuffer := outputBuffer || ignoredRolesList(i).IdValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ignoredRoles := outputBuffer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            addedRCount := addedRoles;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            replacedRCount := replacedRoles;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            removedRCount := removedRoles;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        for item in (Select * from RDX_AC_USER2USERGROUP where ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                USERNAME = userOrGroupName and ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                STATE<>0' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            )' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            loop            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if (RDX_Arte.getUserName = item.EDITORNAME) then                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    curIndex := ignoredUsersOrGroupsList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    ignoredUsersOrGroupsList(curIndex).NameValue := item.GROUPNAME;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    goto end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if (item.STATE=1) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (RDX_ACS.isCurUserHaveGroupRights(item.GROUPNAME)=0 or ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        RDX_ACS.isCurUserHaveUserRights(userOrGroupName)=0' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := ignoredUsersOrGroupsList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ignoredUsersOrGroupsList(curIndex).NameValue := item.GROUPNAME;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        addedU2G := addedU2G + 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := addedUsersOrGroupsList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        addedUsersOrGroupsList(curIndex).NameValue := item.GROUPNAME;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    goto end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if (item.STATE=2) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (RDX_ACS.isCurUserHaveGroupRights(item.GROUPNAME)=0 or ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        RDX_ACS.isCurUserHaveUserRights(userOrGroupName)=0' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := ignoredUsersOrGroupsList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ignoredUsersOrGroupsList(curIndex).NameValue := item.GROUPNAME;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        removedU2G := removedU2G + 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := removedUsersOrGroupsList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        removedUsersOrGroupsList(curIndex).NameValue := item.GROUPNAME;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    goto end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                <<end_loop>> ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (addedUsersOrGroupsList.first() is not null) then     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in addedUsersOrGroupsList.first() .. addedUsersOrGroupsList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (addedUsersOrGroupsList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            update RDX_AC_USER2USERGROUP SET STATE=0, ACCEPTORNAME=RDX_Arte.getUserName  where ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                USERNAME = userOrGroupName and GROUPNAME = addedUsersOrGroupsList(i).NameValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (removedUsersOrGroupsList.first() is not null) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in removedUsersOrGroupsList.first() .. removedUsersOrGroupsList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (removedUsersOrGroupsList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            delete from RDX_AC_USER2USERGROUP where USERNAME = userOrGroupName and GROUPNAME = removedUsersOrGroupsList(i).NameValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            flag := true;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            outputBuffer := '''';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (ignoredUsersOrGroupsList.first() is not null) then     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in ignoredUsersOrGroupsList.first() .. ignoredUsersOrGroupsList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (ignoredUsersOrGroupsList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            if (flag  = true)then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               flag := false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               outputBuffer := outputBuffer || chr(10);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            end if;                        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            outputBuffer := outputBuffer || ignoredUsersOrGroupsList(i).NameValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ignoredUsersOrGroups := outputBuffer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            addedU2GCount := addedU2G;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            removedU2GCount := removedU2G;            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    RDX_ACS_UTILS.compileRightsForUser(userOrGroupName);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	else ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        for item in (Select * from RDX_AC_USERGROUP2ROLE where ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                GROUPNAME = userOrGroupName and ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ISNEW = 1' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            )' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if (RDX_Arte.getUserName = item.EDITORNAME) then                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    curIndex := ignoredRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (item.REPLACEDID is null) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ignoredRolesList(curIndex).IdValue := item.ID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ignoredRolesList(curIndex).IdValue := item.REPLACEDID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end if;   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    goto end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if ((item.REPLACEDID is null) and (item.ROLEID is not null)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (RDX_ACS_UTILS.existsRightsOnGroup2Role(RDX_Arte.getUserName(), item.ID)=0) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := ignoredRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ignoredRolesList(curIndex).IdValue := item.ID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        addedRoles := addedRoles + 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := addedRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        addedRolesList(curIndex).IdValue := item.ID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    goto end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if ((item.REPLACEDID is not null) and (item.ROLEID is null)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (RDX_ACS_UTILS.existsRightsOnGroup2Role(RDX_Arte.getUserName(), item.REPLACEDID)=0) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := ignoredRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ignoredRolesList(curIndex).IdValue := item.REPLACEDID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        removedRoles := removedRoles + 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := removedRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        removedRolesList(curIndex).IdValue := item.REPLACEDID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := removedRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        removedRolesList(curIndex).IdValue := item.ID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    goto end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                 ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if ((item.REPLACEDID is not null) and (item.ROLEID is not null)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                         RDX_ACS_UTILS.existsRightsOnGroup2Role(RDX_Arte.getUserName(), item.REPLACEDID)=0' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                         or' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                         RDX_ACS_UTILS.existsRightsOnGroup2Role(RDX_Arte.getUserName(), item.ID)=0' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ) ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := ignoredRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ignoredRolesList(curIndex).IdValue := item.REPLACEDID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        replacedRoles := replacedRoles + 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := replacedRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        replacedRolesList(curIndex).IdValue := item.ID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := removedRolesList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        removedRolesList(curIndex).IdValue := item.REPLACEDID;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    goto end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                <<end_loop>> ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end loop;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (addedRolesList.first() is not null) then     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in addedRolesList.first() .. addedRolesList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (addedRolesList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            update RDX_AC_USERGROUP2ROLE SET ISNEW=0, ACCEPTORNAME=RDX_Arte.getUserName  where ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                ID = addedRolesList(i).IdValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (replacedRolesList.first() is not null) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in replacedRolesList.first() .. replacedRolesList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (replacedRolesList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            update RDX_AC_USERGROUP2ROLE SET ISNEW=0, ACCEPTORNAME=RDX_Arte.getUserName, REPLACEDID=null  where ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                ID = replacedRolesList(i).IdValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (removedRolesList.first() is not null) then     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in removedRolesList.first() .. removedRolesList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (removedRolesList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            delete from RDX_AC_USERGROUP2ROLE where ID = removedRolesList(i).IdValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            flag := true;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            outputBuffer := '''';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (ignoredRolesList.first() is not null) then     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in ignoredRolesList.first() .. ignoredRolesList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (ignoredRolesList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            if (flag  = true)then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               flag := false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               outputBuffer := outputBuffer || chr(10);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            end if;                        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            outputBuffer := outputBuffer || ignoredRolesList(i).IdValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ignoredRoles := outputBuffer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            addedRCount := addedRoles;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            replacedRCount := replacedRoles;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            removedRCount := removedRoles;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        for item in (Select * from RDX_AC_USER2USERGROUP where ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                GROUPNAME = userOrGroupName and ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                STATE<>0' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            )' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            loop            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if (RDX_Arte.getUserName = item.EDITORNAME) then                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    curIndex := ignoredUsersOrGroupsList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    ignoredUsersOrGroupsList(curIndex).NameValue := item.USERNAME;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    goto end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if (item.STATE=1) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (RDX_ACS.isCurUserHaveUserRights(item.USERNAME)=0 or ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        RDX_ACS.isCurUserHaveGroupRights(userOrGroupName)=0' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := ignoredUsersOrGroupsList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ignoredUsersOrGroupsList(curIndex).NameValue := item.USERNAME;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        addedU2G := addedU2G + 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := addedUsersOrGroupsList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        addedUsersOrGroupsList(curIndex).NameValue := item.USERNAME;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    goto end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                if (item.STATE=2) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    if (RDX_ACS.isCurUserHaveUserRights(item.USERNAME)=0 or ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        RDX_ACS.isCurUserHaveGroupRights(userOrGroupName)=0' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                       ) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := ignoredUsersOrGroupsList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        ignoredUsersOrGroupsList(curIndex).NameValue := item.USERNAME;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        removedU2G := removedU2G + 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        curIndex := removedUsersOrGroupsList.count()+1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        removedUsersOrGroupsList(curIndex).NameValue := item.USERNAME;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    goto end_loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                <<end_loop>> ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                null;              ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (addedUsersOrGroupsList.first() is not null) then     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in addedUsersOrGroupsList.first() .. addedUsersOrGroupsList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (addedUsersOrGroupsList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            update RDX_AC_USER2USERGROUP SET STATE=0, ACCEPTORNAME=RDX_Arte.getUserName  where ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                GROUPNAME = userOrGroupName and USERNAME = addedUsersOrGroupsList(i).NameValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                null;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (removedUsersOrGroupsList.first() is not null) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in removedUsersOrGroupsList.first() .. removedUsersOrGroupsList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (removedUsersOrGroupsList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            delete from RDX_AC_USER2USERGROUP where GROUPNAME = userOrGroupName and USERNAME = removedUsersOrGroupsList(i).NameValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            flag := true;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            outputBuffer := '''';' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            if (ignoredUsersOrGroupsList.first() is not null) then     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                for i in ignoredUsersOrGroupsList.first() .. ignoredUsersOrGroupsList.last()' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    loop' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        if (ignoredUsersOrGroupsList.exists(i)) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            if (flag  = true)then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               flag := false;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                               outputBuffer := outputBuffer || chr(10);' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            end if;                        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                            outputBuffer := outputBuffer || ignoredUsersOrGroupsList(i).NameValue;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                        end if;                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                    end loop;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	             end if; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            ignoredUsersOrGroups := outputBuffer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	                                    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            addedU2GCount := addedU2G;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	            removedU2GCount := removedU2G; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        RDX_ACS_UTILS.compileRightsForGroup(userOrGroupName);            ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure getRolesAndU2GCount(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userTable in integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userOrGroupName in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		acceptedRCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		unacceptedRCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		acceptedU2GCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		unacceptedU2GCount out integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  if (userTable = 1) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Select count (*) into unacceptedRCount from RDX_AC_USER2ROLE where USERNAME = userOrGroupName and RDX_Arte.getUserName = EDITORNAME and ISNEW=1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Select count (*) into acceptedRCount from RDX_AC_USER2ROLE where USERNAME = userOrGroupName and RDX_Arte.getUserName <> EDITORNAME and ISNEW=1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Select count (*) into unacceptedU2GCount from RDX_AC_USER2USERGROUP where USERNAME = userOrGroupName and RDX_Arte.getUserName = EDITORNAME and STATE<>0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Select count (*) into acceptedU2GCount from RDX_AC_USER2USERGROUP where USERNAME = userOrGroupName and RDX_Arte.getUserName <> EDITORNAME and STATE<>0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  else' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Select count (*) into unacceptedRCount from RDX_AC_USERGROUP2ROLE where GROUPNAME = userOrGroupName and RDX_Arte.getUserName = EDITORNAME and ISNEW=1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Select count (*) into acceptedRCount from RDX_AC_USERGROUP2ROLE where GROUPNAME = userOrGroupName and RDX_Arte.getUserName <> EDITORNAME and ISNEW=1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Select count (*) into unacceptedU2GCount from RDX_AC_USER2USERGROUP where GROUPNAME = userOrGroupName and RDX_Arte.getUserName = EDITORNAME and STATE<>0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    Select count (*) into acceptedU2GCount from RDX_AC_USER2USERGROUP where GROUPNAME = userOrGroupName and RDX_Arte.getUserName <> EDITORNAME and STATE<>0;    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  end if;  ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	procedure getNotAcceptedEntities(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user2UserGroupCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		firstUser2UserGroup out varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		userGroup2RoleCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		firstUserGroup2Role out varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		user2RoleCount out integer,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		firstUser2Role out varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	)' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 rez  integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 buff varchar2(200); ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    rez:=0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    SELECT COUNT(*) INTO rez FROM RDX_AC_USER2USERGROUP WHERE ROWNUM <= 1 AND STATE<>0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    user2UserGroupCount:=rez;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	     ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if (rez<>0) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      SELECT USERNAME || chr(10) || GROUPNAME INTO firstUser2UserGroup FROM RDX_AC_USER2USERGROUP WHERE ROWNUM = 1 AND STATE<>0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    SELECT COUNT(*) INTO rez FROM RDX_AC_USERGROUP2ROLE WHERE ROWNUM <= 1 AND ISNEW<>0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    userGroup2RoleCount := rez;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	   ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if (rez<>0) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        SELECT GROUPNAME  || chr(10) || ROLEID INTO firstUserGroup2Role FROM RDX_AC_USERGROUP2ROLE WHERE ROWNUM = 1 AND ISNEW<>0;      ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    SELECT COUNT(*) INTO rez FROM RDX_AC_USER2ROLE WHERE ROWNUM <= 1 AND ISNEW<>0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    user2RoleCount := rez;    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if (rez<>0) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	        SELECT USERNAME  || chr(10) || ROLEID INTO firstUser2Role FROM RDX_AC_USER2ROLE WHERE ROWNUM = 1 AND ISNEW<>0;        ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function haveNotAcceptedEntities return integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	rez integer;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    rez:=0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    SELECT COUNT(*) INTO rez FROM RDX_AC_USER2USERGROUP WHERE ROWNUM <= 1 AND STATE<>0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if (rez<>0) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    SELECT COUNT(*) INTO rez FROM RDX_AC_USERGROUP2ROLE WHERE ROWNUM <= 1 AND ISNEW<>0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if (rez<>0) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    SELECT COUNT(*) INTO rez FROM RDX_AC_USER2ROLE WHERE ROWNUM <= 1 AND ISNEW<>0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    if (rez<>0) then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	      return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    return 0;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	    ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function equalPartition(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		part1 in varchar2,' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		part2 in varchar2' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return integer deterministic' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 if (part1 is null) and (part2 is null) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 if (part1 is not null) and (part2 is not null) and (part1 = part2) then ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	  return 1;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 end if;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return 0; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	function readPartitions(' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '		partitionGroupId in integer' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	) return clob' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	is' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 rez clob;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	begin' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 select PARTITIONS into rez from RDX_AC_PARTITIONGROUP where ID = partitionGroupId;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return rez;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	exception ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 when NO_DATA_FOUND then' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	 return null; ' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := '	end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := 'end;' || CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
x := CHR(13);
DBMS_LOB.writeappend(clb, length(x), x);
 cursor_name := DBMS_SQL.OPEN_CURSOR;
 DBMS_SQL.PARSE ( cursor_name, clb, DBMS_SQL.NATIVE);
 ret := DBMS_SQL.EXECUTE (cursor_name);
 DBMS_SQL.CLOSE_CURSOR (cursor_name);
DBMS_LOB.freeTemporary(clb);

end if;

end;
/

declare
 count_ INTEGER;
begin
select count(*) into count_ from rdx_ddsVersion;
-- only for native radix system
if count_ = 1 then -- one layer: radixware.org 
  RDX_ACS.AcsUtilsBuild(); 
end if;
end;
/

declare
 count_ INTEGER;
begin
select count(*) into count_ from rdx_ddsVersion;
-- only for native radix system
if count_ = 1 then -- one layer: radixware.org 
  RDX_ACS_Utils.compileRights();
end if;
end;
/


grant execute on RDX_ACS to &USER&_RUN_ROLE
/

grant execute on RDX_ACS_UTILS to &USER&_RUN_ROLE
/

