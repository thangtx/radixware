/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */
package org.radixware.kernel.common.svn;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dialog.ModalityType;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.lang.reflect.InvocationTargetException;

import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.radixware.kernel.common.svn.client.ISvnPasswordProvider;
import org.radixware.kernel.common.svn.client.SvnAuthType;

public class LoginDialog extends javax.swing.JPanel {

    static class Reference<T> {

        private T ref;

        public Reference() {
        }

        public Reference(T ref) {
            set(ref);
        }

        public boolean isEmpty() {
            return ref == null;
        }

        public final void set(T ref) {
            this.ref = ref;
        }

        public T get() {
            return ref;
        }
    }
    /**
     * Creates new form DbLoginDialog
     */
    private boolean isOk = false;

    public LoginDialog() {
        initComponents();
        btOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                close(true);
            }
        });
        btCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                close(false);
            }
        });
        jPasswordField.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                close(true);
            }
        });

        jPasswordField.addKeyListener(new KeyListener() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    close(false);
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }

            @Override
            public void keyTyped(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    close(false);
                }
            }
        });
    }

    private void close(boolean ok) {
        isOk = ok;
        Component c = getParent();
        while (c != null) {
            if (c instanceof JDialog) {
                c.setVisible(false);
                return;
            }
            c = c.getParent();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btOk = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();
        jUserLabel = new javax.swing.JLabel();
        jPasswordLabel = new javax.swing.JLabel();
        jUserTextField = new javax.swing.JTextField();
        jPasswordField = new javax.swing.JPasswordField();
        jTargetLabel = new javax.swing.JLabel();
        jTargetTextField = new javax.swing.JTextField();

        setMinimumSize(new java.awt.Dimension(0, 120));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/radixware/kernel/common/svn/Bundle"); // NOI18N
        btOk.setText(bundle.getString("LoginDialog.btOk.text")); // NOI18N

        btCancel.setText(bundle.getString("LoginDialog.btCancel.text")); // NOI18N

        jUserLabel.setText(bundle.getString("LoginDialog.jUserLabel.text")); // NOI18N

        jPasswordLabel.setText(bundle.getString("LoginDialog.jPasswordLabel.text")); // NOI18N

        jUserTextField.setText(bundle.getString("LoginDialog.jUserTextField.text")); // NOI18N

        jPasswordField.setText(bundle.getString("LoginDialog.jPasswordField.text")); // NOI18N

        jTargetLabel.setText(bundle.getString("LoginDialog.jTargetLabel.text")); // NOI18N

        jTargetTextField.setEditable(false);
        jTargetTextField.setText(bundle.getString("LoginDialog.jTargetTextField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPasswordLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btOk, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTargetLabel)
                            .addComponent(jUserLabel))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTargetTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                            .addComponent(jUserTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                            .addComponent(jPasswordField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTargetLabel)
                    .addComponent(jTargetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jUserLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPasswordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCancel)
                    .addComponent(btOk))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btOk;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JLabel jPasswordLabel;
    private javax.swing.JLabel jTargetLabel;
    private javax.swing.JTextField jTargetTextField;
    private javax.swing.JLabel jUserLabel;
    private javax.swing.JTextField jUserTextField;
    // End of variables declaration//GEN-END:variables

    public boolean execute(String title, String targetName, String target, Reference<String> user, Reference<String> password) {
        if (targetName == null) {
            jTargetLabel.setVisible(false);
            jTargetTextField.setVisible(false);
        }
        jTargetLabel.setText(targetName + ":");
        jTargetTextField.setText(target);
        jTargetTextField.setEditable(false);
        jTargetTextField.setFocusable(false);
        if (user != null) {
            if (user.get() != null && user.get().length() != 0) {
                jUserTextField.setText(user.get());
                jUserTextField.setEditable(false);
                jUserTextField.setFocusable(false);
            }
        } else {
            jUserLabel.setVisible(false);
            jUserTextField.setVisible(false);
        }

        JDialog dialog = new JDialog(null, ModalityType.APPLICATION_MODAL);
        dialog.setTitle(title);
        dialog.setLayout(new BorderLayout(0, 0));
        dialog.add(this);
        dialog.pack();
        dialog.setSize(getWidth(), getHeight() + 50);
        dialog.setMinimumSize(dialog.getSize());
        isOk = false;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        dialog.setLocation(screenSize.width / 2 - dialog.getWidth() / 2, screenSize.height / 2 - dialog.getHeight() / 2);
        dialog.setVisible(true);

        if (isOk) {
            if (user != null && user.get() == null) {
                user.set(jUserTextField.getText());
            }
            password.set(new String(jPasswordField.getPassword()));
            return true;
        }
        return false;
    }

    private static class Holder {

        RadixSvnException ex;
        char[] password = null;
    }

    public static class PasswordGetter implements ISvnPasswordProvider {

        @Override
        public char[] getPassword(boolean firstAttempt, SvnAuthType authType, String message, String targetTitle, String target, String userName) throws RadixSvnException {
            return LoginDialog.getPassword(message, targetTitle, target, userName);
        }

    }

    public static char[] getPassword(final String title, final String targetName, final String target, final String user) throws RadixSvnException {
        if (EventQueue.isDispatchThread()) {
            Reference<String> user_ref = null;
            if (user != null) {
                user_ref = new Reference<>(user);
            }
            Reference<String> pwd_ref = new Reference<>();

            boolean isMustContinue = true;
            while (isMustContinue) {
                isMustContinue = false;
                if (!new LoginDialog().execute(title, targetName, target, user_ref, pwd_ref)) {
                    if (JOptionPane.showConfirmDialog(null,
                            "Are you sure you want to cancel authorization?",
                            "Conformation",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE, null) == JOptionPane.YES_OPTION) {
                        throw new RadixSvnException(RadixSvnException.Type.REJECT_AUTH);
                    } else {
                        isMustContinue = true;
                    }
                } else {
                    break;
                }
            }
            String str = pwd_ref.get();
            return str == null ? null : str.toCharArray();
        } else {
            final Holder holder = new Holder();
            try {
                SwingUtilities.invokeAndWait(new Runnable() {

                    @Override
                    public void run() {
                        try {
                            holder.password = getPassword(title, targetName, target, user);
                        } catch (RadixSvnException ex) {
                            holder.ex = ex;
                        }
                    }
                });
            } catch (InterruptedException ex) {
                throw new RadixSvnException(RadixSvnException.Type.REJECT_AUTH);
            } catch (InvocationTargetException ex) {
                throw new IllegalStateException(ex);
            }

            if (holder.ex != null) {
                throw holder.ex;
            } else {
                return holder.password;
            }
        }
    }
}
