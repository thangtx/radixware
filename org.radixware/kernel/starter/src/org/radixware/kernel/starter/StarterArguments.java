/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */
package org.radixware.kernel.starter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class StarterArguments {

    public static final String SHOW_SPLASH_SCREEN = "showSplashScreen";
    public static final String CONFIG_FILE = "configFile";
    public static final String STARTER_SECTION = "Starter";
    public static final String APP_ARGS = "appArgs";
    public static final String APP_CLASS = "appClass";
    public static final String NO_RESTART = "noRestart";
    public static final String RESTARTED_COUNT = "restartedCount";
    public static final String DISABLE_SWING_PRELOAD = "disableSwingPreload";
    public static final String PRODUCT_NAME = "productName";
    public static final String SVN_HOME_URL = "svnHomeUrl";
    public static final String ADDITIONAL_SVN_URLS = "additionalSvnUrls";
    public static final String WORK_DIR = "workDir";
    public static final String AUTH_USER = "authUser";
    public static final String AUTH_PASSWORD_INTERACTIVE = "authPasswordInteractive";
    public static final String AUTH_PASSWORD = "authPassword";
    public static final String KRB_REALM = "krbRealm";
    public static final String KRB_KDC = "krbKdc";
    public static final String KRB_PARAMS = "krbParams";
    public static final String SSH_KEY_FILE = "sshKeyFile";
    public static final String SSH_KEY_PASSWORD_INTERACTIVE = "sshKeyPasswordInteractive";
    public static final String SSH_KEY_PASSWORD = "sshKeyPassword";
    public static final String DEV_TOOLS = "devTools";
    public static final String SVN_LOG = "svnLog";
    public static final String LOCAL_FILE_CACHE_DIR = "localFileCacheDir";
    public static final String SVN_SERVER_CERT_FILE = "svnServerCertFile";
    public static final String LOCAL_FILE_LIST_PATH = "localFileList";
    public static final String DISABLE_SVN_PING = "disableSvnPing";
    public static final String DISABLE_DIGEST_CHECK = "disableDigestCheck";
    public static final String EXPORT_COMMAND = "export";
    private final String configFileName;
    private final Map<String, String> starterParameters;
    private final List<String> appParameters;

    public StarterArguments(final Map<String, String> starterParameters, final List<String> appParameters) {
        this(null, starterParameters, appParameters);
    }

    public StarterArguments(final String configFileName, final Map<String, String> starterParameters, final List<String> appParameters) {
        this.configFileName = configFileName;
        this.starterParameters = starterParameters;
        this.appParameters = appParameters;
    }

    public boolean isFromConfigFile() {
        return configFileName != null;
    }

    public String getConfigFileName() {
        return configFileName;
    }

    public Map<String, String> getStarterParameters() {
        return new HashMap<>(starterParameters);
    }

    public Map<String, String> getStarterParametersForConfig() {
        final Map<String, String> paramsForConfig = new HashMap<>(starterParameters);
        excludeAutogeneratedParams(paramsForConfig);
        paramsForConfig.put(APP_CLASS, appParameters.get(0));
        if (!(appParameters.size() == 3 && appParameters.get(1).equals("-" + CONFIG_FILE))) {
            final StringBuilder appParamsBuilder = new StringBuilder();
            for (int i = 1; i < appParameters.size(); i++) {
                appParamsBuilder.append(appParameters.get(i));
                appParamsBuilder.append(" ");
            }
            paramsForConfig.put(APP_ARGS, appParamsBuilder.toString());
        }
        return paramsForConfig;
    }

    public List<String> getAppParameters() {
        return new ArrayList<>(appParameters);
    }

    private void excludeAutogeneratedParams(final Map<String, String> map) {
        if (map != null) {
            map.remove(NO_RESTART);
            map.remove(RESTARTED_COUNT);
        }
    }

    public String asStrWithoutAppParams() {
        final StringBuilder sb = new StringBuilder();
        final Map<String, String> sortedMap = new TreeMap<>(starterParameters);
        excludeAutogeneratedParams(sortedMap);
        for (Map.Entry<String, String> entry : sortedMap.entrySet()) {
            if (sb.length() > 0) {
                sb.append(" ");
            }
            sb.append(entry.getKey());
            if (entry.getValue() != null) {
                sb.append("=").append(entry.getValue());
            }
        }
        return sb.toString();
    }
}
