/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.dds.editors;

import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.radixware.kernel.common.defs.dds.DdsCustomTextDef;
import org.radixware.kernel.designer.common.annotations.registrators.EditorFactoryRegistration;
import org.radixware.kernel.designer.common.dialogs.components.state.IStateDisplayer;
import org.radixware.kernel.designer.common.dialogs.components.state.StateDisplayer;
import org.radixware.kernel.designer.common.editors.RadixObjectEditor;
import org.radixware.kernel.designer.common.editors.sqml.SqmlEditorPanel;
import org.radixware.kernel.designer.common.general.editors.IEditorFactory;
import org.radixware.kernel.designer.common.general.editors.OpenInfo;

/**
 * DdsCustomTextDef editor.
, akiliyevich.
 */
public final class DdsCustomTextEditor extends RadixObjectEditor<DdsCustomTextDef> {

    private final SqmlEditorPanel sqmlEditor;
    private volatile boolean updating = false;

    protected DdsCustomTextEditor(DdsCustomTextDef customText) {
        super(customText);

        initComponents();
        initStateDisplayer();

        sqmlEditor = new SqmlEditorPanel();
        sqmlPanel.add(sqmlEditor, BorderLayout.CENTER);

        nameEditPanel.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                if (!updating && nameEditPanel.isComplete()) {
                    getCustomText().setName(nameEditPanel.getCurrentName());
                }
            }
        });
    }

    private void initStateDisplayer() {
        StateDisplayer stateDisplayer = new StateDisplayer();
        IStateDisplayer.Locator.register(stateDisplayer, this);
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new EmptyBorder(5, 10, 5, 10));
        panel.add(stateDisplayer, BorderLayout.CENTER);
        sqmlPanel.add(panel, BorderLayout.SOUTH);
    }

    private void updateEnableState() {
        nameEditPanel.setEditable(!getCustomText().isReadOnly());
        sqmlEditor.setEditable(!getCustomText().isReadOnly());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nameEditPanel = new org.radixware.kernel.designer.common.dialogs.components.NameEditPanel();
        sqmlPanel = new javax.swing.JPanel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DdsCustomTextEditor.class, "DdsCustomTextEditor.jLabel1.text")); // NOI18N

        sqmlPanel.setLayout(new java.awt.BorderLayout(0, 5));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(22, 22, 22)
                .addComponent(nameEditPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(sqmlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameEditPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sqmlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    //getCustomText().setName(edName.getText());

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private org.radixware.kernel.designer.common.dialogs.components.NameEditPanel nameEditPanel;
    private javax.swing.JPanel sqmlPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean open(OpenInfo openInfo) {
        update();
        return super.open(openInfo);
    }

    @Override
    public void update() {
        updating = true;
        nameEditPanel.setCurrentName(getCustomText().getName());
        sqmlEditor.open(getCustomText().getText());
        updateEnableState();
        updating = false;
    }

    protected DdsCustomTextDef getCustomText() {
        return getRadixObject();
    }

    @EditorFactoryRegistration
    public static final class Factory implements IEditorFactory<DdsCustomTextDef> {

        @Override
        public RadixObjectEditor newInstance(DdsCustomTextDef customText) {
            return new DdsCustomTextEditor(customText);
        }
    }
}
