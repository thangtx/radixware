/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.dds.editors;

import org.radixware.kernel.common.defs.dds.DdsModelDef;
import org.radixware.kernel.common.defs.dds.DdsSequenceDef;
import org.radixware.kernel.designer.common.dialogs.utils.NameAcceptorFactory;
import org.radixware.kernel.designer.common.editors.RadixObjectModalEditor;
import org.radixware.kernel.designer.common.general.editors.IEditorFactory;
import org.radixware.kernel.designer.common.general.editors.OpenInfo;

/**
 * DdsSequenceDef editor.
 */
public final class DdsSequenceEditor extends RadixObjectModalEditor<DdsSequenceDef> {

    private boolean opening = false;

    protected DdsSequenceEditor(DdsSequenceDef sequence) {
        super(sequence);
        initComponents();
        setMinimumSize(getPreferredSize());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chAutoDbName = new javax.swing.JCheckBox();
        chMinValue = new javax.swing.JCheckBox();
        chMaxValue = new javax.swing.JCheckBox();
        chStartWith = new javax.swing.JCheckBox();
        chIncrementBy = new javax.swing.JCheckBox();
        chCache = new javax.swing.JCheckBox();
        chCycle = new javax.swing.JCheckBox();
        chOrder = new javax.swing.JCheckBox();
        spnMinValue = new javax.swing.JSpinner();
        spnMaxValue = new javax.swing.JSpinner();
        spnStartWith = new javax.swing.JSpinner();
        spnIncrementBy = new javax.swing.JSpinner();
        spnCache = new javax.swing.JSpinner();
        lbName = new javax.swing.JLabel();
        edName = new org.radixware.kernel.designer.common.dialogs.components.NameEditPanel();
        edDbName = new org.radixware.kernel.designer.dds.editors.DbNameEditPanel();
        stateDisplayer1 = new org.radixware.kernel.designer.common.dialogs.components.state.StateDisplayer();

        chAutoDbName.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(chAutoDbName, org.openide.util.NbBundle.getMessage(DdsSequenceEditor.class, "DdsSequenceEditor.chAutoDbName.text")); // NOI18N
        chAutoDbName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chAutoDbNameActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chMinValue, org.openide.util.NbBundle.getMessage(DdsSequenceEditor.class, "DdsSequenceEditor.chMinValue.text")); // NOI18N
        chMinValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chMinValueActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chMaxValue, org.openide.util.NbBundle.getMessage(DdsSequenceEditor.class, "DdsSequenceEditor.chMaxValue.text")); // NOI18N
        chMaxValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chMaxValueActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chStartWith, org.openide.util.NbBundle.getMessage(DdsSequenceEditor.class, "DdsSequenceEditor.chStartWith.text")); // NOI18N
        chStartWith.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chStartWithActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chIncrementBy, org.openide.util.NbBundle.getMessage(DdsSequenceEditor.class, "DdsSequenceEditor.chIncrementBy.text")); // NOI18N
        chIncrementBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chIncrementByActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chCache, org.openide.util.NbBundle.getMessage(DdsSequenceEditor.class, "DdsSequenceEditor.chCache.text")); // NOI18N
        chCache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chCacheActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chCycle, org.openide.util.NbBundle.getMessage(DdsSequenceEditor.class, "DdsSequenceEditor.chCycle.text")); // NOI18N
        chCycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chCycleActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chOrder, org.openide.util.NbBundle.getMessage(DdsSequenceEditor.class, "DdsSequenceEditor.chOrder.text")); // NOI18N
        chOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chOrderActionPerformed(evt);
            }
        });

        spnMinValue.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(1L), null, null, Long.valueOf(1L)));
        spnMinValue.setEnabled(false);
        spnMinValue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnMinValueStateChanged(evt);
            }
        });

        spnMaxValue.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(9223372036854775807L), null, null, Long.valueOf(1L)));
        spnMaxValue.setEnabled(false);
        spnMaxValue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnMaxValueStateChanged(evt);
            }
        });

        spnStartWith.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(1L), null, null, Long.valueOf(1L)));
        spnStartWith.setEnabled(false);
        spnStartWith.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnStartWithStateChanged(evt);
            }
        });

        spnIncrementBy.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(1L), null, null, Long.valueOf(1L)));
        spnIncrementBy.setEnabled(false);
        spnIncrementBy.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnIncrementByStateChanged(evt);
            }
        });

        spnCache.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(20L), Long.valueOf(2L), null, Long.valueOf(1L)));
        spnCache.setEnabled(false);
        spnCache.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnCacheStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lbName, org.openide.util.NbBundle.getMessage(DdsSequenceEditor.class, "DdsSequenceEditor.lbName.text")); // NOI18N

        edName.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                edNameStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lbName))
                    .addComponent(chAutoDbName)
                    .addComponent(chMinValue)
                    .addComponent(chMaxValue)
                    .addComponent(chStartWith)
                    .addComponent(chIncrementBy)
                    .addComponent(chCache))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stateDisplayer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chOrder)
                    .addComponent(chCycle)
                    .addComponent(spnCache, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(spnIncrementBy, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(spnStartWith, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(spnMinValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(edName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(edDbName, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnMaxValue, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbName, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chAutoDbName)
                    .addComponent(edDbName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnMinValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chMinValue))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chMaxValue)
                    .addComponent(spnMaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnStartWith, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chStartWith))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnIncrementBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chIncrementBy))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chCache)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spnCache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chCycle)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chOrder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(stateDisplayer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(67, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void spnMinValueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnMinValueStateChanged
    }//GEN-LAST:event_spnMinValueStateChanged

    private void spnMaxValueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnMaxValueStateChanged
    }//GEN-LAST:event_spnMaxValueStateChanged

    private void spnStartWithStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnStartWithStateChanged
    }//GEN-LAST:event_spnStartWithStateChanged

    private void spnIncrementByStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnIncrementByStateChanged
    }//GEN-LAST:event_spnIncrementByStateChanged

    private void spnCacheStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnCacheStateChanged
    }//GEN-LAST:event_spnCacheStateChanged

    private void updateAutoDbName() {
        if (!opening) {
            boolean isAutoDbName = chAutoDbName.isSelected();
            if (isAutoDbName) {
                DdsSequenceDef sequence = getSequence();
                DdsModelDef ownerModel = sequence.getOwnerModel();
                String name = edName.getCurrentName();
                String dbName = DdsSequenceDef.calcAutoDbName(ownerModel, name);
                edDbName.setDbName(dbName);
            }
            updateState();
            // request focus - in action performed
        }
    }

    @Override
    public void requestFocus() {
        super.requestFocus();
        edName.requestFocusInWindow();
    }

    private void chAutoDbNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chAutoDbNameActionPerformed
        if (!opening) {
            updateAutoDbName();
            if (edDbName.isEditable()) {
                edDbName.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_chAutoDbNameActionPerformed

    private void chMinValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chMinValueActionPerformed
        if (!opening) {
            updateState();
            if (spnMinValue.isEnabled()) {
                spnMinValue.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_chMinValueActionPerformed

    private void chMaxValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chMaxValueActionPerformed
        if (!opening) {
            updateState();
            if (spnMaxValue.isEnabled()) {
                spnMaxValue.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_chMaxValueActionPerformed

    private void chStartWithActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chStartWithActionPerformed
        if (!opening) {
            updateState();
            if (spnStartWith.isEnabled()) {
                spnStartWith.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_chStartWithActionPerformed

    private void chIncrementByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chIncrementByActionPerformed
        if (!opening) {
            updateState();
            if (spnIncrementBy.isEnabled()) {
                spnIncrementBy.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_chIncrementByActionPerformed

    private void chCacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chCacheActionPerformed
        if (!opening) {
            updateState();
            if (spnCache.isEnabled()) {
                spnCache.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_chCacheActionPerformed

    private void chCycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chCycleActionPerformed
    }//GEN-LAST:event_chCycleActionPerformed

    private void chOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chOrderActionPerformed
    }//GEN-LAST:event_chOrderActionPerformed

    private void edNameStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_edNameStateChanged
        // TODO add your handling code here:
        updateAutoDbName();
    }//GEN-LAST:event_edNameStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chAutoDbName;
    private javax.swing.JCheckBox chCache;
    private javax.swing.JCheckBox chCycle;
    private javax.swing.JCheckBox chIncrementBy;
    private javax.swing.JCheckBox chMaxValue;
    private javax.swing.JCheckBox chMinValue;
    private javax.swing.JCheckBox chOrder;
    private javax.swing.JCheckBox chStartWith;
    private org.radixware.kernel.designer.dds.editors.DbNameEditPanel edDbName;
    private org.radixware.kernel.designer.common.dialogs.components.NameEditPanel edName;
    private javax.swing.JLabel lbName;
    private javax.swing.JSpinner spnCache;
    private javax.swing.JSpinner spnIncrementBy;
    private javax.swing.JSpinner spnMaxValue;
    private javax.swing.JSpinner spnMinValue;
    private javax.swing.JSpinner spnStartWith;
    private org.radixware.kernel.designer.common.dialogs.components.state.StateDisplayer stateDisplayer1;
    // End of variables declaration//GEN-END:variables

    private DdsSequenceDef getSequence() {
        return getRadixObject();
    }

    @Override
    protected void apply() {
        DdsSequenceDef sequence = getSequence();

        sequence.setName(edName.getCurrentName());

        sequence.setAutoDbName(chAutoDbName.isSelected());
        sequence.setDbName(edDbName.getDbName());

        if (chMinValue.isSelected()) {
            sequence.setMinValue((Long) spnMinValue.getValue());
        } else {
            sequence.setMinValue(null);
        }

        if (chMaxValue.isSelected()) {
            sequence.setMaxValue((Long) spnMaxValue.getValue());
        } else {
            sequence.setMaxValue(null);
        }

        if (chStartWith.isSelected()) {
            sequence.setStartWith((Long) spnStartWith.getValue());
        } else {
            sequence.setStartWith(null);
        }

        if (chIncrementBy.isSelected()) {
            sequence.setIncrementBy((Long) spnIncrementBy.getValue());
        } else {
            sequence.setIncrementBy(null);
        }

        if (chCache.isSelected()) {
            sequence.setCache((Long) spnCache.getValue());
        } else {
            sequence.setCache(null);
        }

        getSequence().setCycled(chCycle.isSelected());
        getSequence().setOrdered(chOrder.isSelected());

    }

    @Override
    public boolean open(OpenInfo openInfo) {
        opening = true;

        DdsSequenceDef sequence = getSequence();

        edName.setCurrentName(sequence.getName());

        boolean isAutoDbName = sequence.isAutoDbName();
        chAutoDbName.setSelected(isAutoDbName);
        edDbName.setDbName(sequence.getDbName());
        
        edDbName.setNameAcceptor(NameAcceptorFactory.newDbNameAcceptor(sequence.getLayer()));

        Long minValue = sequence.getMinValue();
        if (minValue != null) {
            chMinValue.setSelected(true);
            spnMinValue.setValue(minValue);
        } else {
            chMinValue.setSelected(false);
            spnMinValue.setValue(1L);
        }

        Long maxValue = sequence.getMaxValue();
        if (maxValue != null) {
            chMaxValue.setSelected(true);
            spnMaxValue.setValue(maxValue);
        } else {
            chMaxValue.setSelected(false);
            spnMaxValue.setValue(Long.MAX_VALUE);
        }

        Long startWith = sequence.getStartWith();
        if (startWith != null) {
            chStartWith.setSelected(true);
            spnStartWith.setValue(startWith);
        } else {
            chStartWith.setSelected(false);
            spnStartWith.setValue(1L);
        }

        Long incrementBy = sequence.getIncrementBy();
        if (incrementBy != null) {
            chIncrementBy.setSelected(true);
            spnIncrementBy.setValue(incrementBy);
        } else {
            chIncrementBy.setSelected(false);
            spnIncrementBy.setValue(1L);
        }

        Long cache = sequence.getCache();
        if (cache != null) {
            chCache.setSelected(true);
            spnCache.setValue(cache);
        } else {
            chCache.setSelected(false);
            spnCache.setValue(20L);
        }

        chCycle.setSelected(sequence.isCycled());
        chOrder.setSelected(sequence.isOrdered());

        updateState();
        setComplete(true);

        opening = false;
        return super.open(openInfo);
    }

    @Override
    public void update() {
        // nothing
    }

    public static final class Factory implements IEditorFactory<DdsSequenceDef> {

        @Override
        public DdsSequenceEditor newInstance(DdsSequenceDef sequence) {
            return new DdsSequenceEditor(sequence);
        }
    }

    public void updateState() {
        DdsSequenceDef sequence = getSequence();
        final boolean enabled = !sequence.isReadOnly();

        edName.setEditable(enabled);
        chAutoDbName.setEnabled(enabled);
        chMinValue.setEnabled(enabled);
        chMaxValue.setEnabled(enabled);
        chStartWith.setEnabled(enabled);
        chIncrementBy.setEnabled(enabled);
        chCache.setEnabled(enabled);
        chCycle.setEnabled(enabled);
        chOrder.setEnabled(enabled);

        edDbName.setEditable(enabled && !chAutoDbName.isSelected());
        spnMinValue.setEnabled(enabled && chMinValue.isSelected());
        spnMaxValue.setEnabled(enabled && chMaxValue.isSelected());
        spnStartWith.setEnabled(enabled && chStartWith.isSelected());
        spnIncrementBy.setEnabled(enabled && chIncrementBy.isSelected());
        spnCache.setEnabled(enabled && chCache.isSelected());
    }
}
