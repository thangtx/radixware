/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * PurityLevelEditor.java
 *
 * Created on Apr 6, 2009, 5:48:47 PM
 */

package org.radixware.kernel.designer.dds.editors;

import org.radixware.kernel.common.defs.dds.DdsPurityLevel;


public class PurityLevelEditor extends javax.swing.JPanel {

    private DdsPurityLevel purityLevel;
    private volatile boolean updating = false;

    /** Creates new form PurityLevelEditor */
    public PurityLevelEditor() {
        initComponents();
    }

    public void setPurityLevel(DdsPurityLevel level) {
        updating = true;
        purityLevel = level;
        wndsCheckBox.setSelected(level.isWNDS());
        rndsCheckBox.setSelected(level.isRNDS());
        wnpsCheckBox.setSelected(level.isWNPS());
        rnpsCheckBox.setSelected(level.isRNPS());
        trustCheckBox.setSelected(level.isTrust());
        updateAuto();
        updating = false;
    }

    private void updateAuto() {
        updating = true;
        autoCheckBox.setSelected(!purityLevel.isWNDS() && !purityLevel.isRNDS() &&
                !purityLevel.isWNPS() && !purityLevel.isRNPS() && !purityLevel.isTrust());
        updating = false;
    }

    public void setReadOnly(boolean readOnly) {
        autoCheckBox.setEnabled(!readOnly);
        wndsCheckBox.setEnabled(!readOnly);
        rndsCheckBox.setEnabled(!readOnly);
        wnpsCheckBox.setEnabled(!readOnly);
        rnpsCheckBox.setEnabled(!readOnly);
        trustCheckBox.setEnabled(!readOnly);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        autoCheckBox = new javax.swing.JCheckBox();
        wndsCheckBox = new javax.swing.JCheckBox();
        rndsCheckBox = new javax.swing.JCheckBox();
        wnpsCheckBox = new javax.swing.JCheckBox();
        rnpsCheckBox = new javax.swing.JCheckBox();
        trustCheckBox = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(PurityLevelEditor.class, "PurityLevelEditor.border.title"))); // NOI18N

        autoCheckBox.setText(org.openide.util.NbBundle.getMessage(PurityLevelEditor.class, "PurityLevelEditor.autoCheckBox.text")); // NOI18N
        autoCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                autoCheckBoxItemStateChanged(evt);
            }
        });

        wndsCheckBox.setText(org.openide.util.NbBundle.getMessage(PurityLevelEditor.class, "PurityLevelEditor.wndsCheckBox.text")); // NOI18N
        wndsCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                wndsCheckBoxItemStateChanged(evt);
            }
        });

        rndsCheckBox.setText(org.openide.util.NbBundle.getMessage(PurityLevelEditor.class, "PurityLevelEditor.rndsCheckBox.text")); // NOI18N
        rndsCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rndsCheckBoxItemStateChanged(evt);
            }
        });

        wnpsCheckBox.setText(org.openide.util.NbBundle.getMessage(PurityLevelEditor.class, "PurityLevelEditor.wnpsCheckBox.text")); // NOI18N
        wnpsCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                wnpsCheckBoxItemStateChanged(evt);
            }
        });

        rnpsCheckBox.setText(org.openide.util.NbBundle.getMessage(PurityLevelEditor.class, "PurityLevelEditor.rnpsCheckBox.text")); // NOI18N
        rnpsCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rnpsCheckBoxItemStateChanged(evt);
            }
        });

        trustCheckBox.setText(org.openide.util.NbBundle.getMessage(PurityLevelEditor.class, "PurityLevelEditor.trustCheckBox.text")); // NOI18N
        trustCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                trustCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(autoCheckBox)
                .addGap(18, 18, 18)
                .addComponent(wndsCheckBox)
                .addGap(18, 18, 18)
                .addComponent(rndsCheckBox)
                .addGap(18, 18, 18)
                .addComponent(wnpsCheckBox)
                .addGap(18, 18, 18)
                .addComponent(rnpsCheckBox)
                .addGap(18, 18, 18)
                .addComponent(trustCheckBox)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoCheckBox)
                    .addComponent(wndsCheckBox)
                    .addComponent(rndsCheckBox)
                    .addComponent(wnpsCheckBox)
                    .addComponent(rnpsCheckBox)
                    .addComponent(trustCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void autoCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_autoCheckBoxItemStateChanged
        if (!updating) {
            updating = true;
            if (autoCheckBox.isSelected()) {
                wndsCheckBox.setSelected(false);
                rndsCheckBox.setSelected(false);
                wnpsCheckBox.setSelected(false);
                rnpsCheckBox.setSelected(false);
                trustCheckBox.setSelected(false);
                
                purityLevel.setRNDS(false);
                purityLevel.setRNPS(false);
                purityLevel.setWNDS(false);
                purityLevel.setWNPS(false);
                purityLevel.setTrust(false);
            } else {
                autoCheckBox.setSelected(true);
            }
            updating = false;
        }
}//GEN-LAST:event_autoCheckBoxItemStateChanged

    private void wndsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_wndsCheckBoxItemStateChanged
        if (!updating) {
            purityLevel.setWNDS(wndsCheckBox.isSelected());
            updateAuto();
        }
}//GEN-LAST:event_wndsCheckBoxItemStateChanged

    private void rndsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rndsCheckBoxItemStateChanged
        if (!updating) {
            purityLevel.setRNDS(rndsCheckBox.isSelected());
            updateAuto();
        }
}//GEN-LAST:event_rndsCheckBoxItemStateChanged

    private void wnpsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_wnpsCheckBoxItemStateChanged
        if (!updating) {
            purityLevel.setWNPS(wnpsCheckBox.isSelected());
            updateAuto();
        }
}//GEN-LAST:event_wnpsCheckBoxItemStateChanged

    private void rnpsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rnpsCheckBoxItemStateChanged
        if (!updating) {
            purityLevel.setRNPS(rnpsCheckBox.isSelected());
            updateAuto();
        }
}//GEN-LAST:event_rnpsCheckBoxItemStateChanged

    private void trustCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_trustCheckBoxItemStateChanged
        if (!updating) {
            purityLevel.setTrust(trustCheckBox.isSelected());
            updateAuto();
        }
}//GEN-LAST:event_trustCheckBoxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoCheckBox;
    private javax.swing.JCheckBox rndsCheckBox;
    private javax.swing.JCheckBox rnpsCheckBox;
    private javax.swing.JCheckBox trustCheckBox;
    private javax.swing.JCheckBox wndsCheckBox;
    private javax.swing.JCheckBox wnpsCheckBox;
    // End of variables declaration//GEN-END:variables

}
