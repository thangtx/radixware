/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * MainPanel.java
 *
 * Created on October 8, 2008, 4:01 PM
 */
package org.radixware.kernel.designer.ads.editors.clazz.simple;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import org.radixware.kernel.designer.common.dialogs.components.DescriptionPanel;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionListener;
import javax.swing.Box;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import org.radixware.kernel.common.defs.ads.AdsDefinition;
import org.radixware.kernel.common.defs.ads.AdsTitledDefinition;
import org.radixware.kernel.common.defs.ads.clazz.AdsClassDef;
import org.radixware.kernel.common.defs.ads.clazz.entity.AdsEntityClassDef;
import org.radixware.kernel.common.defs.ads.clazz.entity.AdsEntityObjectClassDef;
import org.radixware.kernel.common.defs.localization.IMultilingualStringDef;
import org.radixware.kernel.common.enums.EClassType;
import org.radixware.kernel.common.enums.EIsoLanguage;
import org.radixware.kernel.common.types.Id;
import org.radixware.kernel.designer.ads.common.dialogs.AccessEditPanel;
import org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel;
import org.radixware.kernel.designer.common.dialogs.components.EnclosePanel;
import org.radixware.kernel.designer.common.dialogs.components.localizing.HandleInfo;
import org.radixware.kernel.designer.common.dialogs.components.localizing.LocalizingEditorPanel;


public class MainPanel extends javax.swing.JPanel {

    private HandleInfo handleInfo = null;
    private DefinitionLinkEditPanel overwrittenClassLinkEditPanel = null;
//    private AdsClassDef adsClassDef = null;
    private LocalizingEditorPanel localizingPaneList = null;
    private GeneralPanel generalPanel = null;
    private DescriptionPanel descriptionPanel = null;
    private SuperClassHierarchyPanel superClassHierarchyPanel = null;
//    private TypeArgumentsEditor typeArgumentsEditor = null;
//    private JTextField publishedNameTextField = null;
    private LinkedEntityPanel linkedEntityPanel = null;
    private RestrictionsPanel restrictionsPanel = null;
    private boolean initialized = false;
    private boolean isTransparentClass = false;
    private boolean hasTypeArguments = false;
    private boolean isOverwrittenClass = false;
    private boolean isAdsEntityObjectClassDef = false;
    private boolean isAdsEntityClassDef = false;
    //by ygalkina
    private TypeArgumentsOwnerPropertiesPanel typeArgumentsOwnerPanel;
    private TransparentClassPropertiesPanel transparentPanel;
    private UploadModelPanel uploadModelPanel;

    private AccessEditPanel transparentAccessEditor = new AccessEditPanel();
    private javax.swing.JLabel accessLabel = new javax.swing.JLabel("Accessibility: ");
    /** Creates new form MainPanel */
    public MainPanel() {
        super();
        initComponents();
        this.setBorder(new EmptyBorder(12, 12, 12, 12));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    protected static JPanel createTunedEnclosedPanel(JComponent component, int leftInset, int rightInset) {
        final JPanel result = EnclosePanel.createEnclosedPanel(component, leftInset, rightInset);
        result.setAlignmentX(0.0f);
        return result;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private AdsClassDef definition;
    public void open(final AdsClassDef adsClassDef) {

        this.definition = adsClassDef;

        if (!initialized) {
            initialized = true;

//            this.adsClassDef = adsClassDef;

            isTransparentClass = adsClassDef.getTransparence() != null && adsClassDef.getTransparence().isTransparent();
            final EClassType classDefType = adsClassDef.getClassDefType();
            isAdsEntityObjectClassDef = classDefType == EClassType.APPLICATION || classDefType == EClassType.ENTITY;
            isAdsEntityClassDef = classDefType == EClassType.ENTITY;

            hasTypeArguments = classDefType == EClassType.DYNAMIC || classDefType == EClassType.EXCEPTION || classDefType == EClassType.INTERFACE /*|| classDefType == EClassType.PRESENTATION || classDefType == EClassType.PRESENTATION_EXCEPTION || classDefType == EClassType.PRESENTATION_INTERFACE*/;

            descriptionPanel = new DescriptionPanel();
            descriptionPanel.setAlignmentX(0.0f);
            descriptionPanel.open(adsClassDef);
            this.add(createTunedEnclosedPanel(descriptionPanel, 1, 1));

            if (isTransparentClass){
                javax.swing.JPanel accessContent = new javax.swing.JPanel();
                GridBagLayout accessGbl = new GridBagLayout();
                GridBagConstraints accessC = new GridBagConstraints();
                accessContent.setAlignmentX(0.0f);
                accessContent.setLayout(accessGbl);

                accessC.fill = GridBagConstraints.HORIZONTAL;
                accessC.anchor = GridBagConstraints.WEST;
                accessGbl.setConstraints(accessLabel, accessC);
                accessContent.add(accessLabel);

                accessC.gridx = 1;
                accessGbl.setConstraints(transparentAccessEditor, accessC);
                accessContent.add(transparentAccessEditor);

                javax.swing.JPanel temp = new javax.swing.JPanel();
                temp.setLayout(new BorderLayout());
                temp.setAlignmentX(0);
                temp.setAlignmentY(0);
                temp.add(accessContent, BorderLayout.NORTH);
                this.add(Box.createRigidArea(new Dimension(0, 12)));
                this.add(temp);
                this.add(Box.createRigidArea(new Dimension(0, 12)));
                this.add(temp);
            }

            final AdsClassDef overwittenClassDef = adsClassDef.getHierarchy().findOverwritten().get();
            isOverwrittenClass = overwittenClassDef != null;
            if (isOverwrittenClass) {
                JPanel ovrPanel = new JPanel();
                GridBagLayout gbl = new GridBagLayout();
                GridBagConstraints c = new GridBagConstraints();
                ovrPanel.setAlignmentX(0);
                ovrPanel.setLayout(gbl);

                overwrittenClassLinkEditPanel = new DefinitionLinkEditPanel();

                final javax.swing.JCheckBox label = new javax.swing.JCheckBox("Overwrite:");
                label.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        boolean selected = label.isSelected();
                        adsClassDef.setOverwrite(selected);
                    }
                });
                label.setSelected(adsClassDef.isOverwrite());
                label.setEnabled(!adsClassDef.isReadOnly());

                c.fill = GridBagConstraints.HORIZONTAL;
                c.insets = new Insets(0, 10, 0, 10);
                gbl.setConstraints(label, c);
                ovrPanel.add(label);

                c.gridx = 1;
                c.weightx = 1.0;
                c.insets = new Insets(0, 0, 0, 0);
                gbl.setConstraints(overwrittenClassLinkEditPanel, c);
                ovrPanel.add(overwrittenClassLinkEditPanel);
                overwrittenClassLinkEditPanel.open(overwittenClassDef, overwittenClassDef.getId());

                javax.swing.JPanel temp = new javax.swing.JPanel() {

                    @Override
                    public Dimension getMaximumSize() {
                        Dimension sSize = super.getMaximumSize();
                        return new Dimension(sSize.width, overwrittenClassLinkEditPanel.getPreferredSize().height + 5);
                    }
                };
                temp.setLayout(new BorderLayout());
                temp.setAlignmentX(0);
                temp.setAlignmentY(0);
                temp.add(ovrPanel, BorderLayout.NORTH);
                this.add(Box.createRigidArea(new Dimension(0, 12)));
                this.add(temp);
                this.add(Box.createRigidArea(new Dimension(0, 12)));
            }


            if (isTransparentClass) {
                transparentPanel = new TransparentClassPropertiesPanel();
                transparentPanel.setAlignmentX(0);
                transparentPanel.open(adsClassDef);
                this.add(transparentPanel);
            } else {

                generalPanel = new GeneralPanel();

                generalPanel.setAlignmentX(0.0f);
                this.add(generalPanel);
                generalPanel.open(adsClassDef);

                if (hasTypeArguments) {
                    this.typeArgumentsOwnerPanel = new TypeArgumentsOwnerPropertiesPanel();
                    typeArgumentsOwnerPanel.setAlignmentX(0);
                    typeArgumentsOwnerPanel.open(adsClassDef);
                    this.add(typeArgumentsOwnerPanel);
                }

                if (classDefType != EClassType.ENTITY && classDefType != classDefType.APPLICATION) {
                    localizingPaneList = new LocalizingEditorPanel() {

                        @Override
                        public Dimension getMaximumSize() {
                            return new Dimension(super.getMaximumSize().width, getPreferredSize().height);
                        }
                    };
                    localizingPaneList.setAlignmentX(0.0f);
                    handleInfo = new HandleInfo() {

                        @Override
                        public AdsDefinition getAdsDefinition() {
                            return adsClassDef;
                        }

                        @Override
                        public Id getTitleId() {
                            return ((AdsTitledDefinition) adsClassDef).getTitleId();
                        }

                        @Override
                        public void onAdsMultilingualStringDefChange(IMultilingualStringDef multilingualStringDef) {
                            if (multilingualStringDef != null) {
                                ((AdsTitledDefinition) getAdsDefinition()).setTitleId(multilingualStringDef.getId());
                            } else {
                                ((AdsTitledDefinition) getAdsDefinition()).setTitleId(null);
                            }
                        }

                        @Override
                        public void onLanguagesPatternChange(EIsoLanguage language, String newStringValue) {
                            getAdsMultilingualStringDef().setValue(language, newStringValue);
                        }
                    };
                    localizingPaneList.open(handleInfo);

                    this.add(createTunedEnclosedPanel(localizingPaneList, 2, 2));
                }

                if (isAdsEntityObjectClassDef) {
                    linkedEntityPanel = new LinkedEntityPanel();
                    linkedEntityPanel.setAlignmentX(0.0f);
                    linkedEntityPanel.open((AdsEntityObjectClassDef) adsClassDef);
                    this.add(linkedEntityPanel);

                    if (isAdsEntityClassDef) {
                        restrictionsPanel = new RestrictionsPanel();
                        restrictionsPanel.setAlignmentX(0.0f);
                        this.add(restrictionsPanel);
                        restrictionsPanel.open(((AdsEntityClassDef) adsClassDef).getPresentations().getRestrictions());
                    }
                }

                superClassHierarchyPanel = new SuperClassHierarchyPanel();
                superClassHierarchyPanel.setAlignmentX(0.0f);
                superClassHierarchyPanel.open(adsClassDef);
                this.add(Box.createRigidArea(new Dimension(0, 12)));
                this.add(superClassHierarchyPanel);

                uploadModelPanel = new UploadModelPanel();
                uploadModelPanel.open(adsClassDef);
                uploadModelPanel.setAlignmentX(0.0f);
                this.add(Box.createRigidArea(new Dimension(0, 12)));
                this.add(uploadModelPanel);

            }

        }

        update();
    }

    public void update() {

        descriptionPanel.update();
        if (isOverwrittenClass) {
            overwrittenClassLinkEditPanel.update();
        }

        if (!isTransparentClass) {
            generalPanel.update();

            if (hasTypeArguments) {
                typeArgumentsOwnerPanel.update();
            }
            if (localizingPaneList != null) {
                localizingPaneList.update(handleInfo);
            }

            if (isAdsEntityObjectClassDef) {
                linkedEntityPanel.update();
                if (isAdsEntityClassDef) {
                    restrictionsPanel.update();
                }
            }

            superClassHierarchyPanel.update();
            uploadModelPanel.update();
        } else {
            transparentAccessEditor.open(definition);
            transparentPanel.update();
        }
    }

    public void setReadonly(boolean readonly) {

        descriptionPanel.setReadonly(readonly);

        if (!isTransparentClass) {
            generalPanel.setReadonly(readonly);

            if (hasTypeArguments) {
                typeArgumentsOwnerPanel.setReadonly(readonly);
            }

            if (isAdsEntityObjectClassDef) {
                linkedEntityPanel.setReadonly(readonly);
                if (isAdsEntityClassDef) {
                    restrictionsPanel.setReadonly(readonly);
                }
            }
            if (localizingPaneList != null) {
                localizingPaneList.setReadonly(readonly);
            }
            superClassHierarchyPanel.setReadonly(readonly);
        } else {
            transparentPanel.setReadonly(readonly);
        }
    }
}
