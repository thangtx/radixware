/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.radixware.kernel.designer.ads.editors.creation;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import net.miginfocom.swing.MigLayout;
import org.openide.util.ChangeSupport;
import org.radixware.kernel.designer.common.dialogs.components.state.StateManager;
import org.radixware.kernel.designer.common.dialogs.utils.IAcceptResult;
import org.radixware.kernel.designer.common.dialogs.utils.IAdvancedAcceptor;

public class AdsModuleDefinitionFromFileWizardStep1Panel extends javax.swing.JPanel implements ChangeListener  {
    private final StateManager tableManager = new StateManager(this);
    private final ChangeSupport changeSupport = new ChangeSupport(this);
    private IAdvancedAcceptor<File> fileAcceptor;
    private boolean isFileUpdated = false;
    
    
    public AdsModuleDefinitionFromFileWizardStep1Panel() {
        initComponents();
        removeAll();
        setLayout(new MigLayout("fillx", "[shrink][grow]"));
        add(fileLabel, "");
        add(jPanel1, "growx,wrap");
        add(jLabel1, "");
        add(nameEditor, "growx");
        filePathTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                isFileUpdated = true;
                stateChanged(null);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                isFileUpdated = true;
                stateChanged(null);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                isFileUpdated = true;
                stateChanged(null);
            }
        });
        nameEditor.setEnabled(false);
        nameEditor.addChangeListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        filePathTextField = new javax.swing.JTextField();
        fileChooserBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        nameEditor = new org.radixware.kernel.designer.common.dialogs.components.NameEditPanel();

        org.openide.awt.Mnemonics.setLocalizedText(fileLabel, org.openide.util.NbBundle.getMessage(AdsModuleDefinitionFromFileWizardStep1Panel.class, "AdsModuleDefinitionFromFileWizardStep1Panel.fileLabel.text")); // NOI18N

        jPanel1.setLayout(new java.awt.BorderLayout());

        filePathTextField.setText(org.openide.util.NbBundle.getMessage(AdsModuleDefinitionFromFileWizardStep1Panel.class, "AdsModuleDefinitionFromFileWizardStep1Panel.filePathTextField.text")); // NOI18N
        jPanel1.add(filePathTextField, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(fileChooserBtn, org.openide.util.NbBundle.getMessage(AdsModuleDefinitionFromFileWizardStep1Panel.class, "AdsModuleDefinitionFromFileWizardStep1Panel.fileChooserBtn.text")); // NOI18N
        fileChooserBtn.setMaximumSize(new java.awt.Dimension(23, 23));
        fileChooserBtn.setMinimumSize(new java.awt.Dimension(23, 23));
        fileChooserBtn.setPreferredSize(new java.awt.Dimension(23, 23));
        fileChooserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserBtnActionPerformed(evt);
            }
        });
        jPanel1.add(fileChooserBtn, java.awt.BorderLayout.LINE_END);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AdsModuleDefinitionFromFileWizardStep1Panel.class, "AdsModuleDefinitionFromFileWizardStep1Panel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(fileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                    .addComponent(nameEditor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fileLabel)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(240, Short.MAX_VALUE))
        );

        jPanel1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(AdsModuleDefinitionFromFileWizardStep1Panel.class, "AdsModuleDefinitionFromFileWizardStep1Panel.jPanel1.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void fileChooserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserBtnActionPerformed
        final JFileChooser fileChooser = new JFileChooser(filePathTextField.getText());

        final FileFilter filter = new FileFilter() {

            @Override
            public boolean accept(final File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().endsWith(".xml");
                }
            }

            @Override
            public String getDescription() {
                return "User-Defined Report Exchange File (*.xml)";
            }
        };
        fileChooser.addChoosableFileFilter(filter);
        fileChooser.setFileFilter(filter);
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            filePathTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_fileChooserBtnActionPerformed

     public final boolean isComplete() {
        boolean res;
        File file = getFile();
        if (filePathTextField.getText() != null) {
            if (file.exists()) {
                tableManager.ok();
                res = true;
            } else {
               tableManager.error("File does not exist");
               res = false;
            }
        } else {
            tableManager.error("File should be specified");
            res = false;
        }
        
         if (res && fileAcceptor != null) {
            final IAcceptResult acceptResult = fileAcceptor.getResult(file);
            if (!acceptResult.isAccepted()) {
                 tableManager.error(acceptResult.getErrorMessage());
                 res = false;
             }
             isFileUpdated = false;
         }
        nameEditor.setEnabled(res);
        return res && nameEditor.isComplete();
    }

    public void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    public void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        changeSupport.fireChange();
    }
    
    public void setFileLable(String text) {
        fileLabel.setText(text + ":");
    }
     
    public File getFile() {
        String path = filePathTextField.getText();
        if (path != null) {
            return new File(path);
        }
        return null;
    }
    
    public String getCurrentName() {
        return nameEditor.getCurrentName();
    }

    public void setNameAcceptor(IAdvancedAcceptor<String> nameAcceptor) {
        nameEditor.setNameAcceptor(nameAcceptor);
    }
    
    public void setFileAcceptor(IAdvancedAcceptor<File> fileAcceptor) {
        this.fileAcceptor = fileAcceptor;
    }

    public void setCurrentName(String name) {
        if (isFileUpdated) {
            nameEditor.removeChangeListener(this);
            nameEditor.setCurrentName(name);
            nameEditor.addChangeListener(this);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fileChooserBtn;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField filePathTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private org.radixware.kernel.designer.common.dialogs.components.NameEditPanel nameEditor;
    // End of variables declaration//GEN-END:variables
}
