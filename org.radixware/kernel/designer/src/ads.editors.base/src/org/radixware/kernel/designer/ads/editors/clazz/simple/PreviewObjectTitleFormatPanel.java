/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * PreviewObjectTitleFormatPanel.java
 *
 * Created on Mar 19, 2009, 11:54:35 AM
 */
package org.radixware.kernel.designer.ads.editors.clazz.simple;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Iterator;
import java.util.List;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableCellEditor;
import org.radixware.kernel.common.defs.RadixObjects;
import org.radixware.kernel.common.defs.ads.clazz.members.AdsPropertyDef;
import org.radixware.kernel.common.defs.ads.clazz.presentation.AdsObjectTitleFormatDef;
import org.radixware.kernel.common.defs.ads.clazz.presentation.AdsObjectTitleFormatDef.TitleItem;
import org.radixware.kernel.common.enums.EIsoLanguage;
import org.radixware.kernel.designer.common.editors.ColumnEditors;


public class PreviewObjectTitleFormatPanel extends javax.swing.JPanel {

    private SpecifiedColumnEditor rowEditorModel;
    private AdsObjectTitleFormatDef objectTitleFormatDef;

    /** Creates new form PreviewObjectTitleFormatPanel */
    public PreviewObjectTitleFormatPanel(AdsObjectTitleFormatDef objectTitleFormatDef) {
        super();
        this.objectTitleFormatDef = objectTitleFormatDef;
        initComponents();
        update();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        previewObjectTitleTable = new PreviewObjectTitleFormatTableX();
        previewLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        languagesComboBox = new javax.swing.JComboBox();
        previewTextField = new javax.swing.JTextField();

        setMaximumSize(null);

        jScrollPane1.setMaximumSize(null);
        jScrollPane1.setMinimumSize(null);

        /*
        previewObjectTitleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        previewObjectTitleTable.setMaximumSize(null);
        previewObjectTitleTable.setMinimumSize(null);
        previewObjectTitleTable.setPreferredSize(null);
        */
        jScrollPane1.setViewportView(previewObjectTitleTable);

        previewLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        previewLabel.setText(org.openide.util.NbBundle.getMessage(PreviewObjectTitleFormatPanel.class, "PreviewObjectTitleFormatPanel.previewLabel.text")); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(PreviewObjectTitleFormatPanel.class, "PreviewObjectTitleFormatPanel.jLabel1.text")); // NOI18N

        languagesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        previewTextField.setEditable(false);
        previewTextField.setText(org.openide.util.NbBundle.getMessage(PreviewObjectTitleFormatPanel.class, "PreviewObjectTitleFormatPanel.previewTextField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(previewLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(previewTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(languagesComboBox, 0, 82, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(languagesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previewLabel)
                    .addComponent(previewTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public final void update() {
        setupCheckBox();
        setupTable();

        languagesComboBox.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {

                final EIsoLanguage language = (EIsoLanguage) e.getItem();
                final PreviewObjectTitleFormatTableModel previewObjectTitleFormatTableModel = (PreviewObjectTitleFormatTableModel) previewObjectTitleTable.getModel();
                previewObjectTitleFormatTableModel.setPreviewLanguageForMultilingualItems(language);
                rowEditorModel.setLanguage(language);
                previewObjectTitleFormatTableModel.fireTableDataChanged();
            }
        });
    }

    private void setupCheckBox() {
        languagesComboBox.removeAllItems();
        final List<EIsoLanguage> curLanguages = objectTitleFormatDef.getModule().getSegment().getLayer().getLanguages();
        for (EIsoLanguage language : curLanguages) {
            languagesComboBox.addItem(language);
        }
    }

    private void updatePreviewTextField() {

        final StringBuffer stringBuffer = new StringBuffer();

        for (int i = 0, rowsCount = previewObjectTitleTable.getRowCount(); i < rowsCount; ++i) {
            final Object object = previewObjectTitleTable.getValueAt(i, PreviewObjectTitleFormatTableModel.COLUMN_RESULT);
            if (object != null) {
                assert (object instanceof String);
                stringBuffer.append((String) object);
            }
        }

        previewTextField.setText(stringBuffer.toString());
    }

    private void setupTable() {

        final RadixObjects<AdsObjectTitleFormatDef.TitleItem> items = objectTitleFormatDef.getItems();
        final PreviewObjectTitleFormatTableModel previewObjectTitleFormatTableModel = new PreviewObjectTitleFormatTableModel(items);
        previewObjectTitleTable.setModel(previewObjectTitleFormatTableModel);


        //notify all subscribed listeners about changes occured in table's data
        previewObjectTitleFormatTableModel.addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                updatePreviewTextField();
            }
        });

        // create a RowEditorModel. it is used to hold the extra
        // information that is needed to deal with row specific editors
        rowEditorModel = new SpecifiedColumnEditor();
        // tell the JTableX which RowEditorModel we are using
        previewObjectTitleTable.setRowEditorModel(rowEditorModel);

        previewObjectTitleTable.setRowHeight(24);
        previewObjectTitleTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        previewObjectTitleTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        previewObjectTitleTable.setAutoCreateColumnsFromModel(false);
        previewObjectTitleTable.setColumnSelectionAllowed(false);
        previewObjectTitleTable.setRowSelectionAllowed(true);

        javax.swing.ToolTipManager.sharedInstance().unregisterComponent(previewObjectTitleTable);

        final int rowsCount = previewObjectTitleTable.getRowCount();
        if (rowsCount > 0) {
            int newRowPosition = rowsCount - 1;
            previewObjectTitleTable.setRowSelectionInterval(newRowPosition, newRowPosition);
        }

        for (AdsObjectTitleFormatDef.TitleItem xItem : items) {
            final AdsPropertyDef adsPropertyDef = xItem.findProperty();
            if (adsPropertyDef != null) {
                rowEditorModel.addEditorForItem(xItem, new PreviewObjectTitleFormatTableCellEditor(adsPropertyDef));
            }
        }

        updatePreviewTextField();
    }

    private static class SpecifiedColumnEditor extends ColumnEditors<TitleItem> {

        public void setLanguage(EIsoLanguage langauge) {
            Iterator<TableCellEditor> iter = this.data.values().iterator();
            while (iter.hasNext()) {
                ((PreviewObjectTitleFormatTableCellEditor) iter.next()).setLanguage(langauge);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox languagesComboBox;
    private javax.swing.JLabel previewLabel;
    /*
    private javax.swing.JTable previewObjectTitleTable;
    */
    private PreviewObjectTitleFormatTableX previewObjectTitleTable;
    private javax.swing.JTextField previewTextField;
    // End of variables declaration//GEN-END:variables
}
