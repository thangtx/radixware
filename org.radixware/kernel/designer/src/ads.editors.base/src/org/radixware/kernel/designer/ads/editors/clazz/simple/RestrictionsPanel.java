/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * RestrictionsPanel.java
 *
 * Created on Feb 25, 2009, 11:14:19 AM
 */

package org.radixware.kernel.designer.ads.editors.clazz.simple;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JCheckBox;
import org.radixware.kernel.common.defs.ads.common.Restrictions;
import org.radixware.kernel.common.enums.ERestriction;


public class RestrictionsPanel extends javax.swing.JPanel{

    private boolean isUpdating;
    private Restrictions restrictions;
    private Map<JCheckBox, ERestriction> checkbox2ERestriction;

    /** Creates new form RestrictionsPanel */
    public RestrictionsPanel() {
        initComponents();

        checkbox2ERestriction = new HashMap<JCheckBox, ERestriction>(6);
        checkbox2ERestriction.put(copyCheckBox, ERestriction.COPY);
        checkbox2ERestriction.put(multipleCopyCheckBox, ERestriction.MULTIPLE_COPY);
        checkbox2ERestriction.put(moveCheckBox, ERestriction.MOVE);
        checkbox2ERestriction.put(createCheckBox, ERestriction.CREATE);
        checkbox2ERestriction.put(deleteCheckBox, ERestriction.DELETE);
        checkbox2ERestriction.put(updateCheckBox, ERestriction.UPDATE);

        ActionListener actionListener = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (isUpdating){
                    return;
                }
                final Object object = e.getSource();
                assert(object instanceof JCheckBox && checkbox2ERestriction.containsKey((JCheckBox) object));
                final JCheckBox curCheckBox = (JCheckBox) object;
                setupRestriction(checkbox2ERestriction.get(curCheckBox), curCheckBox.isSelected());
            }
        };

        copyCheckBox.addActionListener(actionListener);
        multipleCopyCheckBox.addActionListener(actionListener);
        moveCheckBox.addActionListener(actionListener);
        createCheckBox.addActionListener(actionListener);
        deleteCheckBox.addActionListener(actionListener);
        updateCheckBox.addActionListener(actionListener);
    }

    private void setupRestriction(ERestriction restriction, boolean deny){

        if (deny){
            restrictions.deny(restriction);
        }else{
            restrictions.allow(restriction);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        copyCheckBox = new javax.swing.JCheckBox();
        createCheckBox = new javax.swing.JCheckBox();
        deleteCheckBox = new javax.swing.JCheckBox();
        multipleCopyCheckBox = new javax.swing.JCheckBox();
        moveCheckBox = new javax.swing.JCheckBox();
        updateCheckBox = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RestrictionsPanel.class, "RestrictionsPanel.border.title"))); // NOI18N

        copyCheckBox.setText(org.openide.util.NbBundle.getMessage(RestrictionsPanel.class, "RestrictionsPanel.copyCheckBox.text")); // NOI18N

        createCheckBox.setText(org.openide.util.NbBundle.getMessage(RestrictionsPanel.class, "RestrictionsPanel.createCheckBox.text")); // NOI18N

        deleteCheckBox.setText(org.openide.util.NbBundle.getMessage(RestrictionsPanel.class, "RestrictionsPanel.deleteCheckBox.text")); // NOI18N

        multipleCopyCheckBox.setText(org.openide.util.NbBundle.getMessage(RestrictionsPanel.class, "RestrictionsPanel.multipleCopyCheckBox.text")); // NOI18N

        moveCheckBox.setText(org.openide.util.NbBundle.getMessage(RestrictionsPanel.class, "RestrictionsPanel.moveCheckBox.text")); // NOI18N

        updateCheckBox.setText(org.openide.util.NbBundle.getMessage(RestrictionsPanel.class, "RestrictionsPanel.updateCheckBox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(multipleCopyCheckBox)
                    .addComponent(copyCheckBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createCheckBox)
                    .addComponent(moveCheckBox))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                    .addComponent(updateCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(copyCheckBox)
                        .addGap(8, 8, 8)
                        .addComponent(multipleCopyCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createCheckBox)
                            .addComponent(deleteCheckBox))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(moveCheckBox)
                            .addComponent(updateCheckBox))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void open(Restrictions restrictions) {

        this.restrictions = restrictions;
        update();
    }

    public void update() {

        isUpdating = true;
        copyCheckBox.setSelected(restrictions.isDenied(ERestriction.COPY));
        multipleCopyCheckBox.setSelected(restrictions.isDenied(ERestriction.MULTIPLE_COPY));
        moveCheckBox.setSelected(restrictions.isDenied(ERestriction.MOVE));
        createCheckBox.setSelected(restrictions.isDenied(ERestriction.CREATE));
        deleteCheckBox.setSelected(restrictions.isDenied(ERestriction.DELETE));
        updateCheckBox.setSelected(restrictions.isDenied(ERestriction.UPDATE));

        copyCheckBox.setEnabled(!readonly && restrictions.canAllow(ERestriction.COPY) && restrictions.canDeny(ERestriction.COPY));
        multipleCopyCheckBox.setEnabled(!readonly && restrictions.canAllow(ERestriction.MULTIPLE_COPY) && restrictions.canDeny(ERestriction.MULTIPLE_COPY));
        moveCheckBox.setEnabled(!readonly && restrictions.canAllow(ERestriction.MOVE) && restrictions.canDeny(ERestriction.MOVE));
        createCheckBox.setEnabled(!readonly && restrictions.canAllow(ERestriction.CREATE) && restrictions.canDeny(ERestriction.CREATE));
        deleteCheckBox.setEnabled(!readonly && restrictions.canAllow(ERestriction.DELETE) && restrictions.canDeny(ERestriction.DELETE));
        updateCheckBox.setEnabled(!readonly && restrictions.canAllow(ERestriction.UPDATE) && restrictions.canDeny(ERestriction.UPDATE));

        
        isUpdating = false;
    }

    private boolean readonly = false;
    public void setReadonly(boolean readonly){
         this.readonly = readonly;
         copyCheckBox.setEnabled(!readonly);
         multipleCopyCheckBox.setEnabled(!readonly);
         moveCheckBox.setEnabled(!readonly);
         createCheckBox.setEnabled(!readonly);
         deleteCheckBox.setEnabled(!readonly);
         updateCheckBox.setEnabled(!readonly);

//       if (readonly){
//           //try to disable those bits which can be disabled only
//           copyCheckBox.setEnabled(restrictions.canDeny(ERestriction.COPY));
//           multipleCopyCheckBox.setEnabled(restrictions.canDeny(ERestriction.MULTIPLE_COPY));
//           moveCheckBox.setEnabled(restrictions.canDeny(ERestriction.MOVE));
//           createCheckBox.setEnabled(restrictions.canDeny(ERestriction.CREATE));
//           deleteCheckBox.setEnabled(restrictions.canDeny(ERestriction.DELETE));
//           updateCheckBox.setEnabled(restrictions.canDeny(ERestriction.UPDATE));
//       }else{
//           //try to enable those bits which can be enabled only
//           copyCheckBox.setEnabled(restrictions.canAllow(ERestriction.COPY));
//           multipleCopyCheckBox.setEnabled(restrictions.canAllow(ERestriction.MULTIPLE_COPY));
//           moveCheckBox.setEnabled(restrictions.canAllow(ERestriction.MOVE));
//           createCheckBox.setEnabled(restrictions.canAllow(ERestriction.CREATE));
//           deleteCheckBox.setEnabled(restrictions.canAllow(ERestriction.DELETE));
//           updateCheckBox.setEnabled(restrictions.canAllow(ERestriction.UPDATE));
//       }
    }

    @Override
    public Dimension getMinimumSize() {
        return getPreferredSize();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox copyCheckBox;
    private javax.swing.JCheckBox createCheckBox;
    private javax.swing.JCheckBox deleteCheckBox;
    private javax.swing.JCheckBox moveCheckBox;
    private javax.swing.JCheckBox multipleCopyCheckBox;
    private javax.swing.JCheckBox updateCheckBox;
    // End of variables declaration//GEN-END:variables

}
