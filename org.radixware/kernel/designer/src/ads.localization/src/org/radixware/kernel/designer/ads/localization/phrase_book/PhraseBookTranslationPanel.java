/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * NewJPanel.java
 *
 * Created on Nov 5, 2009, 4:48:52 PM
 */
package org.radixware.kernel.designer.ads.localization.phrase_book;

import java.awt.Rectangle;
import java.awt.event.MouseWheelListener;
import java.util.List;
import javax.swing.JScrollPane;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.enums.EIsoLanguage;
import org.radixware.kernel.designer.ads.localization.MultilingualEditorUtils;
import org.radixware.kernel.designer.ads.localization.MultilingualEditorUtils.SelectionInfo;
import org.radixware.kernel.designer.ads.localization.RowString;
import org.radixware.kernel.designer.ads.localization.source.MlsTablePanel;
import org.radixware.kernel.designer.ads.localization.translation.ITranslationPanel;
import org.radixware.kernel.designer.ads.localization.translation.TranslateArea;


public class PhraseBookTranslationPanel extends javax.swing.JPanel implements ITranslationPanel {

    private final TranslateArea panel;
    private final AdsPhraseBookEditor parent;
    private boolean readOnly = false;

    public PhraseBookTranslationPanel(final AdsPhraseBookEditor parent, List<EIsoLanguage> source) {
        this.parent = parent;
        initComponents();
        this.setAlignmentX(0.0f);
        jPanel2.setPreferredSize(null);
        panel = new TranslateArea(this, jPanel2, true);
        panel.open(source,source);
    }

    public void update(final RadixObject context) {
        panel.update(context);
    }

    @Override
    public void updateScrollPanel() {
        parent.updateScrollPanel();
    }

    public void clearPanel(final String sourceText, final boolean setFocusOnTranslation) {
        panel.clearPanel(setFocusOnTranslation);
    }

    public void setMlString(final RowString rowString, final boolean setFocusOnTranslation) {
        if (rowString == null) {
            //setReadOnly(true);
            panel.setReadOnly(true);
        } else {
            //setReadOnly(readOnly);
            //panel.setReadOnly(readOnly); 
            panel.setRowString(rowString);
            panel.selectFirstPanel();
        }
        this.validate();
        this.repaint();
    }

    public void setReadOnly(final boolean readOnly) {
        this.readOnly = readOnly;
        //panel.setReadOnly(readOnly);
    }

    @Override
    public void setNextRowSting() {
        parent.setNextString();
    }

    @Override
    public void translationWasEdited(final EIsoLanguage lang) {
        parent.translationWasEdited();

    }

    @Override
    public void scroll(final Rectangle rect) {
        parent.scroll(rect);
    }

    @Override
    public void updatePhrasesPanel() {
    }

    @Override
    public void removePhraseFromPrompt(final RowString rowString) {
    }

    @Override
    public void addPhraseToPrompt(final RowString rowString) {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(PhraseBookTranslationPanel.class, "PhraseBookTranslationPanel.jLabel1.text_1_1")); // NOI18N

        jPanel2.setPreferredSize(new java.awt.Dimension(420, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setPrevRowSting() {
    }

    @Override
    public void setNextUncheckedRowSting() {
    }

    @Override
    public void setPrevUncheckedRowSting() {
    }

    @Override
    public boolean isReadOnly() {
        return readOnly;
    }

    @Override
    public void checkWarnings(final RowString rowString) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void updateTargetLangsStatus(final RowString rowString) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void save() {
        parent.save();
    }

    @Override
    public JScrollPane getTranslationPanelScrollPane() {
        return null;
    }

    @Override
    public void fireChange(String key) {
    }
}
