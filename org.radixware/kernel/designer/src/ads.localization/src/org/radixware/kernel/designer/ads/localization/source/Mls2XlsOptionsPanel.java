
package org.radixware.kernel.designer.ads.localization.source;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import org.radixware.kernel.common.defs.Module;
import org.radixware.kernel.common.defs.localization.ILocalizingBundleDef;
import org.radixware.kernel.common.enums.EMultilingualStringKind;
import org.radixware.kernel.common.repository.Branch;
import org.radixware.kernel.common.repository.Layer;
import org.radixware.kernel.designer.ads.localization.MultilingualEditorUtils;
import org.radixware.kernel.designer.common.dialogs.utils.DialogUtils;


public class Mls2XlsOptionsPanel extends javax.swing.JPanel {

    private File outFile;
    private final Branch branch;
    public Mls2XlsOptionsPanel(Branch b, Map<Layer, List<Module>> layers) {
        
        initComponents();
        
        timePanel.open(null, null);
        
        authorComboBox.addItem(FilterUtils.NOT_DEFINED);
        for (String name : ILocalizingBundleDef.authors.getAuthors()){
            authorComboBox.addItem(name);
        }
        String author = MultilingualEditorUtils.getPreferensesValue(MultilingualEditorUtils.EXPORT_AUTHOR, FilterUtils.NOT_DEFINED);
        if (author != null){
            authorComboBox.setSelectedItem(author);
        } else {
            authorComboBox.setSelectedIndex(0);
        }
        
        String locations = System.getProperty("user.home") + File.separator + "strings.xls";
        txtOutput.setText(MultilingualEditorUtils.getPreferensesValue(MultilingualEditorUtils.OUTPUT_LOCATIONS, locations));

        branch = b;
        layerPanel1.open(layers == null ? null : new HashMap<>(layers));
        layerPanel1.changeGap(54);
        stringTypePanel1.open(getPreferensesTypes());
    }

    public File getOutputFile(){
        if (outFile == null) {
            setOutputFile(new File(txtOutput.getText()), false);
        }
        return outFile;
    }
    
    public Map<Layer, List<Module>> getSelectedLayers(){
        return MultilingualEditorUtils.getLayersAndModules(layerPanel1.getSelectedLayers());
    }
    
    public List<EMultilingualStringKind> getStrinsType(){
        return stringTypePanel1.getTypes();
    }

    public Branch getBranch() {
        return branch;
    }

    public Date getFromDate(){
        return timePanel.getTimeFrom();
    }
    
    public Date getToDate(){
        return timePanel.getTimeTo();
    }
    
    public String getLastModifiedAuthor(){
        Object value = authorComboBox.getSelectedItem();
        if (value instanceof String && value != FilterUtils.NOT_DEFINED){
            return (String) value;
        }
        return null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtOutput = new javax.swing.JTextField();
        btnChooseFile = new javax.swing.JButton();
        authorComboBox = new javax.swing.JComboBox();
        timePanel = new org.radixware.kernel.designer.ads.localization.dialog.TimeFilterPanel();
        jLabel2 = new javax.swing.JLabel();
        layerPanel1 = new org.radixware.kernel.designer.ads.localization.dialog.LayerPanel();
        stringTypePanel1 = new org.radixware.kernel.designer.ads.localization.dialog.StringTypePanel();

        setMaximumSize(new java.awt.Dimension(391, 153));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(Mls2XlsOptionsPanel.class, "Mls2XlsOptionsPanel.jLabel1.text")); // NOI18N

        txtOutput.setText(org.openide.util.NbBundle.getMessage(Mls2XlsOptionsPanel.class, "Mls2XlsOptionsPanel.txtOutput.text")); // NOI18N
        txtOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOutputActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnChooseFile, org.openide.util.NbBundle.getMessage(Mls2XlsOptionsPanel.class, "Mls2XlsOptionsPanel.btnChooseFile.text")); // NOI18N
        btnChooseFile.setMaximumSize(new java.awt.Dimension(47, 20));
        btnChooseFile.setMinimumSize(new java.awt.Dimension(47, 20));
        btnChooseFile.setPreferredSize(new java.awt.Dimension(47, 20));
        btnChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFileActionPerformed(evt);
            }
        });

        timePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(Mls2XlsOptionsPanel.class, "Mls2XlsOptionsPanel.timePanel.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(Mls2XlsOptionsPanel.class, "Mls2XlsOptionsPanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(stringTypePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(12, 12, 12)
                                .addComponent(authorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(12, 12, 12)
                                .addComponent(txtOutput)
                                .addGap(0, 0, 0)
                                .addComponent(btnChooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(layerPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(timePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(7, 7, 7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnChooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addComponent(layerPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(authorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(timePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(stringTypePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFileActionPerformed
        chooseFile();
    }//GEN-LAST:event_btnChooseFileActionPerformed

    private void txtOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOutputActionPerformed

    private void chooseFile() {
        JFileChooser chooser = new JFileChooser(txtOutput.getText());
        chooser.setSelectedFile(new File("strings.xls"));
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filter = new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().endsWith(".xls");
                }
            }

            @Override
            public String getDescription() {
                return "Excel File (xls)";
            }
        };

        chooser.addChoosableFileFilter(filter);
        chooser.setFileFilter(filter);
        chooser.setMultiSelectionEnabled(false);
        chooser.setDialogTitle("Choose location");

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            if (file != null) {
                setOutputFile(file, true);
                txtOutput.setText(outFile.getPath());
            }
        }
    }

    private void setOutputFile(File file, boolean showOverwrite) {
        if (!file.getName().endsWith(".xls")) {
            file = new File(file.getAbsolutePath() + ".xls");
        }
        if (file.exists() && showOverwrite) {
            if (!DialogUtils.messageConfirmation("File " + file.getPath() + " is already exists. Overwrite?")) {
                return;
            }
        }
        outFile = file;
    }
    
    private String defaultTypes = null;
    private List<EMultilingualStringKind> getPreferensesTypes(){
        if (defaultTypes == null){
            defaultTypes = buildTypeString(EMultilingualStringKind.values());
        }
        String sTypes = MultilingualEditorUtils.getPreferensesValue(MultilingualEditorUtils.EXPORT_TYPES, null);
        if (sTypes != null) {
            List<EMultilingualStringKind> types = new ArrayList<>();
            String[] arrTypes = sTypes.split(",");
            for (String arrType : arrTypes) {
                types.add(EMultilingualStringKind.getForName(arrType));
            }
            return types;
        } else {
            return Arrays.asList(EMultilingualStringKind.values());
        }
    }
    
    private String buildTypeString(EMultilingualStringKind[] values) {
        String result = "";
        if (values == null || values.length == 0){
            return result;
        }
        StringBuilder sb = new StringBuilder();
        String prefix = "";
        for (EMultilingualStringKind type : values) {
            sb.append(prefix);
            prefix = ",";
            sb.append(type);
        }
        
        return sb.toString();
    }
    
    public void save(){
        Preferences designerPreferences = Preferences.userRoot().node(MultilingualEditorUtils.PREFERENCES_KEY);
        Preferences editor = designerPreferences.node(MultilingualEditorUtils.EDITOR_KEY);
        
        editor.put(MultilingualEditorUtils.OUTPUT_LOCATIONS, txtOutput.getText());
        String author = getLastModifiedAuthor();
        if (author == null){
            editor.remove(MultilingualEditorUtils.EXPORT_AUTHOR);
        } else {
            editor.put(MultilingualEditorUtils.EXPORT_AUTHOR, author);
        }
        List<EMultilingualStringKind> types = stringTypePanel1.getTypes();
        editor.put(MultilingualEditorUtils.EXPORT_TYPES, buildTypeString(types.toArray(new EMultilingualStringKind[types.size()])));
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox authorComboBox;
    private javax.swing.JButton btnChooseFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private org.radixware.kernel.designer.ads.localization.dialog.LayerPanel layerPanel1;
    private org.radixware.kernel.designer.ads.localization.dialog.StringTypePanel stringTypePanel1;
    private org.radixware.kernel.designer.ads.localization.dialog.TimeFilterPanel timePanel;
    private javax.swing.JTextField txtOutput;
    // End of variables declaration//GEN-END:variables

}
