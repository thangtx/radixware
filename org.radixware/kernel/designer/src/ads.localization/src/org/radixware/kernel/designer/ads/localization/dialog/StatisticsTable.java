/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * StatisticsTable.java
 *
 * Created on Oct 7, 2009, 2:57:58 PM
 */
package org.radixware.kernel.designer.ads.localization.dialog;

import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.resources.RadixWareIcons;
import org.radixware.kernel.designer.ads.localization.dialog.StatisticsPanel.StatisticsInfo;



public class StatisticsTable extends javax.swing.JPanel {

    private List<StatisticsInfo> statistInfoList;

    /**
     * Creates new form StatisticsTable
     */
    public StatisticsTable() {
        initComponents();
        final Icon icon = RadixWareIcons.CHECK.FILTER_BY_OBJECT.getIcon();
        useFilter.setIcon(icon);
    }
    
    public void open(final List<StatisticsInfo> statistInfoList){
        this.statistInfoList = statistInfoList;// ( Checked / All )
        createTableUi();
    }

    private void createTableUi() {
        final TableModel tableModel = new TableModel();
        table.setModel(tableModel);

        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.getTableHeader().setReorderingAllowed(false);
    }
    
    public void addItemListener(ItemListener listener){
        useFilter.addItemListener(listener);
    }
    
    public void removeItemListener(ItemListener listener){
        useFilter.removeItemListener(listener);
    }
    
    public boolean isUseFilterEnabled(){
        return useFilter.isEnabled();
    }
    
    public void setUseFilterEnabled(boolean b) {
        useFilter.setEnabled(b);
    }
    
    public void setUseFilterSelected(boolean selected){
        useFilter.setSelected(selected);
    }
    
    public void setUseFilterToolTip(String tooltip){
        useFilter.setToolTipText(tooltip);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        useFilter = new javax.swing.JToggleButton();

        setLayout(new java.awt.BorderLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(StatisticsTable.class, "StatisticsTable.jLabel1.text")); // NOI18N

        useFilter.setFocusable(false);
        useFilter.setLabel(org.openide.util.NbBundle.getMessage(StatisticsTable.class, "StatisticsTable.label")); // NOI18N
        useFilter.setName(""); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 235, Short.MAX_VALUE)
                .addComponent(useFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(useFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JToggleButton useFilter;
    // End of variables declaration//GEN-END:variables

    private class TableModel extends AbstractTableModel {

        private List<StatisticsInfo> rows;
        private final String col0 = NbBundle.getMessage(StatisticsTable.class, "LANG");
        private final String col1 = NbBundle.getMessage(StatisticsTable.class, "PERSENT");
        private final String col2 = NbBundle.getMessage(StatisticsTable.class, "COUNT");
        private final String col3 = NbBundle.getMessage(StatisticsTable.class, "WORDS");
        private final String col4 = NbBundle.getMessage(StatisticsTable.class, "CHARS");
        private final String col5 = NbBundle.getMessage(StatisticsTable.class, "CHARS_WHITH_SPACE");
        private String columns[] = {col0, col1, col2, col3, col4, col5};

        public TableModel() {
            rows = new ArrayList<StatisticsInfo>();
            int size = statistInfoList.size();
            if (size > 1) {
                size = size - 1;
            }
            for (int i = 0; i < size; i++) {
                rows.add(statistInfoList.get(i));
            }
        }

        @Override
        public int getRowCount() {
            return rows.size();
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public Object getValueAt(final int rowIndex, final int columnIndex) {
            Object result;
            if (columnIndex == 0) {
                result= rows.get(rowIndex).getLabel();
            } else if (columnIndex == 1) {
                result= rows.get(rowIndex).getPersent();
            } else if (columnIndex == 2) {
                result= rows.get(rowIndex).getCheckedMlStringCount() + " / " + rows.get(rowIndex).getMlStringCount();
            } else if (columnIndex == 3) {
                result= rows.get(rowIndex).getCheckWordCount() + " / " + rows.get(rowIndex).getWordCount();
            } else if (columnIndex == 4) {
                result= rows.get(rowIndex).getCheckCharacterCount() + " / " + rows.get(rowIndex).getCharacterCount();
            } else if (columnIndex == 5) {
                result= rows.get(rowIndex).getCheckCharacterWithSpaceCount() + " / " + rows.get(rowIndex).getCharacterWithSpaceCount();
            } else {
                result= rows.get(rowIndex);
            }
            return result;
        }

        @Override
        public boolean isCellEditable(final int row, final int col) {
            return false;
        }

        @Override
        public String getColumnName(final int col) {
            return columns[col];
        }
    }
}
