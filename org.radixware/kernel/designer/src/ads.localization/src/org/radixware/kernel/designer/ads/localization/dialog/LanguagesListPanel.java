/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * LanguagesListPanel.java
 *
 * Created on Jul 15, 2010, 5:46:27 PM
 */
package org.radixware.kernel.designer.ads.localization.dialog;

import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.JList;
import javax.swing.border.EmptyBorder;
import org.radixware.kernel.common.enums.EIsoLanguage;


public class LanguagesListPanel extends javax.swing.JPanel {

    /**
     * Creates new form LanguagesListPanel
     */
    public LanguagesListPanel(final List<EIsoLanguage> langs,final String title) {
        initComponents();
        this.setBorder(new EmptyBorder(0, 0, 10, 0));
        fillList(langs);
        lbListTitle.setText(title);
        //setSelection();
    }

    public void setSelection() {
        final ListModel model = (ListModel) langsList.getModel();
        if (model != null && model.getSize() > 0) {
            langsList.setSelectedIndex(0);
        }
    }

    private void fillList(final List<EIsoLanguage> langs) {
        final ListModel model = new ListModel(langs);
        langsList.setModel(model);
    }

    public JList<EIsoLanguage> getJList() {
        return langsList;
    }

    public List<EIsoLanguage> getSelectedLangs() {
        final ListModel model = (ListModel) langsList.getModel();
        return model.getLangsList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        langsList = new javax.swing.JList<EIsoLanguage>();
        lbListTitle = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(258, 150));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(250, 110));

        langsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        langsList.setMaximumSize(new java.awt.Dimension(0, 0));
        jScrollPane1.setViewportView(langsList);

        lbListTitle.setText(org.openide.util.NbBundle.getMessage(LanguagesListPanel.class, "LanguagesListPanel.lbListTitle.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbListTitle)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lbListTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<EIsoLanguage> langsList;
    private javax.swing.JLabel lbListTitle;
    // End of variables declaration//GEN-END:variables

    public class ListModel extends AbstractListModel<EIsoLanguage> {

        private final List<EIsoLanguage> langList;

        public ListModel(final List<EIsoLanguage> langList) {
            super();
            this.langList = langList;
        }

        @Override
        public int getSize() {
            return langList.size();
        }

        @Override
        public EIsoLanguage getElementAt(final int index) {
            return langList.get(index);
        }

        public void addItem(final EIsoLanguage lang) {
            langList.add(lang);
            this.fireIntervalAdded(this, langList.size(), langList.size());
        }

        public void removeItem(final int index) {
            langList.remove(index);
            this.fireIntervalRemoved(this, index, index);
        }

        public List<EIsoLanguage> getLangsList() {
            return langList;
        }
    }
}
