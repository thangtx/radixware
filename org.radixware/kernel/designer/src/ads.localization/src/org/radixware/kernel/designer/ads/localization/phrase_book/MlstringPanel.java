/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * mlstringPanel.java
 *
 * Created on Aug 14, 2009, 4:43:44 PM
 */
package org.radixware.kernel.designer.ads.localization.phrase_book;

import java.util.List;
import javax.swing.border.EmptyBorder;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.localization.IMultilingualStringDef;
import org.radixware.kernel.common.enums.EIsoLanguage;
import org.radixware.kernel.designer.ads.localization.RowString;
import org.radixware.kernel.designer.ads.localization.source.AbstractTablePanel;

public class MlstringPanel extends AbstractTablePanel {

    private final AdsPhraseBookEditor parent;
    private List<EIsoLanguage> layerLangs;
    private TableButtons btnPanel;

    /**
     * Creates new form mlstringPanel
     */
    public MlstringPanel(final AdsPhraseBookEditor translationPanel) {
        super();
        //initComponents();
        this.parent = translationPanel;
        this.setAlignmentX(0.0f);
        createUi();
    }

    private void createUi() {
        btnPanel = new TableButtons(this);
        btnPanel.setBorder(new EmptyBorder(0, 5, 0, 0));
        getTablePanel().add(btnPanel);
    }

    public void update(final List<RowString> mlStrings, final List<EIsoLanguage> layerLangs) {
        this.mlStrings = mlStrings;
        this.layerLangs = layerLangs;
        update();
    }

    public void update() {
        tableUi.update(mlStrings, layerLangs, layerLangs);
        selectRow();
    }

    public void setCurrentRowString(final IMultilingualStringDef curMlString) {
        this.curMlString = new RowString(curMlString);
    }

    @Override
    protected void selectRow() {
        int rowIndex = 0;
        if (curMlString != null) {
            rowIndex = tableUi.getRowIndex(curMlString);
        }
        if (rowIndex < getTable().getRowCount() && (rowIndex >= 0)) {
            getTable().getSelectionModel().setSelectionInterval(rowIndex, rowIndex);
            btnPanel.setRemoveBtnEnable(true);
        } else if (getTable().getRowCount() > 0) {
            getTable().getSelectionModel().setSelectionInterval(0, 0);
            btnPanel.setRemoveBtnEnable(true);
        } else {
            parent.setRowString(null, false);
            btnPanel.setRemoveBtnEnable(false);
        }
    }

    @Override
    protected void changeStatus(final int row_index, final int col_index) {
        if (col_index != 0) {
            return;
        }
        final RowString row = tableUi.getRowString(row_index);
        final boolean status = row.isNeedsCheck(layerLangs);
        for (EIsoLanguage lang : layerLangs) {
            final String str = row.getValue(lang);
            if ((str != null) && (!str.equals(""))) {
                row.setNeedCheck(lang, !status);
                tableUi.fireTableDataChanged();
                getTable().getSelectionModel().setSelectionInterval(row_index, row_index);
            } else {
                final String msg = NbBundle.getMessage(MlstringPanel.class, "CANT_CHANGE_STATUS", lang.getName())
                        + NbBundle.getMessage(MlstringPanel.class, "TRANSLATION_NOT_SPECIFIED", lang.getName());
                showMsg(msg);
                return;
            }
        }
    }

    @Override
    public void setCurrentRowString() {
        final int row = getTable().getSelectedRow();
        if ((row > -1) && (row < getTable().getRowCount())) {
            parent.setRowString(tableUi.getRowString(row), setFocusOnTranslation);
            curMlString = tableUi.getRowString(row);
        } else {
            parent.setRowString(null, false);
        }
    }

    @Override
    public List<EIsoLanguage> getTranslatedLags() {
        return layerLangs;
    }

    public void updateStringRow() {
        final int row = getTable().getSelectedRow();
        if ((row < getTable().getRowCount()) && (row >= 0)) {
            final RowString rowString = tableUi.getRowString(row);
            rowString.setWasEdit(true);
            parent.getEditedStringList().addAll(rowString.getMlStrings());
            tableUi.fireTableRowsUpdated(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMinimumSize(new java.awt.Dimension(200, 100));
        setPreferredSize(new java.awt.Dimension(200, 400));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 189, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void btnAddClicked(final boolean isEventCode) {
        final RowString rowString = parent.addMlString(isEventCode);
        if (rowString != null) {
            tableUi.addRow(rowString);
        }
        final int row = getTable().getRowCount() - 1;
        tableUi.fireTableDataChanged();
        getTable().getSelectionModel().setSelectionInterval(row, row);
        btnPanel.setRemoveBtnEnable(true);
    }

    public void btnRemoveClicked() {
        final int row = getTable().getSelectedRow();
        if ((row < getTable().getRowCount()) && (row >= 0)) {
            final RowString rowString = tableUi.getRowString(row);
            parent.removeMlString(rowString);
            tableUi.deleteRow(rowString);
            tableUi.fireTableDataChanged();
            if (row < getTable().getRowCount()) {
                curMlString = tableUi.getRowString(row);
            }
        }
        if (getTable().getRowCount() <= 0) {
            btnPanel.setRemoveBtnEnable(false);
        } else {
            selectRow();
        }
    }

    public void setReadOnly(final boolean readonly) {
        btnPanel.setReadOnly(readonly);
        setCurrentRowString();//selectRow();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
