/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.radixeare.kernel.designer.ads.build.release.scripts;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import net.miginfocom.swing.MigLayout;
import org.radixware.kernel.common.builder.release.ReleaseSettings;
import org.radixware.kernel.common.builder.release.ScriptFileInfo;
import org.radixware.kernel.common.builder.release.ScriptInfo;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.repository.Layer;
import org.radixware.kernel.common.repository.dds.DdsScripts;
import org.radixware.kernel.common.repository.dds.DdsSegment;
import org.radixware.kernel.common.svn.RadixSvnException;

/**
 *
 * @author avoloshchuk
 */
public class ScriptsLayersPanel extends javax.swing.JPanel{

    private final Map<Layer, List<ScriptInfo>> scripts;
    private ReleaseSettings settings;
    /**
     * Creates new form ScriptBranchPanel
     */
    public ScriptsLayersPanel(Map<Layer, List<ScriptInfo>> scripts, ReleaseSettings settings) throws RadixSvnException, URISyntaxException {
        initComponents();
        setLayout(new MigLayout("fillx"));//, hidemode 2
        this.scripts = scripts;
        this.settings = settings;
        for (Layer l : scripts.keySet()){
            createLayerPanel(l, scripts.get(l));
        }
    }
    
    private void createLayerPanel(Layer layer, List<ScriptInfo> infos) throws RadixSvnException, URISyntaxException{
        JPanel layerPanel = new JPanel(new MigLayout("fillx"));
        
        ScriptsCheckPanel jPanel1 = new ScriptsCheckPanel(infos);
        layerNameLabel = new javax.swing.JLabel();
        layerTitleLabel = new javax.swing.JLabel();
        layerNameLabel.setText("<html><b>Layer:");
        layerTitleLabel.setText("<html><b>" + layer.getName() + " (" + layer.getURI() + ")");
        
        layerPanel.add(layerNameLabel);
        layerPanel.add(layerTitleLabel, "pushx, wrap");
        layerPanel.add(jPanel1, "span 2, growx");
        add(layerPanel, "growx, pushx");
    }

    private javax.swing.JLabel layerNameLabel;
    private javax.swing.JLabel layerTitleLabel;
    
    public boolean isModified(){
        for (Layer l : scripts.keySet()) {
            List<ScriptInfo> scriptsInfo = scripts.get(l);
            for (ScriptInfo scriptInfo : scriptsInfo) {
                if (scriptInfo.isContentModified()) {
                    return true;
                }
                if (scriptInfo.isScriptInfoModified()){
                    return true;
                }
            }
        }
        return false;
    }
    
    public List<ScriptFileInfo> apply() throws IOException {
        List<ScriptFileInfo> modifiedFiles = new ArrayList<>();
        for (Layer l : scripts.keySet()) {
            List<ScriptInfo> scriptsInfo = scripts.get(l);
            for (ScriptInfo scriptInfo : scriptsInfo) {
                if (scriptInfo.save()) {
                    modifiedFiles.add(scriptInfo);
                }
            }
            DdsScripts.UpdatesInfo ddsScripts = ((DdsSegment) l.getDds()).getScripts().getUpdatesInfo();

            if (ddsScripts.getEditState() == RadixObject.EEditState.MODIFIED) {
                try {
                    ddsScripts.save();
                    ScriptInfo info = scriptsInfo.get(0);
                    modifiedFiles.add(new ScriptFileInfo(ddsScripts.getFile(), settings, info.getRepository(), info.getRevision()));
                } catch (IOException ex) {
                    String message = "Unable to save \'" + ddsScripts.getQualifiedName() + "\'";
                    settings.getLogger().error(message);
                    Logger.getLogger(ScriptInfo.class.getName()).log(Level.WARNING, message, ex);
                }
            }
        }
        
        return modifiedFiles;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
