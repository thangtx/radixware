/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.dialogs.build;

import java.awt.BorderLayout;
import java.lang.reflect.InvocationTargetException;
import java.util.EnumSet;
import javax.swing.JPanel;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.radixware.kernel.common.builder.BuildActionExecutor.EBuildActionType;
import org.radixware.kernel.common.builder.check.common.CheckOptions;
import org.radixware.kernel.common.defs.ads.build.BuildOptions;
import org.radixware.kernel.common.enums.ERuntimeEnvironmentType;
import org.radixware.kernel.designer.common.dialogs.utils.ModalDisplayer;


public class ConfigureBuild extends javax.swing.JPanel {

    private DialogDescriptor desc = null;
    private boolean suicideMode = false;

    public interface IConfigureCheck {

        public CheckOptions createCheckOptions();

        public boolean isValidInteractive();
    }
    IConfigureCheck checkConf = null;

    /**
     * Creates new form ChooseEnvironment
     */
    private ConfigureBuild(boolean suicideMode, BuildOptions options) {
        initComponents();
        pCheckOptions.setVisible(false);
        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        if (cl == null) {
            cl = getClass().getClassLoader();
        }
        try {
            Class c = cl.loadClass("org.radixware.kernel.designer.tree.ads.check.ConfigureCheck");
            Object instance = c.getConstructor(new Class[0]).newInstance(new Object[0]);
            if (instance instanceof IConfigureCheck && instance instanceof JPanel) {

                pCheckOptions.add((JPanel) instance, BorderLayout.CENTER);
                pCheckOptions.setVisible(true);
                this.checkConf = (IConfigureCheck) instance;
            }
        } catch (ClassNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        } catch (NoSuchMethodException ex) {
            Exceptions.printStackTrace(ex);
        } catch (SecurityException ex) {
            Exceptions.printStackTrace(ex);
        } catch (InstantiationException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IllegalAccessException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IllegalArgumentException ex) {
            Exceptions.printStackTrace(ex);
        } catch (InvocationTargetException ex) {
            Exceptions.printStackTrace(ex);
        }

        this.suicideMode = suicideMode;
        chBuildCommon.setSelected(options.getEnvironment().contains(ERuntimeEnvironmentType.COMMON));
        chBuildServer.setSelected(options.getEnvironment().contains(ERuntimeEnvironmentType.SERVER));
        chBuildExplorer.setSelected(options.getEnvironment().contains(ERuntimeEnvironmentType.EXPLORER));
        chBuildWeb.setSelected(options.getEnvironment().contains(ERuntimeEnvironmentType.WEB));
        chBuildCommonClient.setSelected(options.getEnvironment().contains(ERuntimeEnvironmentType.COMMON_CLIENT));
        chVerify.setSelected(options.isVerifyClassLinkage());
        chMultythread.setSelected(options.isMultythread());
        chSkipCheck.setVisible(suicideMode);
        chBuildUds.setSelected(options.isBuildUds());
        chSkipCheck.setSelected(suicideMode && options.isSkipCheck());

    }

    private void setDescriptor(DialogDescriptor desc) {
        this.desc = desc;
        updateState();
    }

    private void updateState() {
        if (desc != null) {
            desc.setValid(chBuildCommon.isSelected() || chBuildExplorer.isSelected() || chBuildServer.isSelected() || chBuildCommonClient.isSelected() || chBuildWeb.isSelected());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblFake = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        chBuildCommon = new javax.swing.JCheckBox();
        chBuildServer = new javax.swing.JCheckBox();
        chBuildCommonClient = new javax.swing.JCheckBox();
        chBuildExplorer = new javax.swing.JCheckBox();
        chBuildWeb = new javax.swing.JCheckBox();
        pCheckOptions = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        chVerify = new javax.swing.JCheckBox();
        chMultythread = new javax.swing.JCheckBox();
        chSkipCheck = new javax.swing.JCheckBox();
        javax.swing.JLabel lblFill = new javax.swing.JLabel();
        chBuildUds = new javax.swing.JCheckBox();

        setMaximumSize(new java.awt.Dimension(400, 120));
        setMinimumSize(new java.awt.Dimension(250, 200));
        setRequestFocusEnabled(false);
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblFake, gridBagConstraints);

        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jSeparator2, java.awt.BorderLayout.PAGE_END);

        jLabel2.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.jLabel2.text")); // NOI18N
        jPanel1.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        chBuildCommon.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.chBuildCommon.text_1")); // NOI18N
        chBuildCommon.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chBuildCommonStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        jPanel3.add(chBuildCommon, gridBagConstraints);

        chBuildServer.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.chBuildServer.text_1")); // NOI18N
        chBuildServer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chBuildServerStateChanged(evt);
            }
        });
        chBuildServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chBuildServerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        jPanel3.add(chBuildServer, gridBagConstraints);

        chBuildCommonClient.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.chBuildCommonClient.text")); // NOI18N
        chBuildCommonClient.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chBuildCommonClientStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        jPanel3.add(chBuildCommonClient, gridBagConstraints);

        chBuildExplorer.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.chBuildExplorer.text_1")); // NOI18N
        chBuildExplorer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chBuildExplorerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        jPanel3.add(chBuildExplorer, gridBagConstraints);

        chBuildWeb.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.chBuildWeb.text")); // NOI18N
        chBuildWeb.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chBuildWebStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        jPanel3.add(chBuildWeb, gridBagConstraints);

        jPanel1.add(jPanel3, java.awt.BorderLayout.WEST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(jPanel1, gridBagConstraints);

        pCheckOptions.setLayout(new java.awt.BorderLayout());
        pCheckOptions.add(jSeparator3, java.awt.BorderLayout.PAGE_END);

        jLabel3.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.jLabel3.text")); // NOI18N
        pCheckOptions.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(pCheckOptions, gridBagConstraints);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jLabel4.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.jLabel4.text")); // NOI18N
        jPanel4.add(jLabel4, java.awt.BorderLayout.PAGE_START);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        chVerify.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.chVerify.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        jPanel5.add(chVerify, gridBagConstraints);

        chMultythread.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.chMultythread.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        jPanel5.add(chMultythread, gridBagConstraints);

        chSkipCheck.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.chSkipCheck.text")); // NOI18N
        chSkipCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chSkipCheckActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        jPanel5.add(chSkipCheck, gridBagConstraints);

        lblFill.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.lblFill.text_1")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(lblFill, gridBagConstraints);

        chBuildUds.setText(org.openide.util.NbBundle.getMessage(ConfigureBuild.class, "ConfigureBuild.chBuildUds.text")); // NOI18N
        chBuildUds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chBuildUdsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        jPanel5.add(chBuildUds, gridBagConstraints);

        jPanel4.add(jPanel5, java.awt.BorderLayout.WEST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(jPanel4, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void chBuildServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chBuildServerActionPerformed
        updateState();
}//GEN-LAST:event_chBuildServerActionPerformed

    private void chBuildCommonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chBuildCommonStateChanged
        updateState();
    }//GEN-LAST:event_chBuildCommonStateChanged

    private void chBuildServerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chBuildServerStateChanged
        updateState();
    }//GEN-LAST:event_chBuildServerStateChanged

    private void chBuildExplorerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chBuildExplorerStateChanged
        updateState();
    }//GEN-LAST:event_chBuildExplorerStateChanged

    private void chBuildCommonClientStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chBuildCommonClientStateChanged
        updateState();
    }//GEN-LAST:event_chBuildCommonClientStateChanged

    private void chBuildWebStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chBuildWebStateChanged
        updateState();
    }//GEN-LAST:event_chBuildWebStateChanged

    private void chSkipCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chSkipCheckActionPerformed
        updateState();
    }//GEN-LAST:event_chSkipCheckActionPerformed

    private void chBuildUdsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chBuildUdsActionPerformed
        updateState();
    }//GEN-LAST:event_chBuildUdsActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chBuildCommon;
    private javax.swing.JCheckBox chBuildCommonClient;
    private javax.swing.JCheckBox chBuildExplorer;
    private javax.swing.JCheckBox chBuildServer;
    private javax.swing.JCheckBox chBuildUds;
    private javax.swing.JCheckBox chBuildWeb;
    private javax.swing.JCheckBox chMultythread;
    private javax.swing.JCheckBox chSkipCheck;
    private javax.swing.JCheckBox chVerify;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblFake;
    private javax.swing.JPanel pCheckOptions;
    // End of variables declaration//GEN-END:variables

    public static final BuildOptions configureBuild(final boolean suicideMode, EBuildActionType actionType) {
        final EnumSet<ERuntimeEnvironmentType> result = EnumSet.noneOf(ERuntimeEnvironmentType.class);
        final BuildOptions options = BuildOptions.Factory.newInstance();
        //options.restoreConfig();
        EnumSet<ERuntimeEnvironmentType> e = options.getEnvironment();
        //e.remove(ESystemComponent.EXPLORER);
        options.setEnvironment(e);
        final ConfigureBuild panel = new ConfigureBuild(suicideMode, options);


        ModalDisplayer displayer = new ModalDisplayer(panel, actionType.getName()) {
            @Override
            protected void apply() {
                if (panel.chBuildCommon.isSelected()) {
                    result.add(ERuntimeEnvironmentType.COMMON);
                }
                if (panel.chBuildServer.isSelected()) {
                    result.add(ERuntimeEnvironmentType.SERVER);
                }
                if (panel.chBuildExplorer.isSelected()) {
                    result.add(ERuntimeEnvironmentType.EXPLORER);
                }
                if (panel.chBuildWeb.isSelected()) {
                    result.add(ERuntimeEnvironmentType.WEB);
                }
                if (panel.chBuildCommonClient.isSelected()) {
                    result.add(ERuntimeEnvironmentType.COMMON_CLIENT);
                }

                if (panel.checkConf != null) {
                    options.putProperty("CheckOptions", panel.checkConf.createCheckOptions());
                }

                options.setSkipCheck(panel.chSkipCheck.isSelected() && suicideMode);
                options.setVerifyClassLinkage(panel.chVerify.isSelected());
                options.setMultythread(panel.chMultythread.isSelected());
                options.setBuildUds(panel.chBuildUds.isSelected());
                options.setEnvironment(result);
                options.saveConfig();
            }

            @Override
            protected boolean canClose() {
                if (panel.checkConf != null) {
                    return panel.checkConf.isValidInteractive();
                } else {
                    return true;
                }
            }
        };
        panel.setDescriptor(displayer.getDialogDescriptor());

        displayer.getDialog().pack();

        if (!displayer.showModal()) {
            result.clear();
            return null;
        }
        options.setEnvironment(result);

        return options;
    }
}
