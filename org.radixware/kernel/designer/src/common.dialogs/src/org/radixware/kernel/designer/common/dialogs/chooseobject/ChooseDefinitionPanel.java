/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.dialogs.chooseobject;

import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.event.ChangeListener;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.Definition;

public class ChooseDefinitionPanel extends javax.swing.JPanel {

    public ChooseDefinitionPanel() {
        initComponents();
        listPanel.attachExternalComponents(nameField, caseSensitive);
    }

    private void updateLabels(ChooseDefinitionCfg cfg) {
        org.openide.awt.Mnemonics.setLocalizedText(jLabelText, NbBundle.getMessage(ChooseDefinitionPanel.class, "TXT_GoToElement_ElementName_Label", cfg.getTypeTitle()));
        jLabelList.setText(NbBundle.getMessage(ChooseDefinitionPanel.class, "TXT_GoToElement_MatchesList_Label", cfg.getTypesTitle()));
    }

    public void open(ChooseDefinitionCfg cfg) {
        updateLabels(cfg);
        listPanel.open(cfg);
    }

    public void open(ChooseDefinitionCfg cfg, boolean multipleSelectionAllowed) {
        updateLabels(cfg);
        listPanel.open(cfg, multipleSelectionAllowed);
    }

    public void open(ChooseDefinitionCfg cfg, boolean multipleSelectionAllowed, int currentStepNumber, Definition commonOwner) {
        updateLabels(cfg);
        listPanel.open(cfg, multipleSelectionAllowed, currentStepNumber, commonOwner);
    }

    public void update() {
        listPanel.update();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("deprecation")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabelText = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabelList = new javax.swing.JLabel();
        caseSensitive = new javax.swing.JCheckBox();
        listPanel = new org.radixware.kernel.designer.common.dialogs.chooseobject.DefinitionsPanel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));
        setFocusable(false);
        setNextFocusableComponent(nameField);
        setLayout(new java.awt.GridBagLayout());

        jLabelText.setLabelFor(nameField);
        org.openide.awt.Mnemonics.setLocalizedText(jLabelText, org.openide.util.NbBundle.getMessage(ChooseDefinitionPanel.class, "TXT_GoToElement_ElementName_Label")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        add(jLabelText, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        add(nameField, gridBagConstraints);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabelList.setText(org.openide.util.NbBundle.getMessage(ChooseDefinitionPanel.class, "TXT_GoToElement_MatchesList_Label")); // NOI18N
        jPanel1.add(jLabelList, java.awt.BorderLayout.WEST);

        org.openide.awt.Mnemonics.setLocalizedText(caseSensitive, org.openide.util.NbBundle.getMessage(ChooseDefinitionPanel.class, "TXT_GoToElement_CaseSensitive")); // NOI18N
        caseSensitive.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        caseSensitive.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel1.add(caseSensitive, java.awt.BorderLayout.EAST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        add(jPanel1, gridBagConstraints);

        listPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(listPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox caseSensitive;
    private javax.swing.JLabel jLabelList;
    private javax.swing.JLabel jLabelText;
    private javax.swing.JPanel jPanel1;
    private org.radixware.kernel.designer.common.dialogs.chooseobject.DefinitionsPanel listPanel;
    private javax.swing.JTextField nameField;
    // End of variables declaration//GEN-END:variables

    public boolean hasSelection() {
        return listPanel.hasSelection();
    }

    public List<Definition> getSelection() {
        return listPanel.getSelection();
    }

    public Definition getSelected() {
        return listPanel.getSelected();
    }

//    /**
//     * Set selected definition.
//     * Because model is updated on separate thread, the object will be selected with delay.
//     */
//    public void setSelected(Definition definition) {
//        listPanel.setSelected(definition);
//    }

    public void addChangeListener(ChangeListener l) {
        listPanel.addChangeListener(l);
    }

    public void removeChangeListener(ChangeListener l) {
        listPanel.removeChangeListener(l);
    }

    /**
     * Add listener to listen item doble-click.
     */
    public void addActionListener(ActionListener l) {
        listPanel.addActionListener(l);
    }

    public void removeActionListener(ActionListener l) {
        listPanel.removeActionListener(l);
    }
}
