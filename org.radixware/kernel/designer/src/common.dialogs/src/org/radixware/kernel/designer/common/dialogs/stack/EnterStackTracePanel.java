/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * EnterStackTracePanel.java
 *
 * Created on Feb 26, 2010, 12:49:48 PM
 */
package org.radixware.kernel.designer.common.dialogs.stack;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPopupMenu;
import javax.swing.JTextArea;
import org.openide.util.HelpCtx;
import org.openide.util.actions.SystemAction;


public class EnterStackTracePanel extends javax.swing.JPanel {

    public static class PasteAction extends SystemAction {

        public PasteAction() {
        }
        JTextArea display = null;

        @Override
        public void actionPerformed(ActionEvent e) {
            if (display != null) {
                final Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
                if (c.isDataFlavorAvailable(DataFlavor.stringFlavor)) {
                    try {
                        String text = (String) c.getData(DataFlavor.stringFlavor);
                        display.replaceSelection(text);
                    } catch (UnsupportedFlavorException | IOException ex) {
                        Logger.getLogger(getClass().getName()).log(Level.FINE, ex.getMessage(), ex);
                    }
                }
            }
        }

        @Override
        public boolean isEnabled() {
            if (super.isEnabled()) {
                final Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
                return c.isDataFlavorAvailable(DataFlavor.stringFlavor);
            } else {
                return false;
            }
        }

        @Override
        public String getName() {
            return "Paste";
        }

        @Override
        public HelpCtx getHelpCtx() {
            return HelpCtx.DEFAULT_HELP;
        }
    }
    private final transient PasteAction action;

    /**
     * Creates new form EnterStackTracePanel
     */
    public EnterStackTracePanel() {
        initComponents();
        action = SystemAction.get(PasteAction.class);
        action.display = edStack;
        edStack.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                processMouseEvent2(e);
            }

            @Override
            public void mousePressed(MouseEvent e) {
                processMouseEvent2(e);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                processMouseEvent(e);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    void processMouseEvent2(MouseEvent e) {
        if (e.isPopupTrigger()) {
            JPopupMenu menu = new JPopupMenu();
            menu.add(action);
            menu.show(edStack, e.getX(), e.getY());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        edStack = new javax.swing.JTextArea();

        edStack.setColumns(20);
        edStack.setRows(5);
        jScrollPane1.setViewportView(edStack);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea edStack;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public String getText() {
        return edStack.getText();
    }

    public boolean canClose() {
        return !edStack.getText().isEmpty();
    }

    @Override
    public void requestFocus() {
        edStack.requestFocus();
    }
}
