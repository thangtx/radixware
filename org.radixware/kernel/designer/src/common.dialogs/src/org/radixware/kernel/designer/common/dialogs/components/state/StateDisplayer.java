/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * StateDisplayer.java
 *
 * Created on Jan 11, 2009, 9:27:22 AM
 */
package org.radixware.kernel.designer.common.dialogs.components.state;

import java.awt.Color;
import java.awt.Dimension;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import org.radixware.kernel.designer.common.dialogs.components.state.StateManager.State;


public class StateDisplayer extends javax.swing.JPanel implements IStateDisplayer {

    /** Creates new form StateDisplayer */
    public StateDisplayer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        msgLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        msgLabel.setText("<No messages catched>");
        add(msgLabel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel msgLabel;
    // End of variables declaration//GEN-END:variables
    private StateContext context = new StateContext() {

        @Override
        public void updateMessage(State state, String newMessage) {
            switch (state) {
                case ERROR:
                    msgLabel.setText(newMessage);
                    msgLabel.setForeground(Color.RED);
                    break;
                case WARNING:
                    msgLabel.setText(newMessage);
                    msgLabel.setForeground(Color.YELLOW);
                    break;
                case OK:
                    msgLabel.setText(newMessage);
                    msgLabel.setForeground(Color.BLACK);
                    break;
            }
        }
    };

    public Dimension getPrefferedSize() {
        return msgLabel.getPreferredSize();
    }

    @Override
    public void addNotify() {
        super.addNotify();
        IStateDisplayer.Locator.register(this, this.getParent());
    }

    @Override
    public void removeNotify() {
        super.removeNotify();
        IStateDisplayer.Locator.unregister(this, this.getParent());
    }
    public ArrayList<WeakReference<StateManager>> refs = new ArrayList<WeakReference<StateManager>>();

    @Override
    public StateContext getStateContext() {
        return context;
    }
}
