/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.radixware.kernel.designer.ads.editors.clazz.report;

import java.awt.Color;
import javax.swing.JColorChooser;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportBand;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportCell;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportForm;
import org.radixware.kernel.designer.ads.reports.AdsReportDialogsUtils;

/**
 *
 * @author avoloshchuk
 */
public class AdsReportBackgroundPanel extends javax.swing.JPanel {

    private AdsReportCell appearance;

    /**
     * Creates new form AdsReportBackgroundEditor
     */
    public AdsReportBackgroundPanel() {
        initComponents();
    }

    public void open(AdsReportCell appearance) {
        this.appearance = appearance;
        chIgnoreZebra.setSelected(appearance.isIgnoreAltBgColor());
        inheritBgCheckBox.setSelected(appearance.isBgColorInherited());
        bgButton.setColor(appearance.getBgColor());
        updateEnableState();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inheritBgCheckBox = new javax.swing.JCheckBox();
        bgButton = new org.radixware.kernel.designer.ads.editors.clazz.report.ColorButton();
        chIgnoreZebra = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(inheritBgCheckBox, org.openide.util.NbBundle.getMessage(AdsReportBackgroundPanel.class, "AdsReportBackgroundPanel.inheritBgCheckBox.text")); // NOI18N
        inheritBgCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                inheritBgCheckBoxItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bgButton, org.openide.util.NbBundle.getMessage(AdsReportBackgroundPanel.class, "AdsReportBackgroundPanel.bgButton.text")); // NOI18N
        bgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chIgnoreZebra, org.openide.util.NbBundle.getMessage(AdsReportBackgroundPanel.class, "AdsReportBackgroundPanel.chIgnoreZebra.text")); // NOI18N
        chIgnoreZebra.setToolTipText(org.openide.util.NbBundle.getMessage(AdsReportBackgroundPanel.class, "AdsReportBackgroundPanel.chIgnoreZebra.toolTipText")); // NOI18N
        chIgnoreZebra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chIgnoreZebraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(inheritBgCheckBox)
                .addGap(0, 0, 0)
                .addComponent(bgButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(chIgnoreZebra))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(inheritBgCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(bgButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(chIgnoreZebra)))
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void inheritBgCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_inheritBgCheckBoxItemStateChanged
        Color c = getBackgroundColor();
        if (c != null){
            bgButton.setColor(c);
        }
        firePropertyChange(AdsReportDialogsUtils.INHERIT_BACKROUND, !inheritBgCheckBox.isSelected(), inheritBgCheckBox.isSelected());
        updateEnableState();
    }//GEN-LAST:event_inheritBgCheckBoxItemStateChanged

    private Color getBackgroundColor() {
        if (appearance == null) {
            return null;
        }
        if (inheritBgCheckBox.isSelected()) {
            final AdsReportBand ownerBand = appearance.getOwnerBand();
            if (ownerBand != null) {
                return ownerBand.getBgColor();
            }
        }
        return appearance.getCurrentBgColor();
    }

    private void bgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgButtonActionPerformed
        final Color clr = JColorChooser.showDialog(this, "Choose Background Color", bgButton.getColor());
        if (clr != null) {
            bgButton.setColor(clr);
            firePropertyChange(AdsReportDialogsUtils.BACKGROUND_COLOR, getBackgroundColor(), clr);
        }
    }//GEN-LAST:event_bgButtonActionPerformed

    private void chIgnoreZebraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chIgnoreZebraActionPerformed
        firePropertyChange(AdsReportDialogsUtils.IGNORE_ZEBRA, !chIgnoreZebra.isSelected(), chIgnoreZebra.isSelected());
        updateEnableState();
    }//GEN-LAST:event_chIgnoreZebraActionPerformed

    public void updateEnableState() {
        boolean isReadonly = appearance == null || appearance.isReadOnly() || appearance.getOwnerForm() == null || appearance.getOwnerForm().getMode() == AdsReportForm.Mode.TEXT;
        inheritBgCheckBox.setEnabled(!isReadonly);
        bgButton.setEnabled(!isReadonly && !inheritBgCheckBox.isSelected());
        chIgnoreZebra.setEnabled(!isReadonly);
        setEnabled(!isReadonly);
    }

    public void apply(AdsReportCell appearance) {
        appearance.setBgColorInherited(inheritBgCheckBox.isSelected());
        appearance.setBgColor(bgButton.getColor());
        appearance.setIgnoreAltBgColor(chIgnoreZebra.isSelected());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.radixware.kernel.designer.ads.editors.clazz.report.ColorButton bgButton;
    private javax.swing.JCheckBox chIgnoreZebra;
    private javax.swing.JCheckBox inheritBgCheckBox;
    // End of variables declaration//GEN-END:variables
}
