/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.report;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportFormat;
import org.radixware.kernel.designer.common.dialogs.components.CheckedNumberSpinnerEditor;


public class NumFormatPanel extends javax.swing.JPanel {

    private final AdsReportFormat cell;
    private final boolean readOnly;

    /**
     * Creates new form NumFormatPanel
     */
    public NumFormatPanel(final AdsReportFormat cell, final boolean isReadOnly) {
        initComponents();
        this.cell = cell;
        readOnly = isReadOnly;

        txtDecimDelim.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(final DocumentEvent de) {
                changedUpdate(de);
            }

            @Override
            public void removeUpdate(final DocumentEvent de) {
                changedUpdate(de);
            }

            @Override
            public void changedUpdate(final DocumentEvent de) {
                if (!updating && cell != null && chbDecimDelim.isSelected()) {
                    cell.setDesimalDelimeter(txtDecimDelim.getText());
                }
            }
        });
        precisionSpinner.setEditor(new CheckedNumberSpinnerEditor(precisionSpinner));
        setupInitialValues();
        updateEnableState();
    }
    private boolean updating = false;

    private void setupInitialValues() {
        updating = true;
        if (cell.getPrecission() != -1) {
            precisionSpinner.setValue(Long.valueOf(cell.getPrecission()));
            precisionCheckBox.setSelected(true);
        } else {
            precisionSpinner.setValue(Long.valueOf(0L));
            precisionCheckBox.setSelected(false);
        }

        /*if (cell.getTriadDelimeter() != null) {
         triadDelimeterTextField.setText(cell.getTriadDelimeter());
         }*/

        //getDelimTypeModel().setSelectedItemSource(cell.getTriadDelimeterType());
        final String decimalDelimiter = cell.getDesimalDelimeter();
        if (decimalDelimiter == null) {
            chbDecimDelim.setSelected(false);            
        } else {
            chbDecimDelim.setSelected(true);
            txtDecimDelim.setText(decimalDelimiter);
        }
        updating = false;
    }

    /* private KernelEnumComboBoxModel<ETriadDelimeterType> getDelimTypeModel() {
     return ((KernelEnumComboBoxModel<ETriadDelimeterType>) cmbDelimType.getModel());
     }*/
    private void updateEnableState() {
        precisionCheckBox.setEnabled(!readOnly);
        precisionSpinner.setEnabled(!readOnly && precisionCheckBox.isSelected());

        chbDecimDelim.setEnabled(!readOnly);
        /* cmbDelimType.setEnabled(!readOnly);

         final ETriadDelimeterType delimeterType = getDelimTypeModel().getSelectedItemSource();
         final boolean specified = !readOnly && delimeterType == ETriadDelimeterType.SPECIFIED;
         triadDelimeterTextField.setEnabled(specified);
         lblTriadDelim.setEnabled(specified);*/

        txtDecimDelim.setEnabled(!readOnly && chbDecimDelim.isSelected());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        precisionCheckBox = new javax.swing.JCheckBox();
        precisionSpinner = new javax.swing.JSpinner();
        chbDecimDelim = new javax.swing.JCheckBox();
        txtDecimDelim = new javax.swing.JFormattedTextField();

        setPreferredSize(new java.awt.Dimension(100, 136));

        precisionCheckBox.setText(org.openide.util.NbBundle.getMessage(NumFormatPanel.class, "NumFormatPanel.precisionCheckBox.text")); // NOI18N
        precisionCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                precisionCheckBoxItemStateChanged(evt);
            }
        });

        precisionSpinner.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(0L), Long.valueOf(0L), Long.valueOf(127L), Long.valueOf(1L)));
        precisionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                precisionSpinnerStateChanged(evt);
            }
        });

        chbDecimDelim.setText(org.openide.util.NbBundle.getMessage(NumFormatPanel.class, "NumFormatPanel.chbDecimDelim.text")); // NOI18N
        chbDecimDelim.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chbDecimDelimItemStateChanged(evt);
            }
        });

        try {
            txtDecimDelim.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("*")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(precisionSpinner)
                            .addComponent(txtDecimDelim)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(precisionCheckBox)
                            .addComponent(chbDecimDelim))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(precisionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(precisionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbDecimDelim)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDecimDelim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void precisionCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_precisionCheckBoxItemStateChanged
        precisionSpinnerStateChanged(null);
        /*if(cell!=null){
         if(!precisionCheckBox.isSelected())
         cell.setPrecission(-1);
         else{
         cell.setPrecission((Integer)precisionSpinner.getValue());
         }
         }*/
        updateEnableState();
    }//GEN-LAST:event_precisionCheckBoxItemStateChanged

    private void chbDecimDelimItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chbDecimDelimItemStateChanged
        if (!updating && !chbDecimDelim.isSelected()) {
            cell.setDesimalDelimeter(null);
        }
        updateEnableState();
    }//GEN-LAST:event_chbDecimDelimItemStateChanged

    private void precisionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_precisionSpinnerStateChanged
        if (cell != null && !updating) {
            if (precisionCheckBox.isSelected()) {
                cell.setPrecission(((Long) precisionSpinner.getValue()).intValue());                
            } else {
                cell.setPrecission(-1);
            }
        }
    }//GEN-LAST:event_precisionSpinnerStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chbDecimDelim;
    private javax.swing.JCheckBox precisionCheckBox;
    private javax.swing.JSpinner precisionSpinner;
    private javax.swing.JFormattedTextField txtDecimDelim;
    // End of variables declaration//GEN-END:variables
}
