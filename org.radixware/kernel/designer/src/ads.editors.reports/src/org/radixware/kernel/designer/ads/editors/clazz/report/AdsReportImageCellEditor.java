/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.report;

import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportImageCell;
import org.radixware.kernel.common.defs.ads.module.AdsImageDef;
import org.radixware.kernel.designer.common.editors.module.images.ChooseImagesDialog;


public class AdsReportImageCellEditor extends javax.swing.JPanel {

    private final AdsReportImageCell cell;
    private final JLabel imageLabel;

    /** Creates new form AdsReportImageCellEditor */
    public AdsReportImageCellEditor(final AdsReportImageCell cell) {
        initComponents();
        this.cell = cell;

        imageLabel = new JLabel();
        imagePanel.setLayout(new BorderLayout());
        imagePanel.add(imageLabel, BorderLayout.CENTER);
        imageLabel.setHorizontalAlignment(JLabel.CENTER);
        imageLabel.setVerticalAlignment(JLabel.CENTER);

        imagePanel.addComponentListener(new ComponentListener() {

            @Override
            public void componentResized(final ComponentEvent e) {
                updateImage();
            }

            @Override
            public void componentMoved(final ComponentEvent e) {
            }

            @Override
            public void componentShown(final ComponentEvent e) {
            }

            @Override
            public void componentHidden(final ComponentEvent e) {
            }
        });

        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                updateImage();
            }
        });
    }

    private void updateImage() {
        final AdsImageDef image = cell.findImage();
        if (image == null) {
            imageLabel.setIcon(null);
            imageLabel.setText("#"+cell.getImageId());            
        } else {
            Image img = image.getIcon().getOriginalImage();
            ImageIcon icon = new ImageIcon(img);

            int w = icon.getIconWidth();
            int h = icon.getIconHeight();
            final int W = imagePanel.getWidth();
            final int H = imagePanel.getHeight();
            final double dw = (double)W / (double)w;
            final double dh = (double)H / (double)h;
            final double min = Math.min(dw, dh);
            if (min > 2) {
                final int k = (int)(min / 2) + 1;
                w *= k;
                h *= k;
            }
            img = image.getIcon().getImage(w, h);
            icon = new ImageIcon(img);

            imageLabel.setIcon(icon);
            imageLabel.setText("");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imageButton = new javax.swing.JButton();
        imagePanel = new javax.swing.JPanel();

        imageButton.setText(org.openide.util.NbBundle.getMessage(AdsReportImageCellEditor.class, "AdsReportImageCellEditor.imageButton.text")); // NOI18N
        imageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageButtonActionPerformed(evt);
            }
        });

        imagePanel.setBackground(java.awt.SystemColor.text);
        imagePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 281, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 181, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imageButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(imageButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void imageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageButtonActionPerformed
        final ChooseImagesDialog dialog = ChooseImagesDialog.getInstanceFor(cell.getOwnerReport().getModule());
        if (dialog.chooseImage()) {
            cell.setImageId(dialog.getSelectedImageId());
            updateImage();
        }
    }//GEN-LAST:event_imageButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton imageButton;
    private javax.swing.JPanel imagePanel;
    // End of variables declaration//GEN-END:variables

}
