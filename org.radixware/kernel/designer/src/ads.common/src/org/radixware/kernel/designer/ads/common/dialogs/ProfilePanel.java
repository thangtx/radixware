/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * ProfilePanel.java
 *
 * Created on Jul 13, 2010, 10:43:53 AM
 */
package org.radixware.kernel.designer.ads.common.dialogs;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.radixware.kernel.common.defs.ExtendableDefinitions.EScope;
import org.radixware.kernel.common.defs.ads.AdsDefinition;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumDef;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumItemDef;
import org.radixware.kernel.common.defs.ads.profiling.AdsProfileSupport;
import org.radixware.kernel.common.defs.ads.profiling.AdsProfileSupport.IProfileable;
import org.radixware.kernel.common.enums.EValType;
import org.radixware.kernel.common.utils.Utils;


public class ProfilePanel extends javax.swing.JPanel {

    private static class Value {

        final AdsEnumItemDef item;

        public Value(AdsEnumItemDef item) {
            this.item = item;
        }

        @Override
        public String toString() {
            if (item == null) {
                return "<None>";
            } else {
                return (String) item.getValue().toObject(EValType.STR);
            }
        }

        public String getValue() {
            if (item == null) {
                return null;
            } else {
                return (String) item.getValue().toObject(EValType.STR);
            }
        }
    }

    private static Value[] getValues(AdsEnumDef e) {
        if (e == null) {
            return new Value[]{new Value(null)};
        }
        List<Value> strings = new ArrayList<Value>();
        strings.add(new Value(null));
        for (AdsEnumItemDef item : e.getItems().get(EScope.ALL)) {
            strings.add(new Value(item));
        }
        return strings.toArray(new Value[strings.size()]);
    }
    private final ItemListener changeListener = new ItemListener() {

        @Override
        public void itemStateChanged(ItemEvent e) {
            Value v = (Value) edTimingSection.getSelectedItem();
            result = v.getValue();
        }
    };

    private class TimingSectionModel extends DefaultComboBoxModel {

        TimingSectionModel(AdsEnumDef e) {
            super(getValues(e));
        }

        private void set(String val) {
            for (int i = 0; i < getSize(); i++) {
                Value v = (Value) getElementAt(i);
                if (Utils.equals(val, v.getValue())) {
                    setSelectedItem(v);
                    return;
                }
            }
        }
    }

    /** Creates new form ProfilePanel */
    public ProfilePanel() {
        initComponents();
    }
    private AdsProfileSupport support = null;
    private boolean isValid = false;
    private String result;

    public void open(IProfileable p) {
        isValid = false;
        support = null;
        AdsEnumDef e = null;
        AdsDefinition context = null;
        if (p != null && p.isProfileable()) {
            context = p.getAdsDefinition();
            support = p.getProfileSupport();
            if (support != null) {
                e = support.findTimingSections();
            }
        }

        edTimingSection.removeItemListener(changeListener);
        TimingSectionModel model = new TimingSectionModel(e);

        if (e != null) {
            edTimingSection.setEnabled(context != null && !context.isReadOnly());
            if (support != null) {
                result = support.getTimingSectionId();
                model.set(result);
            }
            edTimingSection.setModel(model);
            lbError.setVisible(false);
            isValid = true;
        } else {
            edTimingSection.setEnabled(false);
            lbError.setVisible(true);
        }
        edTimingSection.addItemListener(changeListener);
    }

    public boolean isOk() {
        return isValid;
    }

    public void apply() {
        if (isValid && support != null) {
            support.setTimingSectionId(result);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbError = new javax.swing.JLabel();
        edTimingSection = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();

        lbError.setForeground(new java.awt.Color(255, 51, 51));
        lbError.setText(org.openide.util.NbBundle.getMessage(ProfilePanel.class, "ProfilePanel.lbError.text")); // NOI18N

        edTimingSection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText(org.openide.util.NbBundle.getMessage(ProfilePanel.class, "ProfilePanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edTimingSection, 0, 478, Short.MAX_VALUE))
                    .addComponent(lbError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edTimingSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbError)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox edTimingSection;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lbError;
    // End of variables declaration//GEN-END:variables
}
