/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * NewJPanel.java
 *
 * Created on May 18, 2010, 12:18:37 PM
 */
package org.radixware.kernel.designer.ads.common.dialogs;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.EnumSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import javax.swing.ComboBoxModel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.SwingUtilities;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import org.radixware.kernel.common.defs.ads.AdsDefinition;
import org.radixware.kernel.common.defs.ads.clazz.AdsClassDef;
import org.radixware.kernel.common.defs.ads.clazz.members.AdsMethodDef;
import org.radixware.kernel.common.defs.ads.clazz.members.AdsPropertyDef;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumDef;
import org.radixware.kernel.common.defs.ads.type.AdsAccessFlags;
import org.radixware.kernel.common.defs.ads.xml.IXmlDefinition;
import org.radixware.kernel.common.enums.EAccess;
import org.radixware.kernel.common.utils.events.IRadixEventListener;
import org.radixware.kernel.common.utils.events.RadixEvent;


public class AccessEditPanel extends javax.swing.JPanel {

    private final ItemListener itemListener = new ItemListener() {
        public void itemStateChanged(ItemEvent e) {
            if (definition != null) {
                definition.setAccessMode((EAccess) model.getSelectedItem());
                updateChPublishedState();
                updateChFinalState(canChangeFinal(false));
            }
        }
    };
    private final ActionListener finalListener = new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            if (definition != null) {
                definition.setFinal(chFinal.isSelected());
                updateChFinalState(canChangeFinal(false));
                updateChPublishedState();
            }
        }
    };
    private final ActionListener publishedListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (definition != null) {
                definition.setPublished(chPublished.isSelected());
                updateChFinalState(canChangeFinal(false));
                updateChPublishedState();
            }
        }
    };

    /**
     * Creates new form NewJPanel
     */
    public AccessEditPanel() {
        initComponents();
        setOpaque(false);
        comboBox.setModel(model);
        comboBox.setEditable(false);
        comboBox.setRenderer(new Renderer(comboBox.getRenderer()));
        comboBox.setPrototypeDisplayValue(EAccess.PROTECTED);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBox = new javax.swing.JComboBox();
        chPublished = new javax.swing.JCheckBox();
        chFinal = new javax.swing.JCheckBox();
        chIsDeprecated = new javax.swing.JCheckBox();

        comboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        chPublished.setText(org.openide.util.NbBundle.getMessage(AccessEditPanel.class, "AccessEditPanel.chPublished.text")); // NOI18N

        chFinal.setText(org.openide.util.NbBundle.getMessage(AccessEditPanel.class, "AccessEditPanel.chFinal.text")); // NOI18N

        chIsDeprecated.setText(org.openide.util.NbBundle.getMessage(AccessEditPanel.class, "AccessEditPanel.chIsDeprecated.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chPublished)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chFinal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(chIsDeprecated)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(chPublished)
                    .addComponent(chFinal)
                    .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chIsDeprecated)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chFinal;
    private javax.swing.JCheckBox chIsDeprecated;
    private javax.swing.JCheckBox chPublished;
    private javax.swing.JComboBox comboBox;
    // End of variables declaration//GEN-END:variables

    private static class AccessComboBoxModel implements ComboBoxModel {

        private EAccess access = EAccess.PUBLIC;
        private Set<EAccess> deny = EnumSet.of(EAccess.DEFAULT);

        @Override
        public void setSelectedItem(Object anItem) {
            access = (EAccess) anItem;
            fireChange();
        }

        private void deny(EAccess access) {
            if (deny == null) {
                deny = EnumSet.of(access);
            } else {
                deny.add(access);
            }

            fireChange();
        }

        private List<EAccess> getElements() {
            List<EAccess> result = new LinkedList<EAccess>();
            EAccess[] accs = new EAccess[]{
                EAccess.PUBLIC,
                EAccess.PROTECTED,
                EAccess.DEFAULT,
                EAccess.PRIVATE
            };
            for (EAccess acc : accs) {
                if (deny != null && deny.contains(acc)) {
                    continue;
                }
                result.add(acc);
            }
            return result;
        }

        @Override
        public Object getSelectedItem() {
            return access;
        }

        @Override
        public int getSize() {
            return getElements().size();
        }

        @Override
        public Object getElementAt(int index) {
            return getElements().get(index);
        }
        private final List<ListDataListener> listeners = new LinkedList<ListDataListener>();

        @Override
        public void addListDataListener(ListDataListener l) {
            listeners.add(l);
        }

        @Override
        public void removeListDataListener(ListDataListener l) {
            listeners.remove(l);
        }

        private void fireChange() {
            ListDataEvent e = new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, 0, getSize());
            for (ListDataListener l : listeners) {
                l.contentsChanged(e);
            }
        }
    }

    private static class Renderer implements ListCellRenderer {

        ListCellRenderer def;

        private Renderer(ListCellRenderer def) {
            this.def = def;
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            return def.getListCellRendererComponent(list, ((EAccess) value).getName(), index, isSelected, cellHasFocus);
        }
    }
    private AdsDefinition definition;
    private final AccessComboBoxModel model = new AccessComboBoxModel();

    public void open(AdsDefinition definition) {
        open(definition, new EAccess[0]);
    }

    public void open(AdsDefinition definition, EAccess... deny) {
        synchronized (this) {
            this.definition = definition;
            if (definition != null) {
                comboBox.setEnabled(true);
                chFinal.setEnabled(true);
                chPublished.setEnabled(true);

                comboBox.removeItemListener(itemListener);
                chFinal.removeActionListener(finalListener);
                chPublished.removeActionListener(publishedListener);
                updateChFinalState(canChangeFinal(true));
                comboBox.setEnabled(!definition.isReadOnly() && definition.canChangeAccessMode());
                chFinal.setSelected(definition.isFinal());
                chPublished.setSelected(definition.isPublished());

                chIsDeprecated.setSelected(definition.isDeprecated());
                chIsDeprecated.setEnabled(!definition.isReadOnly());
                chIsDeprecated.setVisible(definition instanceof AdsDefinition.IDeprecatable);

                updateChPublishedState();
                model.deny.clear();
                //model.deny(EAccess.DEFAULT);
                if (deny != null && deny.length > 0) {
                    for (EAccess a : deny) {
                        model.deny(a);
                    }
                }
                EAccess min = definition.getMinimumAccess();
                for (EAccess acc : EAccess.values()) {
                    if (acc.isLess(min)) {
                        model.deny(acc);
                    }
                }
                if (definition instanceof AdsClassDef || definition instanceof AdsEnumDef || definition instanceof IXmlDefinition) {
                    model.deny(EAccess.PROTECTED);
                    model.deny(EAccess.PRIVATE);
                }
                setEnabled(definition != null && definition.canChangeAccessMode() && !definition.isReadOnly());
                if (definition != null) {
                    model.setSelectedItem(definition.getAccessMode());
                }
                comboBox.addItemListener(itemListener);
                chFinal.addActionListener(finalListener);
                chPublished.addActionListener(publishedListener);
                if (chIsDeprecated.isVisible() && chIsDeprecated.isEnabled()) {
                    chIsDeprecated.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            if (AccessEditPanel.this.definition instanceof AdsDefinition.IDeprecatable) {
                                ((AdsDefinition.IDeprecatable) AccessEditPanel.this.definition).setDeprecated(chIsDeprecated.isSelected());
                            }
                        }
                    });
                }
            } else {
                comboBox.setEnabled(false);
                chFinal.setEnabled(false);
                chPublished.setEnabled(false);
                chIsDeprecated.setVisible(false);
                model.deny.clear();
            }
        }
    }
    private IRadixEventListener<RadixEvent> accListener = new IRadixEventListener<RadixEvent>() {
        @Override
        public void onEvent(RadixEvent e) {

            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    if (definition != null) {
                        updateChFinalState(canChangeFinal(false));
                        updateChPublishedState();
                    }
                }
            });
        }
    };

    private void updateChPublishedState() {
        if (definition != null) {
            chPublished.setSelected(definition.isPublished());
            chPublished.setEnabled(!definition.isReadOnly() && definition.canChangePublishing());
        } else {
            chPublished.setEnabled(false);
        }
    }

    private void updateChFinalState(boolean canChangeFinal) {
        if (definition != null) {
            boolean isFinal = definition.isFinal();
            boolean isError = isFinal && !canChangeFinal;

            if (isError) {
                chFinal.setEnabled(!definition.isReadOnly());
                chFinal.setForeground(Color.RED);
            } else {
                chFinal.setEnabled(!definition.isReadOnly() && canChangeFinal && definition.canChangeFinality());
                chFinal.setForeground(Color.BLACK);
            }
            chFinal.setSelected(isFinal);
        } else {
            chFinal.setEnabled(false);
        }
    }

    @SuppressWarnings("unchecked")
    private boolean canChangeFinal(boolean openMode) {
        if (definition == null) {
            return false;
        }
        boolean result = definition.canBeFinal();

        if (result || openMode) {
            AdsAccessFlags flags = null;
            if (definition instanceof AdsClassDef) {
                flags = ((AdsClassDef) definition).getAccessFlags();
            } else if (definition instanceof AdsPropertyDef) {
                flags = ((AdsPropertyDef) definition).getAccessFlags();
            } else if (definition instanceof AdsMethodDef) {
                flags = ((AdsMethodDef) definition).getProfile().getAccessFlags();
            }
            if (flags != null) {
                if (openMode) {
                    flags.getAccessFlagsChangesSupport().addEventListener(accListener);
                }
                if (flags.isAbstract()) {
                    return false;
                }
            }
        }
        return result;
    }

    @Override
    public Dimension getMinimumSize() {
//        final int h = comboBox.getMinimumSize().height;
//        final int w = comboBox.getMinimumSize().width + 10 + chFinal.getMinimumSize().width + chPublished.getPreferredSize().width + 10;
//        return new Dimension(w, h);
        Dimension superSize = super.getMinimumSize();
        Dimension newSize = comboBox.getMinimumSize();
        return new Dimension(superSize.width, newSize.height);
    }

    @Override
    public Dimension getPreferredSize() {
//        final int h = chFinal.getMinimumSize().height;
//        final int w = comboBox.getPreferredSize().width + 10 + chFinal.getPreferredSize().width + chPublished.getPreferredSize().width + 10;
//        return new Dimension(w, h);
        Dimension superSize = super.getPreferredSize();
        Dimension newSize = comboBox.getPreferredSize();
        return new Dimension(superSize.width, newSize.height);
    }

    @Override
    public int getBaseline(int width, int height) {
        return comboBox.getBaseline(width, height);//chFinal.getBaseline(chFinal.getWidth(), chFinal.getHeight()) + chFinal.getY();
    }
}
