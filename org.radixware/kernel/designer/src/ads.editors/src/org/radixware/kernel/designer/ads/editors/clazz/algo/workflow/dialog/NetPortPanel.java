/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */
package org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.radixware.kernel.common.components.ExtendableTextField;
import org.radixware.kernel.common.components.ExtendableTextField.ExtendableTextChangeEvent;
import org.radixware.kernel.common.components.ExtendableTextField.ExtendableTextChangeListener;
import org.radixware.kernel.common.defs.Definition;
import org.radixware.kernel.common.defs.ExtendableDefinitions.EScope;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.RadixObjects;
import org.radixware.kernel.common.defs.ads.AdsDefinition;
import org.radixware.kernel.common.defs.ads.AdsDefinitions;
import org.radixware.kernel.common.defs.ads.clazz.algo.AdsAlgoClassDef;
import org.radixware.kernel.common.defs.ads.clazz.algo.AdsAlgoStrobMethodDef;
import org.radixware.kernel.common.defs.ads.clazz.algo.object.*;
import org.radixware.kernel.common.defs.ads.clazz.members.AdsMethodDef;
import org.radixware.kernel.common.defs.ads.common.AdsVisitorProvider;
import org.radixware.kernel.common.defs.ads.module.AdsModule;
import org.radixware.kernel.common.defs.ads.module.AdsSearcher;
import org.radixware.kernel.common.defs.ads.module.ModuleDefinitions;
import org.radixware.kernel.common.defs.ads.src.JavaSourceSupport.UsagePurpose;
import org.radixware.kernel.common.defs.ads.type.AdsType;
import org.radixware.kernel.common.defs.ads.type.AdsTypeDeclaration;
import org.radixware.kernel.common.defs.ads.type.IAdsTypedObject;
import org.radixware.kernel.common.defs.ads.xml.AdsXmlSchemeDef;
import org.radixware.kernel.common.defs.value.ValAsStr;
import org.radixware.kernel.common.enums.EValType;
import org.radixware.kernel.common.jml.Jml;
import org.radixware.kernel.common.repository.ads.AdsSegment;
import org.radixware.kernel.common.resources.icons.RadixIcon;
import org.radixware.kernel.common.scml.CodePrinter;
import org.radixware.kernel.common.types.Id;
import org.radixware.kernel.common.utils.RadixResourceBundle;
import org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.EditorDialog;
import org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.StrobItem;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ChooseDefinition;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ChooseDefinitionCfg;
import org.radixware.kernel.common.resources.RadixWareIcons;

public class NetPortPanel extends EditorDialog.EditorPanel<AdsAppObject> {

    public NetPortPanel(AdsAppObject node) {
        super(node);
        initComponents();

        sendMessSchema = node.getPropByName("sendMessSchemaId");
        recvMessSchema = node.getPropByName("recvMessSchemaId");

        sendMessClass = node.getPropByName("sendMessClass");
        recvMessClass = node.getPropByName("recvMessClass");

        sendMess = node.getPropByName("sendMess");
        recvMess = node.getPropByName("recvMess");

        portUnitIdParam = node.getPropByName("portUnitIdParamId");
        sidParam = node.getPropByName("sidParamId");

        recvTimeout = node.getPropByName("recvTimeout");
        strob = node.getPropByName("strobId");

        textRecvType.setEnabled(!node.isReadOnly());
        textSendType.setEnabled(!node.isReadOnly());
        chkStoreSendMess.setEnabled(!node.isReadOnly());
        textUnitParam.setEnabled(!node.isReadOnly());
        textSidParam.setEnabled(!node.isReadOnly());
        comboStrob.setEnabled(!node.isReadOnly());
        panelTimeout.setEnabled(!node.isReadOnly());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTimeout = new org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.TimeoutPanel();
        labelStrob = new javax.swing.JLabel();
        labelRecvType = new javax.swing.JLabel();
        textRecvType = new org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.ExtTextField();
        comboStrob = new org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.ExtTextField();
        labelSendType = new javax.swing.JLabel();
        textSendType = new org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.ExtTextField();
        chkStoreSendMess = new javax.swing.JCheckBox();
        labelUnitParam = new javax.swing.JLabel();
        textUnitParam = new org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.ExtTextField();
        labelSidParam = new javax.swing.JLabel();
        textSidParam = new org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.ExtTextField();

        setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.inactiveCaption));
        setMinimumSize(new java.awt.Dimension(500, 320));
        setPreferredSize(new java.awt.Dimension(500, 320));
        setRequestFocusEnabled(false);

        labelStrob.setText(RadixResourceBundle.getMessage(NetPortPanel.class, "NetPortPanel.labelStrob.text")); // NOI18N

        labelRecvType.setText(RadixResourceBundle.getMessage(NetPortPanel.class, "NetPortPanel.labelRecvType.text")); // NOI18N

        labelSendType.setText(RadixResourceBundle.getMessage(NetPortPanel.class, "NetPortPanel.labelSendType.text")); // NOI18N

        chkStoreSendMess.setText(RadixResourceBundle.getMessage(NetPortPanel.class, "NetPortPanel.chkStoreSendMess.text")); // NOI18N
        chkStoreSendMess.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        labelUnitParam.setText(RadixResourceBundle.getMessage(NetPortPanel.class, "NetPortPanel.labelUnitParam.text")); // NOI18N

        labelSidParam.setText(RadixResourceBundle.getMessage(NetPortPanel.class, "NetPortPanel.labelSidParam.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelTimeout, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                    .addComponent(chkStoreSendMess)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelSidParam)
                            .addComponent(labelUnitParam)
                            .addComponent(labelStrob)
                            .addComponent(labelSendType)
                            .addComponent(labelRecvType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textUnitParam, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                            .addComponent(textSendType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                            .addComponent(textRecvType, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                            .addComponent(textSidParam, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                            .addComponent(comboStrob, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRecvType)
                    .addComponent(textRecvType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textSendType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSendType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkStoreSendMess)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textUnitParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelUnitParam))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textSidParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSidParam))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboStrob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelStrob))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTimeout, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkStoreSendMess;
    private org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.ExtTextField comboStrob;
    private javax.swing.JLabel labelRecvType;
    private javax.swing.JLabel labelSendType;
    private javax.swing.JLabel labelSidParam;
    private javax.swing.JLabel labelStrob;
    private javax.swing.JLabel labelUnitParam;
    private org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.TimeoutPanel panelTimeout;
    private org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.ExtTextField textRecvType;
    private org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.ExtTextField textSendType;
    private org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.ExtTextField textSidParam;
    private org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.ExtTextField textUnitParam;
    // End of variables declaration//GEN-END:variables
    private static final String MESSAGE_INSTANCE_DOCUMENT = "MessageInstanceDocument";
    private AdsAppObject.Prop sendMessSchema;
    private AdsAppObject.Prop recvMessSchema;
    private AdsAppObject.Prop sendMessClass;
    private AdsAppObject.Prop recvMessClass;
    private AdsAppObject.Prop sendMess;
    private AdsAppObject.Prop recvMess;
    private AdsAppObject.Prop portUnitIdParam;
    private AdsAppObject.Prop sidParam;
    private AdsAppObject.Prop recvTimeout;
    private AdsAppObject.Prop strob;

    @Override
    public void init() {
        AdsTypeDeclaration recvType = AdsTypeDeclaration.Factory.newInstance(EValType.BIN);
        if (recvMessSchema.getValue() != null) {
            AdsXmlSchemeDef xml = (AdsXmlSchemeDef) AdsSearcher.Factory.newAdsDefinitionSearcher(obj).findById(Id.Factory.loadFrom(String.valueOf(recvMessSchema.getValue()))).get();
            if (xml != null) {
                recvType = AdsTypeDeclaration.Factory.newXml(xml, MESSAGE_INSTANCE_DOCUMENT);
            } else {
                recvType = AdsTypeDeclaration.Factory.newPlatformClass(String.valueOf(recvMessSchema.getValue()));
            }
        }
        textRecvType.setTextFieldValue(recvType.getName(obj));

        AdsTypeDeclaration sendType = AdsTypeDeclaration.Factory.newInstance(EValType.BIN);
        if (sendMessSchema.getValue() != null) {
            AdsXmlSchemeDef xml = (AdsXmlSchemeDef) AdsSearcher.Factory.newAdsDefinitionSearcher(obj).findById(Id.Factory.loadFrom(String.valueOf(sendMessSchema.getValue()))).get();
            if (xml != null) {
                sendType = AdsTypeDeclaration.Factory.newXml(xml, MESSAGE_INSTANCE_DOCUMENT);
            } else {
                sendType = AdsTypeDeclaration.Factory.newPlatformClass(String.valueOf(sendMessSchema.getValue()));
            }
        }
        textSendType.setTextFieldValue(sendType.getName(obj));

        chkStoreSendMess.setSelected(sendMess.getPersistent());

        AdsDefinition unitDef = null;
        Id unitId = Id.Factory.loadFrom(portUnitIdParam.getValue() == null ? null : portUnitIdParam.getValue().toString());
        if (unitId != null) {
            unitDef = obj.getOwnerClass().findComponentDefinition(unitId).get();
        }
        if (unitDef != null) {
            textUnitParam.setTextFieldValue(parameterName(unitDef));
        } else {
            textUnitParam.setEmpty();
        }

        AdsDefinition sidDef = null;
        Id sidId = Id.Factory.loadFrom(sidParam.getValue() == null ? null : sidParam.getValue().toString());
        if (sidId != null) {
            sidDef = obj.getOwnerClass().findComponentDefinition(sidId).get();
        }
        if (sidDef != null) {
            textSidParam.setTextFieldValue(parameterName(sidDef));
        } else {
            textSidParam.setEmpty();
        }

        StrobItem selItem = null;
        Id strobId = strob.getValue() != null ? Id.Factory.loadFrom(strob.getValue().toString()) : null;
        List<StrobItem> strobs = new ArrayList<StrobItem>();
        for (AdsMethodDef mf : obj.getOwnerClass().getMethods().get(EScope.ALL)) {
            if (mf instanceof AdsAlgoStrobMethodDef) {
                StrobItem item = new StrobItem((AdsAlgoStrobMethodDef) mf);
                if (mf.getId().equals(strobId)) {
                    selItem = item;
                }
                strobs.add(item);
            }
        }
        comboStrob.setComboBoxModel(new DefaultComboBoxModel(strobs.toArray()));
        comboStrob.setComboBoxSelectedItem(selItem);

        panelTimeout.setTimeout(recvTimeout.getValue() != null ? (BigDecimal) recvTimeout.getValue().toObject(EValType.NUM) : null);

// ---
        textRecvType.setEditable(false);
        textRecvType.addChooseButton(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                AdsVisitorProvider provider = new AdsVisitorProvider() {

                    @Override
                    public boolean isTarget(RadixObject object) {
                        return object instanceof AdsXmlSchemeDef;
                    }
                ;
                };
                ChooseDefinitionCfg cfg = ChooseDefinitionCfg.Factory.newInstance(obj, provider);
                AdsXmlSchemeDef xml = (AdsXmlSchemeDef) ChooseDefinition.chooseDefinition(cfg);
                if (xml == null) {
                    return;
                }

                AdsTypeDeclaration recvType = AdsTypeDeclaration.Factory.newXml(xml, "MessageInstanceDocument");
                recvMessSchema.setValue(String.valueOf(recvType.getPath().getTargetId()));

                recvMessClass.setValue(qualifiedXmlName(recvType));
                recvMess.setType(recvType);

                textRecvType.setTextFieldValue(recvType.getName(obj));
            }
        });
        textRecvType.addResetButton(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                AdsTypeDeclaration recvType = AdsTypeDeclaration.Factory.newInstance(EValType.BIN);
                recvMessSchema.setValue((ValAsStr) null);
                recvMessClass.setValue((ValAsStr) null);
                recvMess.setType(recvType);
                textRecvType.setTextFieldValue(recvType.getName(obj));
            }
        });

        textSendType.setEditable(false);
        textSendType.addChooseButton(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                AdsVisitorProvider provider = new AdsVisitorProvider() {

                    @Override
                    public boolean isTarget(RadixObject object) {
                        return object instanceof AdsXmlSchemeDef;
                    }
                ;
                };
                ChooseDefinitionCfg cfg = ChooseDefinitionCfg.Factory.newInstance(obj, provider);
                AdsXmlSchemeDef xml = (AdsXmlSchemeDef) ChooseDefinition.chooseDefinition(cfg);
                if (xml == null) {
                    return;
                }

                AdsTypeDeclaration sendType = AdsTypeDeclaration.Factory.newXml(xml, "MessageInstanceDocument");
                sendMessSchema.setValue(String.valueOf(sendType.getPath().getTargetId()));

                sendMessClass.setValue(qualifiedXmlName(sendType));
                sendMess.setType(sendType);

                textSendType.setTextFieldValue(sendType.getName(obj));
            }
        });
        textSendType.addResetButton(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                AdsTypeDeclaration sendType = AdsTypeDeclaration.Factory.newInstance(EValType.BIN);
                sendMessSchema.setValue((ValAsStr) null);
                sendMessClass.setValue((ValAsStr) null);
                sendMess.setType(sendType);
                textSendType.setTextFieldValue(sendType.getName(obj));
            }
        });

        chkStoreSendMess.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                sendMess.setPersistent(chkStoreSendMess.isSelected());
            }
        });

        textUnitParam.setEditable(false);
        textUnitParam.addChooseButton(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                AdsVisitorProvider provider = new AdsVisitorProvider() {

                    @Override
                    public boolean isContainer(RadixObject object) {
                        return (object instanceof AdsSegment)
                                || (object instanceof AdsModule)
                                || (object instanceof ModuleDefinitions)
                                || (object instanceof AdsDefinitions)
                                || (object instanceof RadixObjects)
                                || (object instanceof AdsAlgoClassDef && object.equals(obj.getOwnerClass()))
                                || (object instanceof AdsPage)
                                || (object instanceof AdsScopeObject)
                                || (object instanceof AdsCatchObject)
                                || (object instanceof AdsAppObject)
                                || (object instanceof AdsIncludeObject);
                    }

                    @Override
                    public boolean isTarget(RadixObject object) {
                        if (object instanceof AdsAppObject.Prop) {
                            if ((((AdsAppObject.Prop) object).getMode() & AdsAppObject.Prop.PUBLIC) == 0) {
                                return false;
                            }
                        }
                        if (object instanceof Definition && object instanceof IAdsTypedObject && !(object instanceof Jml)) {
                            IAdsTypedObject typed = (IAdsTypedObject) object;
                            return AdsTypeDeclaration.equals((Definition) object, typed.getType(), AdsTypeDeclaration.Factory.newInstance(EValType.INT));
                        }
                        return false;
                    }
                };

                ChooseDefinitionCfg cfg = ChooseDefinitionCfg.Factory.newInstance(obj, provider);
                AdsDefinition unitDef = (AdsDefinition) ChooseDefinition.chooseDefinition(cfg);
                portUnitIdParam.setValue(unitDef != null ? String.valueOf(unitDef.getId()) : null);
                if (unitDef == null) {
                    textUnitParam.setEmpty();
                } else {
                    textUnitParam.setTextFieldValue(parameterName(unitDef));
                }
            }
        });
        textUnitParam.addResetButton(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                portUnitIdParam.setValue((ValAsStr) null);
                textUnitParam.setEmpty();
            }
        });

        textSidParam.setEditable(false);
        textSidParam.addChooseButton(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                AdsVisitorProvider provider = new AdsVisitorProvider() {

                    @Override
                    public boolean isContainer(RadixObject object) {
                        return (object instanceof AdsSegment)
                                || (object instanceof AdsModule)
                                || (object instanceof ModuleDefinitions)
                                || (object instanceof AdsDefinitions)
                                || (object instanceof RadixObjects)
                                || (object instanceof AdsAlgoClassDef && object.equals(obj.getOwnerClass()))
                                || (object instanceof AdsPage)
                                || (object instanceof AdsScopeObject)
                                || (object instanceof AdsCatchObject)
                                || (object instanceof AdsAppObject)
                                || (object instanceof AdsIncludeObject);
                    }

                    @Override
                    public boolean isTarget(RadixObject object) {
                        if (object instanceof AdsAppObject.Prop) {
                            if ((((AdsAppObject.Prop) object).getMode() & AdsAppObject.Prop.PUBLIC) == 0) {
                                return false;
                            }
                        }
                        if (object instanceof IAdsTypedObject && !(object instanceof Jml)) {
                            IAdsTypedObject typed = (IAdsTypedObject) object;
                            return AdsTypeDeclaration.equals(typed.getType(), AdsTypeDeclaration.Factory.newInstance(EValType.STR));
                        }
                        return false;
                    }
                };

                ChooseDefinitionCfg cfg = ChooseDefinitionCfg.Factory.newInstance(obj, provider);
                AdsDefinition sidDef = (AdsDefinition) ChooseDefinition.chooseDefinition(cfg);
                sidParam.setValue(sidDef != null ? String.valueOf(sidDef.getId()) : null);
                if (sidDef == null) {
                    textSidParam.setEmpty();
                } else {
                    textSidParam.setTextFieldValue(parameterName(sidDef));
                }
            }
        });
        textSidParam.addResetButton(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                sidParam.setValue((ValAsStr) null);
                textSidParam.setEmpty();
            }
        });

        comboStrob.setEditorType(ExtendableTextField.EDITOR_COMBO);
        comboStrob.addResetButton(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                comboStrob.setEmpty();
            }
        });

        comboStrob.getChangeSupport().addEventListener(new ExtendableTextChangeListener() {

            @Override
            public void onEvent(ExtendableTextChangeEvent e) {
                StrobItem item = (StrobItem) comboStrob.getComboBoxSelectedItem();
                strob.setValue(item != null ? ValAsStr.Factory.loadFrom(String.valueOf(item.getId())) : null);
            }
        });

        panelTimeout.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                recvTimeout.setValue(ValAsStr.Factory.newInstance(panelTimeout.getTimeout(), EValType.NUM));
            }
        });
    }

    private String parameterName(AdsDefinition def) {
        if (def instanceof AdsIncludeObject.Param || def instanceof AdsAppObject.Prop) {
            return def.getOwnerDefinition().getName() + "." + def.getName();
        }
        return def.getName();
    }

    private String qualifiedXmlName(AdsTypeDeclaration decl) {
        CodePrinter printer = CodePrinter.Factory.newJavaPrinter();
        AdsType type = decl.resolve(obj).get();
        if (type != null) {
            type.getJavaSourceSupport().getCodeWriter(UsagePurpose.SERVER_EXECUTABLE).writeCode(printer);
        }
        return String.valueOf(printer.getContents());
    }
    /*
     * private Id xmlSchemaId(String qualifiedXmlName) { Pattern pattern =
     * Pattern.compile(".+\\.(xsd\\w+)\\..+"); Matcher matcher =
     * pattern.matcher(qualifiedXmlName); if (matcher.find() &&
     * matcher.groupCount() >= 1) return Id.Factory.loadFrom(matcher.group(1));
     * return null; }
     */

    @Override
    public void apply() {
        /*
         * recvMessSchema.setValue(recvType != null ? qualifiedXmlName(recvType,
         * MESSAGE_INSTANCE_DOCUMENT) : null); sendMessSchema.setValue(sendType
         * != null ? qualifiedXmlName(sendType, MESSAGE_INSTANCE_DOCUMENT) :
         * null);
         *
         * recvMess.setType(recvType); sendMess.setType(sendType);
         *
         * sendMess.setPersistent(chkStoreSendMess.isSelected());
         *
         * portUnitIdParam.setValue(unitDef != null ?
         * String.valueOf(unitDef.getId()) : null); sidParam.setValue(sidDef !=
         * null ? String.valueOf(sidDef.getId()) : null);
         *
         * StrobItem item = (StrobItem)comboStrob.getComboBoxSelectedItem();
         * strob.setValue(item != null ?
         * ValAsStr.Factory.loadFrom(String.valueOf(item.getId())) : null);
         *
         * recvTimeout.setValue(ValAsStr.Factory.newInstance(panelTimeout.getTimeout(),
         * EValType.NUM));
         */
    }

    @Override
    public String getTitle() {
        return RadixResourceBundle.getMessage(getClass(), "CTL_Properties");
    }

    @Override
    public RadixIcon getIcon() {
        return RadixWareIcons.EDIT.PROPERTIES;
    }
}
