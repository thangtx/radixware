/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * PublishedEnumStatefullPanel.java
 *
 * Created on 16.10.2009, 12:03:53
 */
package org.radixware.kernel.designer.ads.editors.enumeration;

import java.awt.Dimension;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumDef;


public class PublishedEnumStatefullPanel extends javax.swing.JPanel {

    /** Creates new form PublishedEnumStatefullPanel */
    public PublishedEnumStatefullPanel() {
        initComponents();
        field.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                changedUpdate(e);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                changedUpdate(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                PublishedEnumStatefullPanel.this.onChange();
            }
        });
    }
    private AdsEnumDef enumDef;

    private void onChange() {
        if (!update) {
            String current = field.getText();
            if (enumDef.setPublishedPlatformEnumName(current)) {
                stateLabel.setText("");
            } else {
                stateLabel.setText("Incorrect published name");
            }
        }
    }

    public void open(AdsEnumDef enumDef) {
        this.enumDef = enumDef;
        update();
    }
    private boolean update = false;

    public void update() {
        update = true;
        String name = enumDef.getPublishedPlatformEnumName();
        field.setText(name);
        field.setEditable(!enumDef.isReadOnly());
        if (enumDef.findPublishedPlatformEnum() != null) {
            stateLabel.setText("");
        } else {
            stateLabel.setText("Incorrect published name");
        }
        update = false;
    }

    @Override
    public Dimension getPreferredSize() {
        Dimension sz = field.getPreferredSize();
        Dimension sz2 = stateLabel.getPreferredSize();
        return new Dimension(sz.width + sz.height + 10, Math.max(sz.height, sz2.height));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        field = new javax.swing.JTextField();
        stateLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout(10, 0));

        jLabel1.setText(org.openide.util.NbBundle.getMessage(PublishedEnumStatefullPanel.class, "PlatformTip")); // NOI18N
        add(jLabel1, java.awt.BorderLayout.WEST);
        add(field, java.awt.BorderLayout.CENTER);

        stateLabel.setForeground(new java.awt.Color(255, 0, 0));
        add(stateLabel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField field;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel stateLabel;
    // End of variables declaration//GEN-END:variables
}
