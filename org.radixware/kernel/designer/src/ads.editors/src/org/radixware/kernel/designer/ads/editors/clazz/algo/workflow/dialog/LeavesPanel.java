/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog;

import java.util.List;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.AbstractListModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.ads.clazz.algo.object.ObjectFactory;
import org.radixware.kernel.common.defs.ads.clazz.algo.object.AdsPin;
import org.radixware.kernel.common.resources.RadixWareIcons;


public class LeavesPanel extends EditorDialog.EditorPanel<List<AdsPin>> {

    /** Creates new form MergePanel */
    public LeavesPanel(List<AdsPin> obj) {
        super(obj);
        initComponents();        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPin = new javax.swing.JScrollPane();
        listPin = new javax.swing.JList();
        buttonEdit = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        buttonDel = new javax.swing.JButton();
        buttonUp = new javax.swing.JButton();
        buttonDown = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.inactiveCaption));
        setMinimumSize(new java.awt.Dimension(250, 230));
        setPreferredSize(new java.awt.Dimension(250, 230));
        setRequestFocusEnabled(false);

        listPin.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPin.setViewportView(listPin);

        buttonEdit.setIcon(RadixWareIcons.EDIT.EDIT.getIcon());
        buttonEdit.setMaximumSize(new java.awt.Dimension(32, 32));
        buttonEdit.setMinimumSize(new java.awt.Dimension(32, 32));
        buttonEdit.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonAdd.setIcon(RadixWareIcons.CREATE.ADD.getIcon());
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonDel.setIcon(RadixWareIcons.DELETE.DELETE.getIcon());
        buttonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDelActionPerformed(evt);
            }
        });

        buttonUp.setIcon(RadixWareIcons.ARROW.MOVE_UP.getIcon());
        buttonUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpActionPerformed(evt);
            }
        });

        buttonDown.setIcon(RadixWareIcons.ARROW.MOVE_DOWN.getIcon());
        buttonDown.setMargin(new java.awt.Insets(2, 4, 2, 4));
        buttonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPin, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonDown, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonUp, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPin, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonDel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonUp, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonDown, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        // TODO add your handling code here:
        edit();
}//GEN-LAST:event_buttonEditActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        // TODO add your handling code here:
        int idx = listPin.getSelectedIndex();
        model.add(ObjectFactory.createPin(), idx);
        listPin.setSelectedIndex(Math.max(idx, 0));
        update();
}//GEN-LAST:event_buttonAddActionPerformed

    private void buttonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDelActionPerformed
        // TODO add your handling code here:
        int idx = listPin.getSelectedIndex();
        model.del(idx);
        listPin.setSelectedIndex(Math.min(idx, model.getSize()-1));
        update();
}//GEN-LAST:event_buttonDelActionPerformed

    private void buttonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpActionPerformed
        // TODO add your handling code here:
        int idx = listPin.getSelectedIndex();
        model.up(idx);
        listPin.setSelectedIndex(Math.max(Math.min(idx-1, model.getSize()-1), -1));
        update();
}//GEN-LAST:event_buttonUpActionPerformed

    private void buttonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDownActionPerformed
        // TODO add your handling code here:
        int idx = listPin.getSelectedIndex();
        model.down(idx);
        listPin.setSelectedIndex(Math.max(Math.min(idx+1, model.getSize()-1), -1));
        update();
}//GEN-LAST:event_buttonDownActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonDel;
    private javax.swing.JButton buttonDown;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonUp;
    private javax.swing.JList listPin;
    private javax.swing.JScrollPane scrollPin;
    // End of variables declaration//GEN-END:variables

    private ListModel model;

    @Override
    public void init() {
        model = new ListModel(new ArrayList<AdsPin>(obj));
        listPin.setModel(model);
        listPin.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent ev) {
                if (ev.getClickCount() == 2) {
                    edit();
                }
            }
        });
        listPin.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting())
                    return;
                update();
            }
        });
        listPin.setSelectedIndex(model.getSize() > 0 ? 0 : -1);
        listPin.requestFocusInWindow();
        update();
    }

    private void edit() {
        AdsPin pin = (AdsPin)listPin.getSelectedValue();
        if (pin != null) {
            String text = (String)JOptionPane.showInputDialog(this, NbBundle.getMessage(getClass(), "Panel.name.text"), NbBundle.getMessage(getClass(), "CTL_LeavePanel"), JOptionPane.PLAIN_MESSAGE, null, null, pin.getName());
            if (text != null) {
                pin.setName(text == null ? "" : text);
                model.edited(pin);
            }
        }
    }

    @Override
    public void apply() {
        obj.clear();
        obj.addAll(model.getPins());
    }

    @Override
    public String getTitle() {
        return NbBundle.getMessage(getClass(), "CTL_LeavesPanel");
    }

    private void update() {
        int idx = listPin.getSelectedIndex();
        int size = model.getSize();
        buttonAdd.setEnabled(true);
        buttonDel.setEnabled(idx >= 0 && size > 1);
        buttonUp.setEnabled(idx >= 1);
        buttonDown.setEnabled(idx >= 0 && idx < size-1);
        buttonEdit.setEnabled(idx >= 0);
    }

    // list model
    final private class ListModel extends AbstractListModel {

        private ArrayList<AdsPin> pins;

        private AdsPin pin0;
        private AdsPin pin1;

        ListModel(ArrayList<AdsPin> pins) {
            this.pins = pins;
        }

        @Override
        public Object getElementAt(int i) {
            return pins.get(i);
        }

        @Override
        public int getSize() {
            return pins.size();
        }

        public ArrayList<AdsPin> getPins() {
            return pins;
        }

        void edited(AdsPin pin) {
            int idx = pins.indexOf(pin);
            if (idx >= 0 && idx < getSize())
                fireContentsChanged(this, idx, idx);
        }

        void add(AdsPin pin, int idx) {
            if (idx >= 0 && idx < getSize()) {
                pins.add(idx, pin);
                fireIntervalAdded(this, idx, idx);
            } else {
                pins.add(0, pin);
                fireIntervalAdded(this, 0, 0);
            }
        }

        void del(int idx) {
            if (idx >= 0 && idx < pins.size() && pins.size() > 1) {
                pins.remove(idx);
                fireIntervalRemoved(this, idx, idx);
            }
        }

        void up(int idx) {
            if (idx > 0 && idx < pins.size()) {
                pin0 = pins.get(idx-1);
                pin1 = pins.get(idx);
                pins.set(idx-1, pin1);
                pins.set(idx, pin0);
                fireContentsChanged(this, idx-1, idx);
            }
        }

        void down(int idx) {
            if (idx >= 0 && idx < pins.size()-1) {
                pin0 = pins.get(idx);
                pin1 = pins.get(idx+1);
                pins.set(idx, pin1);
                pins.set(idx+1, pin0);
                fireContentsChanged(this, idx, idx+1);
            }
        }
    }

}
