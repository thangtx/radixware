/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.ads.clazz.algo.generation.AppUtils;
import org.radixware.kernel.common.defs.ads.clazz.algo.object.AdsAppObject;
import org.radixware.kernel.common.defs.value.ValAsStr;
import org.radixware.kernel.common.enums.EDwfFormSubmitVariant;
import org.radixware.kernel.common.types.Id;
import org.radixware.kernel.common.utils.RadixResourceBundle;
import org.radixware.kernel.designer.common.dialogs.RadixWareDesignerIcon;
import org.radixware.kernel.designer.common.dialogs.utils.ModalDisplayer;


public class SubmitPanel extends JPanel {

    public SubmitPanel() {
        initComponents();        
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btAdd = new javax.swing.JButton();
        btDel = new javax.swing.JButton();
        btUp = new javax.swing.JButton();
        btDown = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listUsed = new javax.swing.JList();
        labelUsed = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listAvailable = new javax.swing.JList();
        labelAvailable = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(RadixResourceBundle.getMessage(SubmitPanel.class, "SubmitPanel.border.title"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(250, 200));
        setPreferredSize(new java.awt.Dimension(250, 200));
        setRequestFocusEnabled(false);

        btAdd.setIcon(RadixWareDesignerIcon.ARROW.LEFT.getIcon());
        btAdd.setToolTipText(RadixResourceBundle.getMessage(SubmitPanel.class, "SubmitPanel.btAdd.text")); // NOI18N
        btAdd.setFocusable(false);
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btDel.setIcon(RadixWareDesignerIcon.ARROW.RIGHT.getIcon());
        btDel.setToolTipText(RadixResourceBundle.getMessage(SubmitPanel.class, "SubmitPanel.btDel.text")); // NOI18N
        btDel.setFocusable(false);
        btDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDelActionPerformed(evt);
            }
        });

        btUp.setIcon(RadixWareDesignerIcon.ARROW.MOVE_UP.getIcon());
        btUp.setToolTipText(RadixResourceBundle.getMessage(SubmitPanel.class, "SubmitPanel.btUp.text")); // NOI18N
        btUp.setFocusable(false);
        btUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpActionPerformed(evt);
            }
        });

        btDown.setIcon(RadixWareDesignerIcon.ARROW.MOVE_DOWN.getIcon());
        btDown.setToolTipText(RadixResourceBundle.getMessage(SubmitPanel.class, "SubmitPanel.btDown.text")); // NOI18N
        btDown.setFocusable(false);
        btDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
            .addComponent(btDel, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
            .addComponent(btUp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
            .addComponent(btDown, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(btAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btDel)
                .addGap(43, 43, 43)
                .addComponent(btUp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btDown)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        listUsed.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listUsed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listUsedMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listUsed);

        labelUsed.setText(RadixResourceBundle.getMessage(SubmitPanel.class, "SubmitPanel.labelUsed.text")); // NOI18N
        labelUsed.setFocusable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(labelUsed)
                .addContainerGap(61, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(labelUsed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
        );

        listAvailable.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listAvailable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listAvailableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listAvailable);

        labelAvailable.setText(RadixResourceBundle.getMessage(SubmitPanel.class, "SubmitPanel.labelAvailable.text")); // NOI18N
        labelAvailable.setFocusable(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(labelAvailable)
                .addContainerGap(46, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(labelAvailable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // TODO add your handling code here:
        EDwfFormSubmitVariant v = (EDwfFormSubmitVariant)listAvailable.getSelectedValue();
        int idxAv = listAvailable.getSelectedIndex();
        if (v != null) {
            int idx = listUsed.getSelectedIndex();
            usedModel.add(idx, v);
            update(listUsed, idx);
            update(listAvailable, idxAv);
            update();
        }
    }//GEN-LAST:event_btAddActionPerformed

    private void btDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDelActionPerformed
        // TODO add your handling code here:
        int idx = listUsed.getSelectedIndex();
        int idxAv = listAvailable.getSelectedIndex();
        if (idx >= 0) {
            EDwfFormSubmitVariant v = (EDwfFormSubmitVariant)usedModel.getElementAt(idx);
            variant2TitleId.remove(v);
            variant2NeedConfirm.remove(v);
            variant2NeedUpdate.remove(v);
            variant2Visible.remove(v);
            usedModel.del(idx);
            update(listUsed, idx);
            update(listAvailable, idxAv);
            update();
        }
    }//GEN-LAST:event_btDelActionPerformed

    private void btUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpActionPerformed
        // TODO add your handling code here:
        int idx = listUsed.getSelectedIndex();
        if (idx >= 1 && idx < usedModel.getSize()) {
            usedModel.up(idx);
            update(listUsed, idx - 1);
            update();
        }
    }//GEN-LAST:event_btUpActionPerformed

    private void btDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDownActionPerformed
        // TODO add your handling code here:
        int idx = listUsed.getSelectedIndex();
        if (idx >= 0 && idx < usedModel.getSize()-1) {
            usedModel.down(idx);
            update(listUsed, idx + 1);
            update();
        }
    }//GEN-LAST:event_btDownActionPerformed

    private void listUsedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listUsedMouseClicked
        // TODO add your handling code here:
        
        int idx = listUsed.getSelectedIndex();
        if (idx < 0 || idx >= usedModel.getSize() || !SubmitPanel.this.isEnabled())
            return;
        
        if (evt.getX() < listUsed.getVisibleRect().width - 18) {
            if (evt.getClickCount() == 2) {
                btDel.doClick();
            }
            return;
        }
        
        final EDwfFormSubmitVariant variant = (EDwfFormSubmitVariant)usedModel.getElementAt(idx);
        final Boolean defaultConfirm = true;
        final Boolean defaultUpdate =
                variant == EDwfFormSubmitVariant.OK ||
                variant == EDwfFormSubmitVariant.YES ||
                variant == EDwfFormSubmitVariant.COMMIT ||
                variant == EDwfFormSubmitVariant.FINISH ||
                variant == EDwfFormSubmitVariant.NEXT ||
                variant == EDwfFormSubmitVariant.PROCEED;
        final Boolean defaultVisible = true;
        
        Id titleId = Id.Factory.loadFrom((String)variant2TitleId.get(variant));
        Boolean confirm = variant2NeedConfirm.get(variant);
        if (confirm == null)
            confirm = defaultConfirm;
        Boolean update = variant2NeedUpdate.get(variant);
        if (update == null) {
            update = defaultUpdate;
        }
        Boolean visible = variant2Visible.get(variant);
        if (visible == null)
            visible = defaultVisible;
        
        final SubmitVariantPanel panel = new SubmitVariantPanel(obj, titleId, confirm, update, visible);
        panel.setBorder(new EmptyBorder(10, 10, 10, 10));
        final ModalDisplayer dialog = new ModalDisplayer(panel, NbBundle.getMessage(SubmitVariantPanel.class, "CTL_SubmitVariant") + " " + variant.getValue()) {
            @Override
            protected void apply() {                        
            }
        };
        
        if (dialog.showModal()) {
            titleId = panel.getTitleId();
            if (titleId != null)
                variant2TitleId.put(variant, titleId.toString());
            else
                variant2TitleId.remove(variant);
            
            confirm = panel.getConfirmation();
            if (confirm != null && confirm != defaultConfirm)
                variant2NeedConfirm.put(variant, confirm);
            else
                variant2NeedConfirm.remove(variant);
            
            update = panel.getUpdate();
            if (update != null) {
                if (update != defaultUpdate)
                    variant2NeedUpdate.put(variant, update);
                else
                    variant2NeedUpdate.remove(variant);                    
            } else
                variant2NeedUpdate.remove(variant);
            
            visible = panel.getVisible();
            if (visible != null && visible != defaultVisible)
                variant2Visible.put(variant, visible);
            else
                variant2Visible.remove(variant);
        }
    }//GEN-LAST:event_listUsedMouseClicked

    private void listAvailableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listAvailableMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            btAdd.doClick();
            return;
        }        
    }//GEN-LAST:event_listAvailableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btDel;
    private javax.swing.JButton btDown;
    private javax.swing.JButton btUp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelAvailable;
    private javax.swing.JLabel labelUsed;
    private javax.swing.JList listAvailable;
    private javax.swing.JList listUsed;
    // End of variables declaration//GEN-END:variables
   
    private AdsAppObject.Prop submitVariants;
    private AdsAppObject.Prop submitVariantsTitle;
    private AdsAppObject.Prop submitVariantsTitleId;
    private AdsAppObject.Prop submitVariantsNeedConfirm;
    private AdsAppObject.Prop submitVariantsNeedUpdate;
    private AdsAppObject.Prop submitVariantsVisible;
    
    private Map<EDwfFormSubmitVariant, String> variant2TitleId = null;
    private Map<EDwfFormSubmitVariant, Boolean> variant2NeedConfirm = null;
    private Map<EDwfFormSubmitVariant, Boolean> variant2NeedUpdate = null;
    private Map<EDwfFormSubmitVariant, Boolean> variant2Visible = null;

    private UsedModel usedModel;
    private void setValues(List<EDwfFormSubmitVariant> values) {
        listUsed.setModel(usedModel = new UsedModel(values));
        listUsed.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting())
                    return;
                update();
            }
        });

        listAvailable.setModel(new AvailableModel(usedModel));
        listAvailable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting())
                    return;
                update();
            }
        });

        listUsed.setCellRenderer(new UsedRenderer());
        update(listUsed, 0);
        update(listAvailable, 0);
        update();
    }

    private AdsAppObject obj;
    public void init(AdsAppObject node) {
        obj = node;
        submitVariants = node.getPropByName("submitVariants");
        submitVariantsTitle = node.getPropByName("submitVariantsTitle");
        submitVariantsTitleId = node.getPropByName("submitVariantsTitleId");
        submitVariantsNeedConfirm = node.getPropByName("submitVariantsNeedConfirm");
        submitVariantsNeedUpdate = node.getPropByName("submitVariantsNeedUpdate");
        submitVariantsVisible = node.getPropByName("submitVariantsVisible");
        
        variant2TitleId = AppUtils.parseAsStrMap(submitVariantsTitleId.getValue() != null ? String.valueOf(submitVariantsTitleId.getValue()) : null);
        variant2NeedConfirm = AppUtils.parseAsBoolMap(submitVariantsNeedConfirm.getValue() != null ? String.valueOf(submitVariantsNeedConfirm.getValue()) : null);
        variant2NeedUpdate = AppUtils.parseAsBoolMap(submitVariantsNeedUpdate.getValue() != null ? String.valueOf(submitVariantsNeedUpdate.getValue()) : null);
        variant2Visible = AppUtils.parseAsBoolMap(submitVariantsVisible.getValue() != null ? String.valueOf(submitVariantsVisible.getValue()) : null);
                
        List<EDwfFormSubmitVariant> values = new ArrayList<EDwfFormSubmitVariant>();
        StringTokenizer t = new StringTokenizer(submitVariants.getValue() != null ? String.valueOf(submitVariants.getValue()) : "", ";");
        while (t.hasMoreTokens()) {
            String token = t.nextToken();
            if (token != null && !token.isEmpty())
                values.add(EDwfFormSubmitVariant.getForValue(token));
        }
        setValues(values);
    }

    private List<EDwfFormSubmitVariant> getValues() {
        return usedModel.getValues();
    }

    public void apply() {
        String v = "";
        List<EDwfFormSubmitVariant> values = getValues();
        for (int i=0; i<values.size(); i++) {
            v += values.get(i).getValue();
            if (i < values.size() - 1)
                v += ";";
        }
        submitVariants.setValue(v);
        submitVariantsTitle.setValue((ValAsStr)null);
        submitVariantsTitleId.setValue(AppUtils.mergeAsStrMap(variant2TitleId));
        submitVariantsNeedConfirm.setValue(AppUtils.mergeAsBoolMap(variant2NeedConfirm));
        submitVariantsNeedUpdate.setValue(AppUtils.mergeAsBoolMap(variant2NeedUpdate));
        submitVariantsVisible.setValue(AppUtils.mergeAsBoolMap(variant2Visible));
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        update();
    }

    private void update(JList l, int idx) {
        if (l.getModel().getSize() == 0)
            idx = -1;
        else {
            idx = Math.min(idx, l.getModel().getSize() - 1);
            idx = Math.max(idx, 0);
        }
        l.setSelectedIndex(idx);
        l.updateUI();
    }

    private void update() {
        int idx = listUsed.getSelectedIndex();
        btAdd.setEnabled(isEnabled());
        btDel.setEnabled(isEnabled() && idx >= 0 && idx < usedModel.getSize());
        btUp.setEnabled(isEnabled() && idx >= 1 && idx < usedModel.getSize());
        btDown.setEnabled(isEnabled() && idx >= 0 && idx < usedModel.getSize() - 1);
        listUsed.setEnabled(isEnabled());
        listAvailable.setEnabled(isEnabled());
    }

    private class UsedModel extends AbstractListModel {

        private final List<EDwfFormSubmitVariant> values;

        UsedModel(List<EDwfFormSubmitVariant> values) {
            this.values = new ArrayList<EDwfFormSubmitVariant>(values);
        }

        @Override
        public Object getElementAt(int i) {
            return values.get(i);
        }

        @Override
        public int getSize() {
            return values.size();
        }

        public List<EDwfFormSubmitVariant> getValues() {
            return values;
        }

        public void fireContentChanged(int idx) {
            super.fireContentsChanged(this, idx, idx);
        }

        void add(int idx, EDwfFormSubmitVariant value) {
            if (idx < 0 || idx >= getSize())
                idx = 0;
            values.add(idx, value);
            fireIntervalAdded(this, idx, idx);
        }

        void del(int idx) {
            if (idx >= 0 && idx < getSize()) {
                values.remove(idx);
                fireIntervalRemoved(this, idx, idx);
            }
        }

        void up(int idx) {
            if (idx > 0 && idx < getSize()) {
                EDwfFormSubmitVariant v0 = values.get(idx-1);
                EDwfFormSubmitVariant v1 = values.get(idx);
                values.set(idx-1, v1); values.set(idx, v0);
                fireContentsChanged(this, idx-1, idx);
            }
        }

        void down(int idx) {
            if (idx >= 0 && idx < getSize()-1) {
                EDwfFormSubmitVariant v0 = values.get(idx);
                EDwfFormSubmitVariant v1 = values.get(idx+1);
                values.set(idx, v1); values.set(idx+1, v0);
                fireContentsChanged(this, idx, idx+1);
            }
        }
    }

    private class AvailableModel extends AbstractListModel {

        private final UsedModel usedModel;

        AvailableModel(UsedModel usedModel) {
            this.usedModel = usedModel;
        }

        @Override
        public Object getElementAt(int i) {
            return getValues().get(i);
        }

        @Override
        public int getSize() {
            return getValues().size();
        }

        public List<EDwfFormSubmitVariant> getValues() {
            List<EDwfFormSubmitVariant> values = new ArrayList<EDwfFormSubmitVariant>();
            Collections.addAll(values, EDwfFormSubmitVariant.values());
            values.removeAll(usedModel.getValues());
            return values;
        }

        public void fireContentChanged(int idx) {
            super.fireContentsChanged(this, idx, idx);
        }
    }

    private class UsedLabel extends javax.swing.JPanel {

        private JLabel label = new JLabel();
        private JButton button = new JButton("...");

        public UsedLabel(ActionListener listener) {
            getInsets().set(0, 0, 0, 0);
            setLayout(new BorderLayout());
            label.setBorder(new EmptyBorder(0, 0, 0, 0));
            label.setOpaque(false);
            button.addActionListener(listener);
            button.setPreferredSize(new Dimension(18, 18));
            button.setOpaque(true);
            button.setEnabled(SubmitPanel.this.isEnabled());
            add(label);
            add(button, BorderLayout.EAST);
        }

        public void setText(String text) {
            label.setText(text);
        }

        public String getText() {
            return label.getText();
        }
        
        @Override
        public void setBackground(Color bg) {
            super.setBackground(bg);
        }
        
        @Override
        public void setForeground(Color fg) {
            super.setForeground(fg);
        }

        @Override
        public boolean requestFocusInWindow() {
            return label.requestFocusInWindow();
        }
    }

    private class UsedRenderer extends DefaultListCellRenderer implements ActionListener {
        
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean hasFocus) {
            final UsedLabel editor = new UsedLabel(this);
            editor.setText(value.toString());
            if (isSelected) {
                editor.setBackground(listUsed.getSelectionBackground());
                editor.setForeground(listUsed.getSelectionForeground());
            } else {
                editor.setBackground(listUsed.getBackground());
                editor.setForeground(listUsed.getForeground());
            }
            return editor;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

}
