/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * EditorPresentationsList.java
 *
 * Created on Apr 28, 2009, 4:56:52 PM
 */

package org.radixware.kernel.designer.ads.editors.exploreritems;

import org.radixware.kernel.common.defs.Definition;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.VisitorProvider;
import org.radixware.kernel.common.defs.ads.clazz.presentation.AdsEditorPresentationDef;
import org.radixware.kernel.common.defs.ads.explorerItems.AdsParentRefExplorerItemDef;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ChooseDefinitionCfg;
import org.radixware.kernel.designer.ads.common.lookup.AdsParentRefExplorerItemLookupSupport;
import org.radixware.kernel.designer.common.dialogs.components.RadixObjectChooserCommonComponent;


public class EditorPresentationsChooser extends javax.swing.JPanel {

    private AdsParentRefExplorerItemDef parentRef;
    private AdsParentRefExplorerItemLookupSupport context;
    private ChooseDefinitionCfg cfg;

    private RadixObjectChooserCommonComponent rightComponent;
    private EditorPresentaionsList leftComponent;
    /** Creates new form EditorPresentationsList */
    public EditorPresentationsChooser() {
        initComponents();
        rightComponent = new RadixObjectChooserCommonComponent();
        leftComponent = new EditorPresentaionsList();
    }

    public void setReadonly(boolean readonly){
        this.readonly = readonly;
        chooser.setReadonly(readonly); 
    }

    private boolean readonly = false;
    public void open(final AdsParentRefExplorerItemDef parentRef){
        this.parentRef = parentRef;
        this.context = AdsParentRefExplorerItemLookupSupport.Factory.newInstance(parentRef);
        this.cfg = ChooseDefinitionCfg.Factory.newInstance(parentRef, new ExtendedProvider());
        this.readonly = parentRef.isReadOnly();
        leftComponent.open(parentRef);
        rightComponent.open(parentRef, cfg);
        chooser.open(leftComponent, rightComponent);
        chooser.setReadonly(readonly); 
    }

    public void update(){
        if (parentRef != null){
            chooser.setReadonly(readonly || parentRef.isReadOnly());
            chooser.update();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooser = new org.radixware.kernel.designer.common.dialogs.components.RadixObjectChooserPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(EditorPresentationsChooser.class, "ParentRef-EditorPresentationTitleTip"))); // NOI18N

        javax.swing.GroupLayout chooserLayout = new javax.swing.GroupLayout(chooser);
        chooser.setLayout(chooserLayout);
        chooserLayout.setHorizontalGroup(
            chooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 269, Short.MAX_VALUE)
        );
        chooserLayout.setVerticalGroup(
            chooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(chooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.radixware.kernel.designer.common.dialogs.components.RadixObjectChooserPanel chooser;
    // End of variables declaration//GEN-END:variables

    private class ExtendedProvider extends VisitorProvider {

        private VisitorProvider extend;
        ExtendedProvider(){
            extend = context.getAvailablePresentationsProvider();
        }

        @Override
        public boolean isContainer(RadixObject radixObject) {
            return extend != null ? extend.isContainer(radixObject) : true;
        }

        @Override
        public boolean isTarget(RadixObject radixObject) {
            if (extend != null){
                boolean res = extend.isTarget(radixObject);
                if (res){
                   boolean contains = parentRef.getEditorPresentationIds().contains(((Definition)radixObject).getId());
                   return res && !contains;
                }
                return res;
            }else {
                return radixObject instanceof AdsEditorPresentationDef;
            }
        }

    }

}
