/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.math.BigDecimal;
import java.util.ArrayList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.ExtendableDefinitions.EScope;
import org.radixware.kernel.common.defs.ads.clazz.algo.object.*;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumDef;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumItemDef;
import org.radixware.kernel.common.defs.value.ValAsStr;
import org.radixware.kernel.common.enums.EValType;
import org.radixware.kernel.common.resources.icons.RadixIcon;
import org.radixware.kernel.common.resources.RadixWareIcons;


public class BatchExecutorPanel extends EditorDialog.EditorPanel<AdsAppObject> {

    public BatchExecutorPanel(AdsAppObject node) {
        super(node);
        initComponents();

        toProcess = obj.getPropByName("toProcess");
        priority = obj.getPropByName("priority");
        priorityBoostSpeed = obj.getPropByName("priorityBoostingSpeed");
        timeout = obj.getPropByName("timeout");

        chkGroup.add(chkProcess);
        chkGroup.add(chkUndo);

        chkProcess.setEnabled(!node.isReadOnly());
        chkUndo.setEnabled(!node.isReadOnly());
        comboPriority.setEnabled(!node.isReadOnly());
        spinnerPriorityBoost.setEnabled(!node.isReadOnly());
        panelTimeout.setEnabled(!node.isReadOnly());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chkGroup = new javax.swing.ButtonGroup();
        chkProcess = new javax.swing.JRadioButton();
        chkUndo = new javax.swing.JRadioButton();
        panelTimeout = new org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.TimeoutPanel();
        labelPriority = new javax.swing.JLabel();
        comboPriority = new javax.swing.JComboBox();
        labelPriorityBoost = new javax.swing.JLabel();
        spinnerPriorityBoost = new javax.swing.JSpinner();

        setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.inactiveCaption));
        setMinimumSize(new java.awt.Dimension(500, 240));
        setPreferredSize(new java.awt.Dimension(500, 240));
        setRequestFocusEnabled(false);

        chkProcess.setText(org.openide.util.NbBundle.getMessage(BatchExecutorPanel.class, "BatchExecutorPanel.chkProcess.text")); // NOI18N

        chkUndo.setText(org.openide.util.NbBundle.getMessage(BatchExecutorPanel.class, "BatchExecutorPanel.chkUndo.text")); // NOI18N

        labelPriority.setText(org.openide.util.NbBundle.getMessage(BatchExecutorPanel.class, "BatchExecutorPanel.labelPriority.text")); // NOI18N

        comboPriority.setFocusable(false);
        comboPriority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPriorityActionPerformed(evt);
            }
        });

        labelPriorityBoost.setText(org.openide.util.NbBundle.getMessage(BatchExecutorPanel.class, "BatchExecutorPanel.labelPriorityBoost.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelTimeout, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelPriorityBoost)
                            .addComponent(labelPriority, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(chkProcess)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkUndo))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spinnerPriorityBoost, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                                    .addComponent(comboPriority, 0, 410, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkProcess)
                    .addComponent(chkUndo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboPriority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPriority))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPriorityBoost)
                    .addComponent(spinnerPriorityBoost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTimeout, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboPriorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPriorityActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_comboPriorityActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup chkGroup;
    private javax.swing.JRadioButton chkProcess;
    private javax.swing.JRadioButton chkUndo;
    private javax.swing.JComboBox comboPriority;
    private javax.swing.JLabel labelPriority;
    private javax.swing.JLabel labelPriorityBoost;
    private org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog.TimeoutPanel panelTimeout;
    private javax.swing.JSpinner spinnerPriorityBoost;
    // End of variables declaration//GEN-END:variables
    private AdsAppObject.Prop toProcess;
    private AdsAppObject.Prop priority;
    private AdsAppObject.Prop priorityBoostSpeed;
    private AdsAppObject.Prop timeout;

    private class EnumItemWrapper {

        private AdsEnumItemDef item;

        public EnumItemWrapper(AdsEnumItemDef item) {
            this.item = item;
        }

        public EnumItemWrapper() {
            this.item = null;
        }

        @Override
        public String toString() {
            return getName();
        }

        public String getName() {
            return item != null ? item.getName() : NbBundle.getMessage(getClass(), "Panel.empty.text");
        }

        public ValAsStr getValue() {
            return item != null ? item.getValue() : null;
        }
    }

    @Override
    public void init() {
        Boolean process = (Boolean) toProcess.getValue().toObject(EValType.BOOL);
        chkProcess.setSelected(process);
        chkUndo.setSelected(!process);

        int selected = 0, idx = 0;
        AdsEnumDef en = (AdsEnumDef) priority.getType().getPath().resolve(obj).get();
        List<EnumItemWrapper> wraps = new ArrayList<>();
        for (AdsEnumItemDef item : en.getItems().list(EScope.LOCAL)) {
            idx++;
            if (item.getValue().equals(priority.getValue())) {
                selected = idx;
            }
            wraps.add(new EnumItemWrapper(item));
        }
        comboPriority.setModel(new javax.swing.DefaultComboBoxModel(wraps.toArray()));
        comboPriority.setSelectedIndex(selected);

        spinnerPriorityBoost.setValue(priorityBoostSpeed.getValue().toObject(EValType.INT));
        panelTimeout.setTimeout(timeout.getValue() != null ? (BigDecimal) timeout.getValue().toObject(EValType.NUM) : null);

        chkProcess.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                toProcess.setValue(chkProcess.isSelected() ? "1" : "0");
            }
        });

        chkUndo.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                toProcess.setValue(chkUndo.isSelected() ? "0" : "1");
            }
        });

        comboPriority.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                priority.setValue(((EnumItemWrapper) comboPriority.getSelectedItem()).getValue());
            }
        });

        spinnerPriorityBoost.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                priorityBoostSpeed.setValue(String.valueOf(spinnerPriorityBoost.getValue()));
            }
        });

        panelTimeout.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                timeout.setValue(ValAsStr.Factory.newInstance(panelTimeout.getTimeout(), EValType.NUM));
            }
        });

    }

    @Override
    public void apply() {
    }

    @Override
    public String getTitle() {
        return NbBundle.getMessage(getClass(), "CTL_Properties");
    }

    @Override
    public RadixIcon getIcon() {
        return RadixWareIcons.EDIT.PROPERTIES;
    }
}
