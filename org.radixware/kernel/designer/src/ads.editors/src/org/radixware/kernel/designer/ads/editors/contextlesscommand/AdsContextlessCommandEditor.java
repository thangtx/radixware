/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.contextlesscommand;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.components.ExtendableTextField;
import org.radixware.kernel.common.defs.ads.command.AdsContextlessCommandDef;
import org.radixware.kernel.common.enums.ECommandNature;
import org.radixware.kernel.designer.ads.editors.command.components.AdsCommandCommonPropertiesPanel;
import org.radixware.kernel.designer.common.annotations.registrators.EditorFactoryRegistration;
import org.radixware.kernel.designer.common.editors.RadixObjectEditor;
import org.radixware.kernel.designer.common.editors.jml.JmlEditor;
import org.radixware.kernel.designer.common.general.editors.IEditorFactory;
import org.radixware.kernel.designer.common.general.editors.IRadixObjectEditor;
import org.radixware.kernel.designer.common.general.editors.OpenInfo;


public class AdsContextlessCommandEditor extends RadixObjectEditor<AdsContextlessCommandDef> {

    @EditorFactoryRegistration
    public static final class Factory implements IEditorFactory<AdsContextlessCommandDef> {

        @Override
        public IRadixObjectEditor<AdsContextlessCommandDef> newInstance(AdsContextlessCommandDef cmd) {
            return new AdsContextlessCommandEditor(cmd);
        }
    }
    private AdsContextlessCommandCodeEditor codeEditor;
    private ExtendableTextField profileEditor;
    

    /** Creates new form AdsEnumEditorView */
    public AdsContextlessCommandEditor(AdsContextlessCommandDef cmd) {
        super(cmd);

        initComponents();
        codeEditor = new AdsContextlessCommandCodeEditor();
        mainPane = new javax.swing.JTabbedPane();
        mainPane.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                Component selectedComponent = mainPane.getSelectedComponent();
                if (selectedComponent instanceof AdsContextlessCommandCodeEditor){
                    ((AdsContextlessCommandCodeEditor)selectedComponent).updateProfile(getCommand());
                }
            }
        });
        setLayout(new BorderLayout());
        add(mainPane, BorderLayout.CENTER);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 347, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 262, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private javax.swing.JTabbedPane mainPane;
    private javax.swing.JScrollPane scrollPane;
    private AdsCommandCommonPropertiesPanel commonProps;

    public AdsContextlessCommandDef getCommand() {
        return getRadixObject();
    }

    @Override
    public boolean open(OpenInfo info) {
        final AdsContextlessCommandDef command = getCommand();
        
        mainPane.removeAll();
        if (commonProps != null){
            commonProps.getDataTypeEditor().removeInTypeChangeListener(natureListener);
        }
        commonProps = new AdsCommandCommonPropertiesPanel();
        scrollPane = new javax.swing.JScrollPane();
        JPanel propContainer = new JPanel();
        propContainer.setLayout(new BoxLayout(propContainer, BoxLayout.X_AXIS));
        propContainer.add(Box.createHorizontalStrut(10));
        commonProps.setAlignmentX(0);
        commonProps.setAlignmentY(0);
        propContainer.add(commonProps);
        propContainer.add(Box.createHorizontalStrut(10));
        scrollPane.setViewportView(propContainer);

        mainPane.addTab(commonProps.getName(), scrollPane);
        
        codeEditor.open(info, command);
        toggelCodeTab();
        
        commonProps.open(command);
        if (isCodeVisible()){
            if (info.getTarget() == command.getSource() ||
                    command.getSource().isParentOf(info.getTarget())) {
                mainPane.setSelectedComponent(codeEditor);
            }
        }
        commonProps.getDataTypeEditor().addInTypeChangeListener(natureListener);
        return super.open(info);
    }

    @Override
    public void update() {
        commonProps.update();
        if (toggelCodeTab()){
            codeEditor.update(getCommand());
        }
    }
    
    private boolean isCodeVisible(){
        return getCommand().getData().getNature() != ECommandNature.FORM_IN_OUT;
    }
    
    private boolean toggelCodeTab(){
        boolean isContainsCodeEditor = mainPane.indexOfComponent(codeEditor) > 0;
        boolean isVisible = isCodeVisible();
        if (!isContainsCodeEditor && isVisible){
            mainPane.add(NbBundle.getMessage(AdsContextlessCommandEditor.class, "Source-Tip"), codeEditor);
            return true;
        } else {
            if (isContainsCodeEditor && !isVisible){
                mainPane.remove(codeEditor);
                return true;
            }
        }
        return false;
    }
    
    private ChangeListener natureListener =  new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                toggelCodeTab();
            }
            
    };
}
