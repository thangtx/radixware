/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.sql;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.radixware.kernel.common.defs.ads.clazz.sql.AdsCursorClassDef;
import org.radixware.kernel.common.defs.ads.clazz.sql.AdsSqlClassDef;
import org.radixware.kernel.designer.common.dialogs.components.DescriptionPanel;
import org.radixware.kernel.designer.common.general.editors.OpenInfo;


public class AdsSqlClassDescriptionPanel extends JPanel {

    AdsSqlClassDef sqlClass;

    /**
     * Creates new form AdsClassDescriptionPanel
     */
    public AdsSqlClassDescriptionPanel() {
        initComponents();
        setBorder(BorderFactory.createEtchedBorder());
        spPscs.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                sqlClass.setCacheSize((Integer) spPscs.getValue());
            }
        });
        cbUniDirect.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (sqlClass instanceof AdsCursorClassDef) {
                    ((AdsCursorClassDef) sqlClass).setUniDirect(cbUniDirect.isSelected());
                }
            }
        });

        cbReadOnly.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sqlClass.setDbReadOnly(cbReadOnly.isSelected());
            }
        });
        cbUniDirect.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                super.focusGained(e);
            }
        });
        cbDeprecated.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                sqlClass.getAccessFlags().setDeprecated(cbDeprecated.isSelected());
            }
        });
    }

    public void update() {
        accessBox.open(sqlClass);
        getDescriptionPanel().open(sqlClass);
        setReadOnly(sqlClass.isReadOnly());
        cbDeprecated.setSelected(sqlClass.getAccessFlags().isDeprecated());
        spPscs.setValue(sqlClass.getCacheSize());
        if (cbUniDirect.isVisible()) {
            cbUniDirect.setSelected(((AdsCursorClassDef) sqlClass).isUniDirect());
        }

        if (cbReadOnly.isVisible()) {
            cbReadOnly.setSelected(sqlClass.isDbReadOnly());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        accessPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        accessBox = new org.radixware.kernel.designer.ads.common.dialogs.AccessEditPanel();
        cbReadOnly = new javax.swing.JCheckBox();
        lbPscs = new javax.swing.JLabel();
        spPscs = new javax.swing.JSpinner();
        cbDeprecated = new javax.swing.JCheckBox();
        cbUniDirect = new javax.swing.JCheckBox();
        descriptionPanel = new DescriptionPanel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        accessPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 8, 4, 8));
        accessPanel.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText(org.openide.util.NbBundle.getMessage(AdsSqlClassDescriptionPanel.class, "AccessibilityBox-Tip")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        accessPanel.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        accessPanel.add(accessBox, gridBagConstraints);

        cbReadOnly.setText(org.openide.util.NbBundle.getMessage(AdsSqlClassDescriptionPanel.class, "AdsSqlClassDescriptionPanel.cbReadOnly.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        accessPanel.add(cbReadOnly, gridBagConstraints);

        lbPscs.setText(org.openide.util.NbBundle.getMessage(AdsSqlClassDescriptionPanel.class, "AdsSqlClassDescriptionPanel.lbPscs.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        accessPanel.add(lbPscs, gridBagConstraints);

        spPscs.setValue(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        accessPanel.add(spPscs, gridBagConstraints);

        cbDeprecated.setText(org.openide.util.NbBundle.getMessage(AdsSqlClassDescriptionPanel.class, "AdsSqlClassDescriptionPanel.cbDeprecated.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        accessPanel.add(cbDeprecated, gridBagConstraints);

        cbUniDirect.setText(org.openide.util.NbBundle.getMessage(AdsSqlClassDescriptionPanel.class, "AdsSqlClassDescriptionPanel.cbUniDirect.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        accessPanel.add(cbUniDirect, gridBagConstraints);

        add(accessPanel);

        descriptionPanel.setLayout(null);
        add(descriptionPanel);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.radixware.kernel.designer.ads.common.dialogs.AccessEditPanel accessBox;
    private javax.swing.JPanel accessPanel;
    private javax.swing.JCheckBox cbDeprecated;
    private javax.swing.JCheckBox cbReadOnly;
    private javax.swing.JCheckBox cbUniDirect;
    private javax.swing.JPanel descriptionPanel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lbPscs;
    private javax.swing.JSpinner spPscs;
    // End of variables declaration//GEN-END:variables

    public void open(AdsSqlClassDef sqlClass, OpenInfo info) {
        this.sqlClass = sqlClass;

        if (sqlClass instanceof AdsCursorClassDef) {
            cbUniDirect.setVisible(true);
        } else {
            cbUniDirect.setVisible(false);
        }
        update();
    }

    protected void setReadOnly(boolean readOnly) {
        boolean enabled = !readOnly;
        accessBox.setEnabled(enabled);
        cbReadOnly.setEnabled(enabled);
        cbUniDirect.setEnabled(enabled);
        getDescriptionPanel().setReadonly(readOnly);
        spPscs.setEnabled(enabled);
    }

    private DescriptionPanel getDescriptionPanel() {
        return (DescriptionPanel) descriptionPanel;
    }
}
