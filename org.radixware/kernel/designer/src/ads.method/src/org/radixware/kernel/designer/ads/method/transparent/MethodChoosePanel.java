/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * MethodChoosePanel.java
 *
 * Created on Dec 16, 2008, 2:26:53 PM
 */
package org.radixware.kernel.designer.ads.method.transparent;

import java.awt.Component;
import java.util.Collection;
import java.util.HashSet;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.openide.util.ChangeSupport;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.ads.clazz.AdsClassDef;
import org.radixware.kernel.common.defs.ads.platform.RadixPlatformClass;
import org.radixware.kernel.common.enums.EAccess;
import org.radixware.kernel.designer.common.dialogs.components.state.StateManager;
import org.radixware.kernel.designer.common.dialogs.utils.AdsClassMembersUtils;
import org.radixware.kernel.designer.common.dialogs.utils.ModalDisplayer;


@Deprecated
public class MethodChoosePanel extends javax.swing.JPanel {

    private class MethodChooseDisplayer extends ModalDisplayer
            implements ChangeListener {

        public MethodChooseDisplayer(MethodChoosePanel panel) {
            super(panel);
            panel.addChangeListener(this);
            getDialogDescriptor().setValid(panel.isComplete());
            setTitle(NbBundle.getMessage(MethodChoosePanel.class, "ChooseTitle"));
        }

        @Override
        protected void apply() {
        }
        private RadixPlatformClass.Method selected;

        @Override
        public void stateChanged(ChangeEvent e) {
            if (e.getSource().equals(getComponent())) {
                getDialogDescriptor().setValid(((MethodChoosePanel) getComponent()).isComplete());
                selected = ((MethodChoosePanel) getComponent()).getSelectedMethod();
            }
        }

        public RadixPlatformClass.Method getSelected() {
            return selected;
        }
    }

    public RadixPlatformClass.Method chooseMethod() {
        final MethodChooseDisplayer displayer = new MethodChooseDisplayer(this);
        if (displayer.showModal()) {
            return displayer.getSelected();
        }
        return null;
    }
    private AdsClassDef adscontext;

    /**
     * Creates new form MethodChoosePanel
     */
    public MethodChoosePanel(Collection<RadixPlatformClass.Method> list, AdsClassDef adscontext) {
        initComponents();
        this.adscontext = adscontext;
        methodList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                changeSupport.fireChange();
            }
        });
        methodList.setCellRenderer(new PlatformMethodRenderer());
        loadMethodList(list);
    }

    private void loadMethodList(Collection<RadixPlatformClass.Method> list) {
        if (list != null) {
            HashSet<AdsClassMembersUtils.TransparentMethodInfo> methods = new HashSet<AdsClassMembersUtils.TransparentMethodInfo>();
            for (RadixPlatformClass.Method m : list) {
                if (!m.getAccess().equals(EAccess.PRIVATE)) {
                    methods.add(new AdsClassMembersUtils.TransparentMethodInfo(m, adscontext));
                }
            }
            methodList.setModel(AdsClassMembersUtils.TransparentMethodItem.getModelFor(methods));
        } else {
            methodList.setModel(AdsClassMembersUtils.TransparentMethodItem.getEmptyModel());
        }
    }

    RadixPlatformClass.Method getSelectedMethod() {
        if (methodList.getSelectedIndex() != -1
                && methodList.getModel() instanceof AdsClassMembersUtils.MethodItemModel) {
            AdsClassMembersUtils.TransparentMethodItem item = (AdsClassMembersUtils.TransparentMethodItem) methodList.getSelectedValue();
            return item.getMethod();
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        methodList = new javax.swing.JList();
        stateDisplayer2 = new org.radixware.kernel.designer.common.dialogs.components.state.StateDisplayer();

        jScrollPane1.setViewportView(methodList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(stateDisplayer2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stateDisplayer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList methodList;
    private org.radixware.kernel.designer.common.dialogs.components.state.StateDisplayer stateDisplayer2;
    // End of variables declaration//GEN-END:variables
    private final StateManager stateManager = new StateManager(this);

    public boolean isComplete() {
        if (getSelectedMethod() != null) {
            stateManager.ok();
            return true;
        } else {
            stateManager.error("");
            return false;
        }
    }
    private ChangeSupport changeSupport = new ChangeSupport(this);

    public final void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    public final void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }

    private class PlatformMethodRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            setText(value.toString());
            if (value instanceof AdsClassMembersUtils.TransparentMethodItem) {
                AdsClassMembersUtils.TransparentMethodItem item = (AdsClassMembersUtils.TransparentMethodItem) value;
                Icon icon = item.getMethodInfo().getIcon();
                if (icon != null) {
                    setIcon(icon);
                } else {
                    setIcon(null);
                }
            }
            return this;
        }
    }
}
