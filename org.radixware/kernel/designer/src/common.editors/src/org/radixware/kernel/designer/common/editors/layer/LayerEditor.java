/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.editors.layer;

import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import org.radixware.kernel.common.repository.Layer;
import javax.swing.event.ChangeListener;
import org.openide.util.NbBundle;
import org.radixware.kernel.designer.common.annotations.registrators.EditorFactoryRegistration;
import org.radixware.kernel.designer.common.dialogs.components.state.StateDisplayer;
import org.radixware.kernel.designer.common.editors.RadixObjectModalEditor;
import org.radixware.kernel.designer.common.general.editors.IEditorFactory;
import org.radixware.kernel.designer.common.general.editors.OpenInfo;


public final class LayerEditor extends RadixObjectModalEditor<Layer> {

    private final PropertiesPanel propPanel;
    private final LicensesPanel licensesPanel;
    private final TargetDatabasesPanel targetDatabasesPanel;

    public Layer getLayer() {
        return getRadixObject();
    }

    public LayerEditor(Layer layer) {
        super(layer);
        initComponents();

        this.propPanel = new PropertiesPanel();
        this.licensesPanel = new LicensesPanel();
        this.targetDatabasesPanel = new TargetDatabasesPanel();

        JTabbedPane pane = new JTabbedPane();
        pane.add("General", propPanel);
        pane.add("Licenses", licensesPanel);
        pane.add("Target Databases", targetDatabasesPanel);
        this.add(pane);
        this.add(new StateDisplayer());
    }

    @Override
    public String getTitle() {
        return NbBundle.getMessage(LayerEditor.class, "LayerEditor-Title") + " '" + getRadixObject().getName() + "'";
    }

    @Override
    public boolean open(OpenInfo openInfo) {
        this.propPanel.open(getLayer());
        this.propPanel.setVisible(true);

        propPanel.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                LayerEditor.this.setComplete(propPanel.isComplete());
            }
        });

        propPanel.requestFocusInWindow();
        propPanel.isComplete();
        setComplete(propPanel.isComplete());

        licensesPanel.open(getLayer().getLicenses(), getLayer().isReadOnly());
        targetDatabasesPanel.open(getLayer(), getLayer().isReadOnly());

        return super.open(openInfo);
    }

    @Override
    protected void apply() {
        propPanel.applySetup();
        licensesPanel.apply();
        targetDatabasesPanel.apply();
    }

    @Override
    public void update() {
        //do nothing
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setAutoscrolls(true);
        setMinimumSize(new java.awt.Dimension(427, 256));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @EditorFactoryRegistration
    public static final class Factory implements IEditorFactory<Layer> {

        @Override
        public LayerEditor newInstance(Layer layer) {
            return new LayerEditor(layer);
        }
    }

    @Override
    public boolean isOpeningAfterNewObjectCreationRequired() {
        return false;
    }

    @Override
    public boolean isCancelable() {
        return true;
    }
}
