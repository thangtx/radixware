/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.editors.sqml.editors;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashSet;
import java.util.Set;
import org.radixware.kernel.common.defs.ads.clazz.sql.AdsSqlClassDef;
import org.radixware.kernel.common.defs.ads.clazz.sql.AdsSqlClassDef.UsedTables;
import org.radixware.kernel.common.defs.dds.DdsReferenceDef;
import org.radixware.kernel.common.scml.Scml;
import org.radixware.kernel.common.sqml.tags.JoinTag;
import org.radixware.kernel.common.sqml.tags.JoinTag.Type;
import org.radixware.kernel.common.types.Id;


public class JoinTagEditor extends SqmlTagEditor<JoinTag> {

    private static final String EMPTY_ALIAS = "<none>";
    private JoinTag.Type selectedType;

    /** Creates new form JoinTagEdtitorPanel */
    public JoinTagEditor() {
        initComponents();
        rbLeft.addActionListener(new TypeSelector(JoinTag.Type.LEFT));
        rbRight.addActionListener(new TypeSelector(JoinTag.Type.RIGHT));
        rbFull.addActionListener(new TypeSelector(JoinTag.Type.FULL));
        rbInner.addActionListener(new TypeSelector(JoinTag.Type.INNER));

    }

    private class TypeSelector implements ActionListener {

        private JoinTag.Type type;

        public TypeSelector(Type type) {
            this.type = type;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            selectedType = type;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lbRef = new javax.swing.JLabel();
        lbChild = new javax.swing.JLabel();
        lbChildAlias = new javax.swing.JLabel();
        coChildAlias = new javax.swing.JComboBox();
        dlRef = new org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel();
        dlChild = new org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel();
        lbParent = new javax.swing.JLabel();
        dlParent = new org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel();
        lbParentAlias = new javax.swing.JLabel();
        coParentAlias = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        rbLeft = new javax.swing.JRadioButton();
        rbRight = new javax.swing.JRadioButton();
        rbFull = new javax.swing.JRadioButton();
        rbInner = new javax.swing.JRadioButton();

        setPreferredSize(new java.awt.Dimension(500, 300));

        lbRef.setText(org.openide.util.NbBundle.getMessage(JoinTagEditor.class, "JoinTagEditor.lbRef.text")); // NOI18N

        lbChild.setText(org.openide.util.NbBundle.getMessage(JoinTagEditor.class, "JoinTagEditor.lbChild.text")); // NOI18N

        lbChildAlias.setText(org.openide.util.NbBundle.getMessage(JoinTagEditor.class, "JoinTagEditor.lbChildAlias.text")); // NOI18N

        coChildAlias.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbParent.setText(org.openide.util.NbBundle.getMessage(JoinTagEditor.class, "JoinTagEditor.lbParent.text")); // NOI18N

        lbParentAlias.setText(org.openide.util.NbBundle.getMessage(JoinTagEditor.class, "JoinTagEditor.lbParentAlias.text")); // NOI18N

        coParentAlias.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JoinTagEditor.class, "JoinTagEditor.jPanel1.border.title"))); // NOI18N

        buttonGroup1.add(rbLeft);
        rbLeft.setText(org.openide.util.NbBundle.getMessage(JoinTagEditor.class, "JoinTagEditor.rbLeft.text")); // NOI18N

        buttonGroup1.add(rbRight);
        rbRight.setText(org.openide.util.NbBundle.getMessage(JoinTagEditor.class, "JoinTagEditor.rbRight.text")); // NOI18N

        buttonGroup1.add(rbFull);
        rbFull.setText(org.openide.util.NbBundle.getMessage(JoinTagEditor.class, "JoinTagEditor.rbFull.text")); // NOI18N

        buttonGroup1.add(rbInner);
        rbInner.setText(org.openide.util.NbBundle.getMessage(JoinTagEditor.class, "JoinTagEditor.rbInner.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbLeft)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbRight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbFull)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbInner)
                .addContainerGap(229, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbLeft)
                    .addComponent(rbRight)
                    .addComponent(rbFull)
                    .addComponent(rbInner))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbParentAlias)
                            .addComponent(lbRef)
                            .addComponent(lbChild)
                            .addComponent(lbChildAlias)
                            .addComponent(lbParent))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dlRef, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                            .addComponent(dlChild, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                            .addComponent(coChildAlias, 0, 340, Short.MAX_VALUE)
                            .addComponent(coParentAlias, 0, 340, Short.MAX_VALUE)
                            .addComponent(dlParent, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbRef)
                    .addComponent(dlRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbChild)
                    .addComponent(dlChild, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbChildAlias)
                    .addComponent(coChildAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbParent)
                    .addComponent(dlParent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbParentAlias)
                    .addComponent(coParentAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox coChildAlias;
    private javax.swing.JComboBox coParentAlias;
    private org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel dlChild;
    private org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel dlParent;
    private org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel dlRef;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbChild;
    private javax.swing.JLabel lbChildAlias;
    private javax.swing.JLabel lbParent;
    private javax.swing.JLabel lbParentAlias;
    private javax.swing.JLabel lbRef;
    private javax.swing.JRadioButton rbFull;
    private javax.swing.JRadioButton rbInner;
    private javax.swing.JRadioButton rbLeft;
    private javax.swing.JRadioButton rbRight;
    // End of variables declaration//GEN-END:variables

    @Override
    protected String getTitleKey() {
        return "join-tag-editor-panel-title";
    }

    @Override
    protected boolean tagDefined() {
        return true;
    }

    @Override
    public void setReadOnly(boolean readOnly) {
        return;
    }

    @Override
    protected void afterOpen() {
        DdsReferenceDef ref = getReference();
        dlRef.open(ref, getTag().getReferenceId());
        dlChild.open(ref.findChildTable(getTag()), ref.getChildTableId());
        dlParent.open(ref.findParentTable(getTag()), ref.getParentTableId());

        coChildAlias.removeAllItems();
        for (String alias : calculatePossibleAliases(ref.getChildTableId())) {
            coChildAlias.addItem(alias);
        }

        AliasCookie aliasCookie = getOpenInfo().getLookup().lookup(AliasCookie.class);
        if (aliasCookie != null) {
            String prefferedAlias = aliasCookie.getParentAlias();
            if (prefferedAlias != null) {
                coChildAlias.setSelectedItem(prefferedAlias);
            }
        }

        coParentAlias.removeAllItems();
        for (String alias : calculatePossibleAliases(ref.getParentTableId())) {
            coParentAlias.addItem(alias);
        }

        switch (getTag().getType()) {
            case LEFT:
                rbLeft.setSelected(true);
                break;
            case RIGHT:
                rbRight.setSelected(true);
                break;
            case FULL:
                rbFull.setSelected(true);
                break;
            case INNER:
                rbInner.setSelected(true);
                break;
        }

        selectedType = getTag().getType();

    }

    private String[] calculatePossibleAliases(Id tableId) {
        Set<String> aliases = new HashSet<String>();
        if (getSqlClass() != null) {
            UsedTables usedTables = getSqlClass().getUsedTables();
            for (AdsSqlClassDef.UsedTable usedTable : usedTables) {
                if (tableId.equals(usedTable.getTableId())) {
                    if (usedTable.getAlias() == null || "".equals(usedTable.getAlias())) {
                        aliases.add(EMPTY_ALIAS);
                    } else {
                        aliases.add(usedTable.getAlias());
                    }
                }
            }
        }
        if (aliases.size() == 0) {
            aliases.add(EMPTY_ALIAS);
        }
        return aliases.toArray(new String[0]);
    }

    private DdsReferenceDef getReference() {
        DdsReferenceDef ref = getTag().findReference();
        if (ref == null) {
            ref = getOpenInfo().lookupDefinitionById(DdsReferenceDef.class, getTag().getReferenceId());
        }
        return ref;
    }

    private AdsSqlClassDef getSqlClass() {
        AdsSqlClassDef sqlClass = null;
        Scml scml = getTag().getOwnerScml();
        if (scml != null && scml.getOwnerDefinition() instanceof AdsSqlClassDef) {
            sqlClass = (AdsSqlClassDef) scml.getOwnerDefinition();
        } else {
            sqlClass = getOpenInfo().getLookup().lookup(AdsSqlClassDef.class);
        }
        return sqlClass;
    }

    @Override
    protected boolean beforeShowModal() {
        return true;
    }

    @Override
    protected void applyChanges() {
        String childAlias = (String) coChildAlias.getSelectedItem();
        if (childAlias.equals(EMPTY_ALIAS)) {
            childAlias = "";
        }
        getTag().setChildTableAlias(childAlias);

        String parentAlias = (String) coParentAlias.getSelectedItem();
        if (parentAlias.equals(EMPTY_ALIAS)) {
            parentAlias = "";
        }
        getTag().setParentTableAlias(parentAlias);

        getTag().setType(selectedType);

    }

    public static class AliasCookie {

        private String parentAlias;
        private String childAlias;

        public AliasCookie(String parentAlias, String childAlias) {
            this.parentAlias = parentAlias;
            this.childAlias = childAlias;
        }

        public String getChildAlias() {
            return childAlias;
        }

        public String getParentAlias() {
            return parentAlias;
        }
    }
}
