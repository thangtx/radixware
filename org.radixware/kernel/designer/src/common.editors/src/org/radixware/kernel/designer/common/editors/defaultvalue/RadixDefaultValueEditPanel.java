/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.editors.defaultvalue;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.util.ChangeSupport;
import org.radixware.kernel.common.defs.ExtendableDefinitions.EScope;
import org.radixware.kernel.common.defs.IEnumDef;
import org.radixware.kernel.common.defs.value.RadixDefaultValue;
import org.radixware.kernel.common.defs.value.ValAsStr;
import org.radixware.kernel.common.enums.ERadixDefaultValueChoice;
import org.radixware.kernel.common.enums.EValType;


public class RadixDefaultValueEditPanel extends javax.swing.JPanel {

    private boolean isNull = true;
    private volatile boolean updating = false;
    private EValType valType = EValType.STR;
    private ChangeSupport changeSupport = new ChangeSupport(this);

    /** Creates new form RadixDefaultValueEditPanel */
    public RadixDefaultValueEditPanel() {
        initComponents();

        propertyValueEditPanel.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent evt) {
                valAsStrEditPanelStateChanged();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        rbSysDate = new javax.swing.JRadioButton();
        rbSysTimeStamp = new javax.swing.JRadioButton();
        rbValAsStr = new javax.swing.JRadioButton();
        propertyValueEditPanel = new org.radixware.kernel.designer.common.dialogs.components.PropertyValueEditPanel();
        exprRadioButton = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        expressionEditorPane = new javax.swing.JEditorPane();

        buttonGroup.add(rbSysDate);
        rbSysDate.setText(org.openide.util.NbBundle.getMessage(RadixDefaultValueEditPanel.class, "RadixDefaultValueEditPanel.rbSysDate.text")); // NOI18N
        rbSysDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSysDateActionPerformed(evt);
            }
        });

        buttonGroup.add(rbSysTimeStamp);
        rbSysTimeStamp.setText(org.openide.util.NbBundle.getMessage(RadixDefaultValueEditPanel.class, "RadixDefaultValueEditPanel.rbSysTimeStamp.text")); // NOI18N
        rbSysTimeStamp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSysTimeStampActionPerformed(evt);
            }
        });

        buttonGroup.add(rbValAsStr);
        rbValAsStr.setSelected(true);
        rbValAsStr.setText(org.openide.util.NbBundle.getMessage(RadixDefaultValueEditPanel.class, "RadixDefaultValueEditPanel.rbValAsStr.text")); // NOI18N
        rbValAsStr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbValAsStrActionPerformed(evt);
            }
        });

        buttonGroup.add(exprRadioButton);
        exprRadioButton.setText(org.openide.util.NbBundle.getMessage(RadixDefaultValueEditPanel.class, "RadixDefaultValueEditPanel.exprRadioButton.text")); // NOI18N
        exprRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exprRadioButtonActionPerformed(evt);
            }
        });

        expressionEditorPane.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                expressionEditorPaneCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(expressionEditorPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(rbValAsStr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertyValueEditPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSysDate)
                    .addComponent(rbSysTimeStamp))
                .addContainerGap(191, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(exprRadioButton)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbValAsStr, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(propertyValueEditPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(rbSysDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbSysTimeStamp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exprRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void valAsStrEditPanelStateChanged() {
        if (!updating) {
            isNull = false;
            changeSupport.fireChange();
        }
    }

    private void rbValAsStrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbValAsStrActionPerformed
        if (!updating) {
            isNull = false;
            propertyValueEditPanel.setEnabled(true);
            expressionEditorPane.setEnabled(false);
            changeSupport.fireChange();
        }
    }//GEN-LAST:event_rbValAsStrActionPerformed

    private void rbSysDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSysDateActionPerformed
        if (!updating) {
            isNull = false;
            propertyValueEditPanel.setEnabled(false);
            expressionEditorPane.setEnabled(false);
            propertyValueEditPanel.setValue(valType, ValAsStr.Factory.loadFrom(""));
            changeSupport.fireChange();
        }
    }//GEN-LAST:event_rbSysDateActionPerformed

    private void rbSysTimeStampActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSysTimeStampActionPerformed
        if (!updating) {
            isNull = false;
            propertyValueEditPanel.setEnabled(false);
            expressionEditorPane.setEnabled(false);
            propertyValueEditPanel.setValue(valType, ValAsStr.Factory.loadFrom(""));
            changeSupport.fireChange();
        }
    }//GEN-LAST:event_rbSysTimeStampActionPerformed
    private void exprRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exprRadioButtonActionPerformed
        if (!updating) {
            isNull = false;
            propertyValueEditPanel.setEnabled(false);
            expressionEditorPane.setEnabled(true);

            propertyValueEditPanel.setValue(valType, ValAsStr.Factory.loadFrom("")); 

            changeSupport.fireChange();
        }
    }//GEN-LAST:event_exprRadioButtonActionPerformed

    private void expressionEditorPaneCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_expressionEditorPaneCaretUpdate
        if (!updating) {
            isNull = false;
            changeSupport.fireChange();
        }
    }//GEN-LAST:event_expressionEditorPaneCaretUpdate

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JRadioButton exprRadioButton;
    private javax.swing.JEditorPane expressionEditorPane;
    private javax.swing.JScrollPane jScrollPane1;
    private org.radixware.kernel.designer.common.dialogs.components.PropertyValueEditPanel propertyValueEditPanel;
    private javax.swing.JRadioButton rbSysDate;
    private javax.swing.JRadioButton rbSysTimeStamp;
    private javax.swing.JRadioButton rbValAsStr;
    // End of variables declaration//GEN-END:variables

    public void addChangeListener(ChangeListener listener) {
        changeSupport.addChangeListener(listener);
    }

    public void removeChangeListener(ChangeListener listener) {
        changeSupport.removeChangeListener(listener);
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        rbValAsStr.setEnabled(enabled);

        boolean valEnabled = enabled && rbValAsStr.isSelected();
        propertyValueEditPanel.setEnabled(valEnabled);

        boolean rbEnabled = enabled && (valType == EValType.DATE_TIME);
        rbSysDate.setEnabled(rbEnabled);
        rbSysTimeStamp.setEnabled(rbEnabled);

        exprRadioButton.setEnabled(enabled);
        expressionEditorPane.setEnabled(enabled && exprRadioButton.isSelected());
    }

    public RadixDefaultValue getValue() {
        RadixDefaultValue defValue = null;
        if (!isNull) {
            if (rbValAsStr.isSelected()) {
                ValAsStr valAsStr = propertyValueEditPanel.getValue();
                defValue = RadixDefaultValue.Factory.newValAsStr(valAsStr);
            } else if (rbSysDate.isSelected()) {
                defValue = RadixDefaultValue.Factory.newDateTime();
            } else if (rbSysTimeStamp.isSelected()) {
                defValue = RadixDefaultValue.Factory.newExactDateTime();
            } else {
                defValue = RadixDefaultValue.Factory.newExpression(expressionEditorPane.getText());
            }
        }
        return defValue;
    }

    public void setEnum(IEnumDef enumDef, RadixDefaultValue defValue) {
        updating = true;
        this.valType = enumDef.getItemType();
        this.isNull = (defValue == null);
        rbValAsStr.setSelected(true);
        if (!isNull) {
            propertyValueEditPanel.setEnum(enumDef, defValue.getValAsStr());
        } else {
            propertyValueEditPanel.setNullAble(true);
            propertyValueEditPanel.setEnum(enumDef, null);
        }
        setEnabled(this.isEnabled());
//        boolean enabled = this.isEnabled() && (valType == EValType.DATE_TIME);
//        rbSysDate.setEnabled(enabled);
//        rbSysTimeStamp.setEnabled(enabled);
//        exprRadioButton.setEnabled(this.isEnabled());
//        changeSupport.fireChange();
        updating = false;
    }

    public void setValue(EValType valType, RadixDefaultValue defValue) {
        updating = true;
        this.valType = valType;
        this.isNull = (defValue == null);
        if (!isNull) {
            ERadixDefaultValueChoice choice = defValue.getChoice();
            switch (choice) {
                case DATE_TIME:
                    rbSysDate.setSelected(true);
                    break;
                case EXACT_DATE_TIME:
                    rbSysTimeStamp.setSelected(true);
                    break;
                case VAL_AS_STR:
                    rbValAsStr.setSelected(true);
                    propertyValueEditPanel.setValue(valType, defValue.getValAsStr());
                    break;
                case EXPRESSION:
                    exprRadioButton.setSelected(true);
                    expressionEditorPane.setText(defValue.getExpression());
            }
        } else {
            rbValAsStr.setSelected(true);
            propertyValueEditPanel.setNullAble(true);
            propertyValueEditPanel.setValue(valType, null);
        }
        setEnabled(this.isEnabled());
//        boolean enabled = this.isEnabled() && (valType == EValType.DATE_TIME);
//        rbSysDate.setEnabled(enabled);
//        rbSysTimeStamp.setEnabled(enabled);
//        exprRadioButton.setEnabled(this.isEnabled());
//        changeSupport.fireChange();
        updating = false;
    }
}
