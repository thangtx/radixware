/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * EnumEditor.java
 *
 * Created on Jul 29, 2009, 1:47:47 PM
 */

package org.radixware.kernel.designer.common.editors.editmask;

import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.radixware.kernel.common.defs.ExtendableDefinitions.EScope;
import org.radixware.kernel.common.defs.ads.clazz.presentation.editmask.EditMask;
import org.radixware.kernel.common.defs.ads.clazz.presentation.editmask.EditMaskEnum;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumDef;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumItemDef;
import org.radixware.kernel.common.enums.EEditMaskEnumCorrection;
import org.radixware.kernel.common.enums.EEditMaskEnumOrder;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ConfigureDefinitionListCfg;


class EnumEditor extends Editor {

    private class SortComboBoxModel extends DefaultComboBoxModel {

        @Override
        public int getSize() {
            return EEditMaskEnumOrder.values().length;
        }

        @Override
        public Object getElementAt(int index) {
            return EEditMaskEnumOrder.values()[index];
        }

    }

    private class ItemListCorrectionComboBoxModel extends DefaultComboBoxModel {

        @Override
        public int getSize() {
            return EEditMaskEnumCorrection.values().length;
        }

        @Override
        public Object getElementAt(int index) {
            return EEditMaskEnumCorrection.values()[index];
        }

    }

    private boolean readOnly = false;

    /** Creates new form EnumEditor */
    public EnumEditor(EditMaskEnum editMaskEnum) {
        initComponents();

        sortComboBox.setModel(new SortComboBoxModel());
        itemListCorrectionComboBox.setModel(new ItemListCorrectionComboBoxModel());

        if (editMaskEnum != null)
            setupInitialValues(editMaskEnum);
        else {
            sortComboBox.setSelectedItem(EEditMaskEnumOrder.BY_ORDER);
            itemListCorrectionComboBox.setSelectedItem(EEditMaskEnumCorrection.NONE);
        }
        updateEnableState();
    }

    @Override
    public void setReadOnly(boolean readOnly) {
        this.readOnly = readOnly;
        updateEnableState();
    }

    private void setupInitialValues(EditMaskEnum editMaskEnum) {
        sortComboBox.setSelectedItem(editMaskEnum.getOrderBy());
        itemListCorrectionComboBox.setSelectedItem(editMaskEnum.getCorrection());
        AdsEnumDef enumDef = editMaskEnum.findEnum();
        if (enumDef != null) {
            AdsEnumDef.Items items = enumDef.getItems();
            List<AdsEnumItemDef> list = items.list(EScope.ALL);
            configureDefinitionListPanel.open(editMaskEnum.getCorrectionItems(), ConfigureDefinitionListCfg.Factory.newInstance(list));
        }
    }

    private void updateEnableState() {
        sortLabel.setEnabled(!readOnly);
        sortComboBox.setEnabled(!readOnly);
        itemLabel.setEnabled(!readOnly);
        itemListCorrectionComboBox.setEnabled(!readOnly);
        configureDefinitionListPanel.setEnabled(!readOnly && 
                ((EEditMaskEnumCorrection)itemListCorrectionComboBox.getSelectedItem()) != EEditMaskEnumCorrection.NONE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortLabel = new javax.swing.JLabel();
        sortComboBox = new javax.swing.JComboBox();
        itemLabel = new javax.swing.JLabel();
        itemListCorrectionComboBox = new javax.swing.JComboBox();
        configureDefinitionListPanel = new org.radixware.kernel.designer.common.dialogs.chooseobject.ConfigureDefinitionListPanel();

        sortLabel.setText(org.openide.util.NbBundle.getMessage(EnumEditor.class, "EnumEditor.sortLabel.text")); // NOI18N

        sortComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        itemLabel.setText(org.openide.util.NbBundle.getMessage(EnumEditor.class, "EnumEditor.itemLabel.text")); // NOI18N

        itemListCorrectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        itemListCorrectionComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemListCorrectionComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(configureDefinitionListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sortLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sortComboBox, 0, 283, Short.MAX_VALUE))
                            .addComponent(itemLabel)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(itemListCorrectionComboBox, 0, 330, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortLabel)
                    .addComponent(sortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(itemLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemListCorrectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(configureDefinitionListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void itemListCorrectionComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemListCorrectionComboBoxItemStateChanged
        updateEnableState();
    }//GEN-LAST:event_itemListCorrectionComboBoxItemStateChanged

    @Override
    public void apply(EditMask editMask) {
        if (!(editMask instanceof EditMaskEnum))
            return;
        EditMaskEnum editMaskEnum = (EditMaskEnum)editMask;

        if (editMaskEnum.findEnum() != null)
            editMaskEnum.setCorrectionItems(configureDefinitionListPanel.getConfigurableDefinitionIds());
        editMaskEnum.setOrderBy((EEditMaskEnumOrder)sortComboBox.getSelectedItem());
        editMaskEnum.setCorrection((EEditMaskEnumCorrection)itemListCorrectionComboBox.getSelectedItem());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.radixware.kernel.designer.common.dialogs.chooseobject.ConfigureDefinitionListPanel configureDefinitionListPanel;
    private javax.swing.JLabel itemLabel;
    private javax.swing.JComboBox itemListCorrectionComboBox;
    private javax.swing.JComboBox sortComboBox;
    private javax.swing.JLabel sortLabel;
    // End of variables declaration//GEN-END:variables

}
