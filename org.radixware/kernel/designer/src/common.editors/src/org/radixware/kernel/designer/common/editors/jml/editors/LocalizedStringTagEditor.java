/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.editors.jml.editors;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Map.Entry;
import org.openide.actions.CopyAction;
import org.openide.util.NbBundle;
import org.openide.util.actions.SystemAction;
import org.radixware.kernel.common.defs.Definition;
import org.radixware.kernel.common.defs.ExtendableDefinitions.EScope;
import org.radixware.kernel.common.defs.ads.AdsDefinition;
import org.radixware.kernel.common.defs.ads.localization.AdsMultilingualStringDef;
import org.radixware.kernel.common.enums.EIsoLanguage;
import org.radixware.kernel.common.jml.JmlTagEventCode;
import org.radixware.kernel.common.jml.JmlTagLocalizedString;
import org.radixware.kernel.designer.common.dialogs.components.BorderedCollapsablePanel;
import org.radixware.kernel.designer.common.dialogs.components.localizing.ILocalizingStringContext;
import org.radixware.kernel.designer.common.dialogs.components.localizing.LocalizingStringContextFactory;
import org.radixware.kernel.designer.common.dialogs.components.localizing.LocalizingStringEditor;
import org.radixware.kernel.designer.common.dialogs.components.localizing.LocalizingStringEditor.Options;
import org.radixware.kernel.designer.common.dialogs.scmlnb.tags.TagEditor;
import org.radixware.kernel.designer.common.dialogs.utils.RadixNbEditorUtils;
import org.radixware.kernel.designer.common.editors.jml.JmlEditor;


public class LocalizedStringTagEditor<T extends JmlTagLocalizedString> extends TagEditor<T> {

    private Definition context;
    private boolean isObject;

    public LocalizedStringTagEditor() {
        initComponents();
//        getLocalizingPanel().setExtendedMode(true);

        btCopyGuid.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                RadixNbEditorUtils.copyIdToClipboard(getTag().getStringId());
            }
        });

        btCopyGuid.setIcon(SystemAction.get(CopyAction.class).getIcon());
        chIsObject.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                isObject = chIsObject.isSelected();
            }
        });

        getLocalizingPanel().putClientProperty(BorderedCollapsablePanel.PROPERTY_BORDER, Boolean.FALSE);
//        getLocalizingPanel().getPanel().setBorder(BorderFactory.createEmptyBorder(4, 2, 2, 2));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        localizingPanel = LocalizingStringEditor.Factory.createAreaEditor(new Options()
            .add(Options.COLLAPSABLE_KEY, false).add(Options.TITLE_KEY, "Title"));
        bottomPane = new javax.swing.JPanel();
        btCopyGuid = new javax.swing.JButton();
        chIsObject = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        localizingPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));
        add(localizingPanel, java.awt.BorderLayout.CENTER);

        bottomPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));
        bottomPane.setLayout(new java.awt.BorderLayout());

        btCopyGuid.setText(org.openide.util.NbBundle.getMessage(LocalizedStringTagEditor.class, "LocalizedStringTagEditor.btCopyGuid.text")); // NOI18N
        bottomPane.add(btCopyGuid, java.awt.BorderLayout.LINE_END);

        chIsObject.setText(org.openide.util.NbBundle.getMessage(LocalizedStringTagEditor.class, "LocalizedStringTagEditor.chIsObject.text")); // NOI18N
        bottomPane.add(chIsObject, java.awt.BorderLayout.CENTER);

        add(bottomPane, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPane;
    private javax.swing.JButton btCopyGuid;
    private javax.swing.JCheckBox chIsObject;
    private javax.swing.JPanel localizingPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void afterOpen() {
        context = getOpenInfo().getLookup().lookup(JmlEditor.ContextProvider.class).getContext();
        JmlTagLocalizedString tag = getObject();
        //        final Id titleId = tag.getStringId();
        //        getLocalizingPanel().open(new HandleInfo() {
        //
        //            @Override
        //            protected boolean isBundleResettable() {
        //                return false;
        //            }
        //
        //            @Override
        //            public AdsDefinition getAdsDefinition() {
        //                return context instanceof AdsDefinition ? (AdsDefinition) context : null;
        //            }
        //
        //            @Override
        //            public Id getTitleId() {
        //                return titleId;
        //            }
        //        });
        final ILocalizingStringContext proxyContext = LocalizingStringContextFactory.newProxyInstance(
                context instanceof AdsDefinition ? (AdsDefinition) context : null, findStringDef());

        if (!proxyContext.hasValue()) {
            proxyContext.create();
        }

        getLocalizingPanel().open(proxyContext);

        if (tag instanceof JmlTagEventCode) {
            isObject = false;
            bottomPane.setVisible(false);
        } else {
            bottomPane.setVisible(true);
            isObject = tag.getType() == JmlTagLocalizedString.EType.OBJECT;
            chIsObject.setSelected(isObject);
        }
        setMinimumSize(new Dimension(350, getPreferredSize().height));
    }

    private AdsMultilingualStringDef findStringDef() {
        if (context instanceof AdsDefinition) {
            AdsMultilingualStringDef stringDef = ((AdsDefinition) context).findLocalizingBundle().getStrings().findById(getObject().getStringId(), EScope.LOCAL_AND_OVERWRITE).get();
            if (stringDef == null) {
                stringDef = getOpenInfo().getLookup().lookup(AdsMultilingualStringDef.class);
            }
            return stringDef;
        } else {
            return null;
        }
    }

    @Override
    public void applyChanges() {
        AdsMultilingualStringDef stringDef = findStringDef();
        if (stringDef == null) {
            stringDef = AdsMultilingualStringDef.Factory.newInstance();
            getObject().setStringId(stringDef.getId());
            ((AdsDefinition) context).findExistingLocalizingBundle().getStrings().getLocal().add(stringDef);
        }
        for (Entry<EIsoLanguage, String> entry : getLocalizingPanel().getValueMap().entrySet()) {
            stringDef.setValue(entry.getKey(), entry.getValue());
        }
        stringDef.setSpellCheckEnabled(getLocalizingPanel().getLocalizingStringContext().isSpellcheckEnable());

        if (isObject) {
            getObject().setType(JmlTagLocalizedString.EType.OBJECT);
        } else {
            getObject().setType(JmlTagLocalizedString.EType.SIMPLE);
        }
    }

    @Override
    public String getTitle() {
        return NbBundle.getMessage(LocalizedStringTagEditor.class, "localized-string");
    }

    @Override
    protected boolean tagDefined() {
        return true;
    }

    @Override
    public void setReadOnly(boolean readOnly) {
        getLocalizingPanel().setReadonly(readOnly);
    }

    private LocalizingStringEditor getLocalizingPanel() {
        return (LocalizingStringEditor) localizingPanel;
    }
}
