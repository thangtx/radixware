/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.eas.dialogs;

import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;
import java.util.List;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.radixware.kernel.common.client.types.Icon;
import org.radixware.kernel.common.client.views.IDialog;
import org.radixware.kernel.common.client.views.IDialogWithStandardButtons;
import org.radixware.kernel.common.client.widgets.IPeriodicalTask;
import org.radixware.kernel.common.client.widgets.IPushButton;
import org.radixware.kernel.common.client.widgets.IWidget;
import org.radixware.kernel.common.client.widgets.TimerEventHandler;
import org.radixware.kernel.common.enums.EDialogButtonType;
import org.radixware.kernel.designer.common.dialogs.utils.ModalDisplayer;


public class BaseDialog extends javax.swing.JPanel implements IDialog, IDialogWithStandardButtons {

    private String windowTitle;
    private DialogResult dialogResult;
    private Dialog dialog;
    private String objectName;
    private final List<PushButton> buttons = new LinkedList<>();

    public BaseDialog() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public String getWidowTitle() {
        return windowTitle;
    }

    @Override
    public void setWindowTitle(String string) {
        windowTitle = string;
    }

    @Override
    public Icon getWindowIcon() {
        return null;
    }

    @Override
    public void setWindowIcon(Icon icon) {
    }

    @Override
    public DialogResult execDialog() {

//        DialogDescriptor descriptor = new DialogDescriptor(this, windowTitle);
//        descriptor.setModal(true);
//        if (!buttons.isEmpty()) {
//            descriptor.setClosingOptions(buttons.toArray(new PushButton[buttons.size()]));
//            
//        }
//        dialog = DialogDisplayer.getDefault().createDialog(descriptor);

        ModalDisplayer displayer = new ModalDisplayer(this);
        if (displayer.showModal()) {
            return dialogResult = DialogResult.ACCEPTED;
        } else {
            return dialogResult = DialogResult.REJECTED;
        }

    }

    @Override
    public DialogResult execDialog(IWidget iw) {
        return execDialog();
    }

    @Override
    public void acceptDialog() {
        dialogResult = DialogResult.ACCEPTED;
        if (dialog != null) {
            dialog.setVisible(false);
        }
    }

    @Override
    public void rejectDialog() {
        dialogResult = DialogResult.REJECTED;
        if (dialog != null) {
            dialog.setVisible(false);
        }
    }

    @Override
    public DialogResult getDialogResult() {
        return dialogResult;
    }

    @Override
    public EventSupport getEventSupport() {
        return new EventSupport(this);
    }

    @Override
    public Object findChild(Class<?> type, String string) {
        return null;
    }

    @Override
    public int width() {
        return getWidth();
    }

    @Override
    public int height() {
        return getHeight();
    }

    @Override
    public void setToolTip(String string) {
    }

    @Override
    public boolean isDisposed() {
        return dialog == null;
    }

    @Override
    public String getObjectName() {
        return objectName;
    }

    @Override
    public void setObjectName(String string) {
        objectName = string;
    }

    @Override
    public IPushButton addButton(EDialogButtonType edbt) {
        PushButton button = new PushButton();
        button.setTitle(edbt.getValue());
        this.buttons.add(button);
        return button;
    }

    @Override
    public void removeButton(EDialogButtonType edbt) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public IPushButton getButton(EDialogButtonType edbt) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void clearButtons() {
        buttons.clear();
    }

    @Override
    public IPeriodicalTask startTimer(TimerEventHandler teh) {
        throw new UnsupportedOperationException("startTimer is not supported in desinger environment.");
    }

    @Override
    public void killTimer(IPeriodicalTask ipt) {
        throw new UnsupportedOperationException("killTimer is not supported in desinger environment.");
    }        
}
