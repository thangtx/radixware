<?xml version="1.0" encoding="UTF-8"?>
<AdsDefinition xmlns="http://schemas.radixware.org/adsdef.xsd" xmlns:xsc="http://schemas.radixware.org/xscml.xsd" FormatVersion="0">
  <AdsClassDefinition Id="adcIY4RHST2WFHCPAIW6JAM2JB2UI" Name="Node" Type="3" Environment="explorer">
    <AccessRules IsPublished="false">
      <Transparence Extendable="false"/>
    </AccessRules>
    <Headers>
      <Src Name="HeaderadcBBEQYEGHFVFRBHCWOO4CZMJP3M">
        <xsc:Item>
          <xsc:Java>import java.util.*;
import com.trolltech.qt.core.*;
import com.trolltech.qt.gui.*;</xsc:Java>
        </xsc:Item>
      </Src>
    </Headers>
    <Bodies>
      <Src Name="BodyadcOO5C3P4Y2NF2XMNFUUNQ7M4WHM">
        <xsc:Item>
          <xsc:Java>static final QRectF BOUNDING_RECT = new QRectF(0, 0, 100, 100);

static final QPen PEN_NORMAL = new QPen(QColor.black, 1);
static final QPen PEN_SELECTED = new QPen(QColor.red, 1);

static final QFont FONT_LABEL = new QFont("Arial", 8);
static final QColor PEN_LABEL = QColor.blue;
        
static final int ICON_SIZE = 16;

static final QLinearGradient GRADIENT_SUNKEN;
static final QLinearGradient GRADIENT_NORMAL;

static {
    GRADIENT_SUNKEN = new QLinearGradient(0, 0, 0, BOUNDING_RECT.height());
    GRADIENT_SUNKEN.setColorAt(0, QColor.white);
    GRADIENT_SUNKEN.setColorAt(1, QColor.fromRgb(185, 204, 228).lighter(120));

    GRADIENT_NORMAL = new QLinearGradient(0, 0, 0, BOUNDING_RECT.height());
    GRADIENT_NORMAL.setColorAt(0, QColor.white);
    GRADIENT_NORMAL.setColorAt(1, QColor.fromRgb(185, 204, 228).lighter(120));
}

protected final Vector&lt;</xsc:Java>
        </xsc:Item>
        <xsc:Item>
          <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
        </xsc:Item>
        <xsc:Item>
          <xsc:Java>> lRoles = new Vector&lt;</xsc:Java>
        </xsc:Item>
        <xsc:Item>
          <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
        </xsc:Item>
        <xsc:Item>
          <xsc:Java>>();
protected final Vector&lt;</xsc:Java>
        </xsc:Item>
        <xsc:Item>
          <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
        </xsc:Item>
        <xsc:Item>
          <xsc:Java>> rRoles = new Vector&lt;</xsc:Java>
        </xsc:Item>
        <xsc:Item>
          <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
        </xsc:Item>
        <xsc:Item>
          <xsc:Java>>();

protected </xsc:Java>
        </xsc:Item>
        <xsc:Item>
          <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Node"/>
        </xsc:Item>
        <xsc:Item>
          <xsc:Java> xNode;
private boolean inversed = false;</xsc:Java>
        </xsc:Item>
      </Src>
    </Bodies>
    <MethodGroup Id="cmgF4DQMJLKKRB7DE5NLVTNKCSOVA" Name="Root"/>
    <PropertyGroup Id="cpgCNB7VWO3F5EG3AAXJTON54JFCE" Name="Root"/>
    <Properties/>
    <Methods>
      <Method Id="mthREP3VJ7QSZBKDB6KWPNAPPMUS4" Name="Node" Nature="0" IsConstructor="true" IsOverride="false">
        <AccessRules/>
        <Parameters>
          <Parameter Name="userSession" Id="mprRF4CWGL5LNBBXGVLCVCSCTSCBY">
            <Type TypeId="400" extStr="org.radixware.kernel.common.client.IClientEnvironment"/>
          </Parameter>
          <Parameter Name="graph" Id="mprHO5XUGWVNFDQFIBE7R7ZYTBLUA">
            <Type TypeId="411" Path="adcHMXIRC2KYZFDRHIIULJ2M6YRLM"/>
          </Parameter>
          <Parameter Name="xNode" Id="mprOWRUEXBQZBBSLMPRSBWJ77CYRE">
            <Type TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Node"/>
          </Parameter>
        </Parameters>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>super(userSession, graph);
this.xNode = xNode;
</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthKSLCMYMP3RFRNA2FNIXJKJJE6I" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();    </xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthWCEI4JBBR5F7VFCOKZDMEIDUXU" Name="center" Nature="0" IsOverride="false">
        <AccessRules/>
        <ReturnType TypeId="400" extStr="com.trolltech.qt.core.QPointF"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>return pos().add(BOUNDING_RECT.center());</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthDZFKAV7V25FBZMIMETFYNIF5IU" Name="xNode" Nature="0" IsOverride="false">
        <AccessRules/>
        <ReturnType TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Node"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>return xNode;</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthKSLCMYMP3RFRNA2FNIXJKJJE6I" Name="syncRoles" Nature="0" IsOverride="false">
        <AccessRules Access="1"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>final Map&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="21"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> lHash = new HashMap&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="21"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>>();
final Map&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="21"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> rHash = new HashMap&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="21"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>>();

if (!</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthCHNL3HNQCVEDXNB4XDXEH6IZJY" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>()) {

// prepare roles
    List&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> xLeftRoles = new ArrayList&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>>();
    List&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> xRightRoles = new ArrayList&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>>();

    if (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mth6UQLVK7LNRDOXDAZNL47YPAFHY" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>()) { // swap
        for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole : xNode.OutRoles.RoleList) {
            if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aciUSBRRFTB3JDURIXOGK67VCGGOU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
                xLeftRoles.add(xRole);
        }

        for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole : xNode.InRoles.RoleList) {
            if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aci6UPM2JA5DFGKHMR5Y4MEHEZZ6Q" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
                xRightRoles.add(xRole);
        }

        for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole : xNode.InRoles.RoleList) {
            if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aciUSBRRFTB3JDURIXOGK67VCGGOU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
                xLeftRoles.add(xRole);
        }

        for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole : xNode.OutRoles.RoleList) {
            if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aci6UPM2JA5DFGKHMR5Y4MEHEZZ6Q" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
                xRightRoles.add(xRole);
        }
    } else {
        for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole : xNode.InRoles.RoleList) {
            if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aciUSBRRFTB3JDURIXOGK67VCGGOU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
                xLeftRoles.add(xRole);
        }

        for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole : xNode.OutRoles.RoleList) {
            if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aci6UPM2JA5DFGKHMR5Y4MEHEZZ6Q" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
                xRightRoles.add(xRole);
        }

        for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole : xNode.OutRoles.RoleList) {
            if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aciUSBRRFTB3JDURIXOGK67VCGGOU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
                xLeftRoles.add(xRole);
        }

        for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole : xNode.InRoles.RoleList) {
            if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aci6UPM2JA5DFGKHMR5Y4MEHEZZ6Q" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
                xRightRoles.add(xRole);
        }
    }
    if (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mth6UQLVK7LNRDOXDAZNL47YPAFHY" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>()) { // swap
        final List&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> xTemp = xLeftRoles;
        xLeftRoles = xRightRoles;
        xRightRoles = xTemp;
    }

    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole : xLeftRoles) {
        </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role = (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>) </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcCW52PS3PIRC5XHFOH7LKMEYVSY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcCW52PS3PIRC5XHFOH7LKMEYVSY mthCIIQ7Y5WKJDXLFVZSLSVMNHTTQ" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(lRoles, xRole.Name);
        if (role != null)
            lHash.put(xRole.Name, role);
    }

    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole : xRightRoles) {
        </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role = (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>) </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcCW52PS3PIRC5XHFOH7LKMEYVSY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcCW52PS3PIRC5XHFOH7LKMEYVSY mthCIIQ7Y5WKJDXLFVZSLSVMNHTTQ" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(rRoles, xRole.Name);
        if (role != null)
            rHash.put(xRole.Name, role);
    }

    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role : lRoles) {
        if (!lHash.containsValue(role))
            role.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU mthDQF6A2GCUBGYNGAD64R7Z34ZRA" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();
    }
    lRoles.clear();

    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role : rRoles) {
        if (!rHash.containsValue(role))
            role.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU mthDQF6A2GCUBGYNGAD64R7Z34ZRA" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();
    }
    rRoles.clear();

    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole : xLeftRoles) {
        </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role = lHash.get(xRole.Name);
        if (role == null) {
            role = new </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA mthWFR3PPJXK5FAJFOH23F5IVB5ZQ" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(userSession, xRole);
            role.setParentItem(this);
        } else
            role.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU mthWYYXWDV5BVEIBEQUMW6F6SJDIE" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(xRole);
        lRoles.add(role);
    }
    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole : xRightRoles) {
        </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role = rHash.get(xRole.Name);
        if (role == null) {
            role = new </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY mthS4DITFYOJVAQBJAQJ4QY2LSDNY" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(userSession, xRole);
            role.setParentItem(this);
        } else
            role.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU mthWYYXWDV5BVEIBEQUMW6F6SJDIE" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(xRole);
        rRoles.add(role);
    }
}

int c = lRoles.size();
if (c > 0) {
    final QRect rect = new QRect(
            (int) (-</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height() / 2),
            (int) (FONT_LABEL.pointSize() * 2) + 2,
            (int) (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.width()),
            (int) (BOUNDING_RECT.height() - FONT_LABEL.pointSize() * 2) - 4
    );

    for (int i = 0; i &lt; c; i++) {
        </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role = lRoles.get(i);
        if (c > 1 &amp;&amp; </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height() > rect.height() / c) {
            double dY = i * (rect.height() - </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height()) / (c - 1.);
            role.setPos(rect.left(), rect.top() + Math.round(dY));
        } else {
            double dY = (i + 1) * rect.height() / (c + 1.) - </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height() / 2.;
            role.setPos(Math.floor(rect.left()), Math.floor(rect.top() + dY));
        }
        role.setZValue(1 + 0.01 * i);
    }
}
c = rRoles.size();
if (c > 0) {
    final QRect rect = new QRect(
            (int) (BOUNDING_RECT.width() - </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.width() + </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height() / 2),
            (int) (FONT_LABEL.pointSize() * 2) + 2,
            (int) (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.width()),
            (int) (BOUNDING_RECT.height() - FONT_LABEL.pointSize() * 2) - 4
    );

    for (int i = 0; i &lt; c; i++) {
        </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role = rRoles.get(i);
        if (c > 1 &amp;&amp; </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height() > rect.height() / c) {
            double dY = i * (rect.height() - </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height()) / (c - 1.);
            role.setPos(rect.left(), rect.top() + Math.round(dY));
        } else {
            double dY = (i + 1) * rect.height() / (c + 1.) - </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height() / 2.;
            role.setPos(Math.floor(rect.left()), Math.floor(rect.top() + dY));
        }
        role.setZValue(1 + 0.01 * i);
    }
}

</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthTAM67XGXQJF4BPIDODFI3CYOSE" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthBK7A7OIBWNBYPGRP2CR5KWNLMA" Name="roles" Nature="0" IsOverride="false">
        <AccessRules/>
        <ReturnType TypeId="400" extStr="java.util.Vector">
          <xsc:GenericArguments>
            <xsc:Argument Alias="?">
              <xsc:Type TypeId="411" Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU"/>
            </xsc:Argument>
          </xsc:GenericArguments>
        </ReturnType>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>final Vector&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> roles = new Vector&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>>();
roles.addAll(lRoles);
roles.addAll(rRoles);
return roles;</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthFVH5NI6MSVGHLPKB377IDIIKHM" Name="pipelinePid" Nature="0" IsOverride="false">
        <AccessRules/>
        <ReturnType TypeId="411" Path="adc6MUJT675HNGATDJ477ZWLDUOHM"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>return new </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adc6MUJT675HNGATDJ477ZWLDUOHM mthGKSYUHLCB5CYVKCNUXASG6XTTQ" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcKDF543XQWZEI5DORWHNFIYCZ2A"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.loadFrom(xNode.PipelineEntityId), xNode.PipelineEntityPid);</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mth5H7AVP2QWVG77BVX2TAC4C7HAE" Name="pid" Nature="0" IsOverride="false">
        <AccessRules/>
        <ReturnType TypeId="411" Path="adc6MUJT675HNGATDJ477ZWLDUOHM"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>return new </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adc6MUJT675HNGATDJ477ZWLDUOHM mthGKSYUHLCB5CYVKCNUXASG6XTTQ" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcKDF543XQWZEI5DORWHNFIYCZ2A"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.loadFrom(xNode.EntityId), xNode.EntityPid);</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mth6UQLVK7LNRDOXDAZNL47YPAFHY" Name="inversed" Nature="0" IsOverride="false">
        <AccessRules/>
        <ReturnType TypeId="401" extStr="boolean"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>return inversed;</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthM7BFBA24TNFNJMTVEJRJRA5XCM" Name="setInversed" Nature="0" IsOverride="false">
        <AccessRules/>
        <Parameters>
          <Parameter Name="value" Id="mprF6DHR4HXV5CRLNEKXVGCJXQD4Q">
            <Type TypeId="401" extStr="boolean"/>
          </Parameter>
        </Parameters>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>if (inversed != value) {
    inversed = value;
    </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthG6JFU6YJDZG5RJETLDBATW635U" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();
    update();
}</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthG6JFU6YJDZG5RJETLDBATW635U" Name="swapRoles" Nature="0" IsOverride="false">
        <AccessRules Access="2"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>// prepare roles
List&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> xLeftRoles = new ArrayList&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>>();
List&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> xRightRoles = new ArrayList&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>>();

if (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mth6UQLVK7LNRDOXDAZNL47YPAFHY" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>()) { // swap
    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole: xNode.OutRoles.RoleList)
        if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aciUSBRRFTB3JDURIXOGK67VCGGOU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
            xLeftRoles.add(xRole);

    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole: xNode.InRoles.RoleList)
        if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aci6UPM2JA5DFGKHMR5Y4MEHEZZ6Q" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
            xRightRoles.add(xRole);

    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole: xNode.InRoles.RoleList)
        if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aciUSBRRFTB3JDURIXOGK67VCGGOU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
            xLeftRoles.add(xRole);

    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole: xNode.OutRoles.RoleList)
        if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aci6UPM2JA5DFGKHMR5Y4MEHEZZ6Q" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
            xRightRoles.add(xRole);
} else {
    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole: xNode.InRoles.RoleList)
        if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aciUSBRRFTB3JDURIXOGK67VCGGOU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
            xLeftRoles.add(xRole);

    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole: xNode.OutRoles.RoleList)
        if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aci6UPM2JA5DFGKHMR5Y4MEHEZZ6Q" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
            xRightRoles.add(xRole);

    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole: xNode.OutRoles.RoleList)
        if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aciUSBRRFTB3JDURIXOGK67VCGGOU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
            xLeftRoles.add(xRole);

    for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole: xNode.InRoles.RoleList)
        if (xRole.Side == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="acsGPTDHUKP7NFT5B577HN6A6YENU aci6UPM2JA5DFGKHMR5Y4MEHEZZ6Q" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.toString())
            xRightRoles.add(xRole);
}
if (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mth6UQLVK7LNRDOXDAZNL47YPAFHY" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>()) { // swap
    final List&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> xTemp = xLeftRoles;
    xLeftRoles = xRightRoles;
    xRightRoles = xTemp;    
}

final Vector&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> oldLeftRoles = new Vector&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>>(lRoles);
final Vector&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> oldRightRoles = new Vector&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>>(rRoles);

lRoles.clear();
rRoles.clear();

final Map&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> lHash = new HashMap&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>>();
final Map&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> rHash = new HashMap&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>>();

for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role: oldLeftRoles) {
    final </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> r = (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>)</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcCW52PS3PIRC5XHFOH7LKMEYVSY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcCW52PS3PIRC5XHFOH7LKMEYVSY mthTMZJC4DISRDHVOQS2Z5V4OQY34" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(role);
    //rRoles.add(r);
    rHash.put(r.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU mthEGZRUCFBVBFHTEYZBGBG5AJOWA" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(), r);
}

for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role: oldRightRoles) {
    final </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> r = (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>)</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcCW52PS3PIRC5XHFOH7LKMEYVSY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcCW52PS3PIRC5XHFOH7LKMEYVSY mthTMZJC4DISRDHVOQS2Z5V4OQY34" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(role);
    //lRoles.add(r);
    lHash.put(r.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU mthEGZRUCFBVBFHTEYZBGBG5AJOWA" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(), r);
}

for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole: xRightRoles) {
    final </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> r = rHash.get(xRole);
    if (r != null) {
        rRoles.add(r);
    }
}

for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole: xLeftRoles) {
    final </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> r = lHash.get(xRole);
    if (r != null) {
        lRoles.add(r);
    }
}

int c = lRoles.size();
if (c > 0) {
    final QRect rect = new QRect(
        (int)(-</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height()/2),
        (int)(FONT_LABEL.pointSize()*2) + 2,
        (int)(</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.width()),
        (int)(BOUNDING_RECT.height() - FONT_LABEL.pointSize()*2) - 4
        );
    
    for (int i = 0; i &lt; c; i++) {
        </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role = lRoles.get(i);
        if (c > 1 &amp;&amp; </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height() > rect.height() / c) {
            double dY = i * (rect.height() - </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height()) / (c - 1.);
            role.setPos(rect.left(), rect.top() + Math.round(dY));
        } else {
            double dY = (i + 1) * rect.height() / (c + 1.) - </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcUZMJJEPNJNE35DNQ3C6GVQG4MA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height()/2.;
            role.setPos(Math.floor(rect.left()), Math.floor(rect.top() + dY));
        }
        role.setZValue(1 + 0.01 * i);
    }
}
        
c = rRoles.size();
if (c > 0) {
    final QRect rect = new QRect(
        (int)(BOUNDING_RECT.width() - </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.width() + </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height()/2),
        (int)(FONT_LABEL.pointSize()*2) + 2,
        (int)(</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.width()),
        (int)(BOUNDING_RECT.height() - FONT_LABEL.pointSize()*2) - 4
        );
    
    for (int i = 0; i &lt; c; i++) {
        </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role = rRoles.get(i);        
        if (c > 1 &amp;&amp; </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height() > rect.height() / c) {
            double dY = i * (rect.height() - </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height()) / (c - 1.);
            role.setPos(rect.left(), rect.top() + Math.round(dY));
        } else {
            double dY = (i + 1) * rect.height() / (c + 1.) - </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcSXZSUUPDBRHWRCOYSYXCX75IOY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height()/2.;
            role.setPos(Math.floor(rect.left()), Math.floor(rect.top() + dY));
        }
        role.setZValue(1 + 0.01 * i);
    }
}

</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthTAM67XGXQJF4BPIDODFI3CYOSE" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthKR4BMRIJSBHLRFZ3N3EY4FOW54" Name="inputRole" Nature="0" IsOverride="false">
        <AccessRules/>
        <Parameters>
          <Parameter Name="role" Id="mpr6ZEPRPHD2VADHL53CV3UL7GK6U">
            <Type TypeId="411" Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU"/>
          </Parameter>
        </Parameters>
        <ReturnType TypeId="401" extStr="boolean"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole: xNode.InRoles.RoleList) {
    if (xRole.Name == role.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU mthEGZRUCFBVBFHTEYZBGBG5AJOWA" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>().Name)
       return true;
}
return false;</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthUERWQXMMCVCDBAUBZHYYE45GPI" Name="outputRole" Nature="0" IsOverride="false">
        <AccessRules/>
        <Parameters>
          <Parameter Name="role" Id="mpr7AI4LBE3BVHGHNZEQF55XZGIBU">
            <Type TypeId="411" Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU"/>
          </Parameter>
        </Parameters>
        <ReturnType TypeId="401" extStr="boolean"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole: xNode.OutRoles.RoleList) {
    if (xRole.Name == role.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU mthEGZRUCFBVBFHTEYZBGBG5AJOWA" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>().Name)
       return true;
}
return false;</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthTAM67XGXQJF4BPIDODFI3CYOSE" Name="adjust" Nature="0" IsOverride="true">
        <AccessRules Access="1"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role : </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthBK7A7OIBWNBYPGRP2CR5KWNLMA" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>())
    role.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU mthG32AACUL5JCLBMKSTJ4RYFX54I" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthFPUNTBY2E5EC7FNXLTMGOWHNYQ" Name="delete" Nature="0" IsOverride="true">
        <AccessRules/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>
</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="CanDeleteNodeRsDocument"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xDoc = </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcZ7ETKOF44NCLJBZPR47JS5LQK4"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcZ7ETKOF44NCLJBZPR47JS5LQK4 mth7LBEYHC24FDY3PFDLYKSCIFBC4" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(userSession, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mth5H7AVP2QWVG77BVX2TAC4C7HAE" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>());
if (!xDoc.CanDeleteNodeRs.CanDelete.booleanValue())
    throw new </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="axcTNXCEKEORVFRFDUEZO3MB5REHQ mthZMCVM47GJJDGBORSJDKFXASDVU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(xDoc.CanDeleteNodeRs.Mess);

final Vector&lt;</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>> roles = </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthBK7A7OIBWNBYPGRP2CR5KWNLMA" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();
for (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role : roles) {
    role.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU mthDQF6A2GCUBGYNGAD64R7Z34ZRA" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();
}

lRoles.clear();
rRoles.clear();

if (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcZ7ETKOF44NCLJBZPR47JS5LQK4"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcZ7ETKOF44NCLJBZPR47JS5LQK4 mthBMP4D3LWG5G6XH52QLWVEV4QNI" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(userSession, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mth5H7AVP2QWVG77BVX2TAC4C7HAE" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>()))
    scene().removeItem(this);
else
    </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthKSLCMYMP3RFRNA2FNIXJKJJE6I" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthNZX7AXISEVB75E6Q4GKNT5QFFQ" Name="edit" Nature="0" IsOverride="true">
        <AccessRules/>
        <ReturnType TypeId="401" extStr="boolean"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adc6MUJT675HNGATDJ477ZWLDUOHM"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> pid = </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mth5H7AVP2QWVG77BVX2TAC4C7HAE" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();
</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcELH54EKVCJAATNTLFHHCSVHPZU"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> classId = </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcKDF543XQWZEI5DORWHNFIYCZ2A"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.loadFrom(xNode.ClassId);
</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcELH54EKVCJAATNTLFHHCSVHPZU"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> presentationId = </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcKDF543XQWZEI5DORWHNFIYCZ2A"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.loadFrom(xNode.EditingPresentationId);

try {
    </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adc2BBVYOFJVBDTDPNKMVD7H7WLQA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> e = </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adc2BBVYOFJVBDTDPNKMVD7H7WLQA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adc2BBVYOFJVBDTDPNKMVD7H7WLQA mthATSLSO3JYFA73IAXSAKZJ4KK5I" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(pid, classId, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="400" extStr="java.util.Collections"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.singleton(presentationId), new </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcWGO4Z5SRYRHCNAPD7DNGTD3DAI mthEEYIDJQJNFEBJBD5K3TKZXIE5Y" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(userSession, graph.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcHMXIRC2KYZFDRHIIULJ2M6YRLM mthT2TS5WMORZFVZPX7O2XGPFO7DM" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>().</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adc24D3IJUTHVH7HJZFW2PSATWURU mthZ2QY4DNIOFCUPEMIZT4AEJWQ3M" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(), </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthFVH5NI6MSVGHLPKB377IDIIKHM" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(),(</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="aecX6WI554KVVCZPGNLK7CSZLOMTY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>)graph.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcHMXIRC2KYZFDRHIIULJ2M6YRLM mthT2TS5WMORZFVZPX7O2XGPFO7DM" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>()));
    </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcOV63PL34KNGY5OT2OTAY5W7H3Q"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> editor = new </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcOV63PL34KNGY5OT2OTAY5W7H3Q mthBPQ5QHXHXFGWVO34VWQYUAHATY" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(e);
    editor.exec();
} catch(Exception e) {
    </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcGPNNISYF4NG5NC4NX5ITZORVYQ"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcGPNNISYF4NG5NC4NX5ITZORVYQ mthLEP5OWV3LFDULGYALX3KD3GT6A" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(e);
    return false;
}
        
</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="NodeRsDocument"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xNodeRs = </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcZ7ETKOF44NCLJBZPR47JS5LQK4"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcZ7ETKOF44NCLJBZPR47JS5LQK4 mthJ7F2Z4JEUFHCFPIYBYALNDNMPE" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(userSession, pid);
if (xNodeRs == null || xNode == null)
    return false;
        
boolean res = !</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthJSZNWRUNHZGYFNMOSFSJOAMZCE" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(xNodeRs.NodeRs);
this.xNode = xNodeRs.NodeRs;
</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthKSLCMYMP3RFRNA2FNIXJKJJE6I" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();

return res;</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthUWISQNC5SFDNRFSCWDZQFUK6QI" Name="duplicate" Nature="0" IsOverride="true">
        <AccessRules/>
        <ReturnType TypeId="411" Path="adcS75H6U36SFG2LDRZX5GM3WS47Q"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="NodeRsDocument"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xNode = </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcZ7ETKOF44NCLJBZPR47JS5LQK4"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcZ7ETKOF44NCLJBZPR47JS5LQK4 mthAO3IFFVHNVE43FVXIUH7U6ELD4" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(userSession, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mth5H7AVP2QWVG77BVX2TAC4C7HAE" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>());
if (xNode == null)
    return null;
        
return new </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthREP3VJ7QSZBKDB6KWPNAPPMUS4" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(userSession, graph, xNode.NodeRs);</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthJSZNWRUNHZGYFNMOSFSJOAMZCE" Name="equalsNode" Nature="0" IsOverride="false">
        <AccessRules Access="2"/>
        <Parameters>
          <Parameter Name="node" Id="mprHJYKJVDR5RBIFG2C3J4YK64NEM">
            <Type TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Node"/>
          </Parameter>
        </Parameters>
        <ReturnType TypeId="401" extStr="boolean"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java><![CDATA[if (xNode.Title != node.Title || xNode.Icon != node.Icon)
    return false;

if ((xNode.InRoles == null && node.InRoles != null) || (xNode.InRoles != null && node.InRoles == null))
    return false;

if ((xNode.OutRoles == null && node.OutRoles != null) || (xNode.OutRoles != null && node.OutRoles == null))
    return false;

if (xNode.InRoles != null && node.InRoles != null) {
    if (xNode.InRoles.RoleList.size() != node.InRoles.RoleList.size())
        return false;
    for (int i=0; i<xNode.InRoles.RoleList.size(); i++) {
        ]]></xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole = xNode.InRoles.RoleList.get(i);
        </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> role = node.InRoles.RoleList.get(i);
        if (xRole.Name != role.Name || xRole.Title != role.Title || xRole.RqType != role.RqType || xRole.RsType != role.RsType || 
            xRole.Side != role.Side || xRole.Icon != role.Icon || xRole.ConnectionId != role.ConnectionId)
            return false;
    }
}

if (xNode.OutRoles != null &amp;&amp; node.OutRoles != null) {
    if (xNode.OutRoles.RoleList.size() != node.OutRoles.RoleList.size())
        return false;
    for (int i=0; i&lt;xNode.OutRoles.RoleList.size(); i++) {
        </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> xRole = xNode.OutRoles.RoleList.get(i);
        </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="451" Path="xsd6SM6ZD5MKVDEBL65ARE5Y7GKMQ" extStr="Role"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java><![CDATA[ role = node.OutRoles.RoleList.get(i);
        if (xRole.Name != role.Name || xRole.Title != role.Title || xRole.RqType != role.RqType || xRole.RsType != role.RsType || 
            xRole.Side != role.Side || xRole.Icon != role.Icon || xRole.ConnectionId != role.ConnectionId)
            return false;
    }
}

return true;
/*
  <xs:complexType name="Node">
    <xs:all>
      <xs:element name="InRoles">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Role" type="this:Role"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="OutRoles">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Role" type="this:Role"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Title" type="t:Str" minOccurs="0"/>
    </xs:all>
    <xs:attribute name="EntityId" type="t:Str" use="required"/>
    <xs:attribute name="EntityPid" type="t:Str" use="required"/>
    <xs:attribute name="PipelineEntityId" type="t:Str" use="required"/>
    <xs:attribute name="PipelineEntityPid" type="t:Str" use="required"/>
    <xs:attribute name="ClassId" type="t:Str" use="optional"/>
    <xs:attribute name="ClassTitle" type="t:Str" use="optional"/>
    <xs:attribute name="CreatingPresentationId" type="t:Str" use="optional"/>
    <xs:attribute name="EditingPresentationId" type="t:Str" use="optional"/>
    <xs:attribute name="Icon" type="t:Str" use="optional"/>
  </xs:complexType>
*/]]></xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthIYB6YKIL6BFDZPPKLPSN4YZZAU" Name="isApi" Nature="0" IsOverride="true">
        <AccessRules/>
        <ReturnType TypeId="401" extStr="boolean"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>return </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthDZFKAV7V25FBZMIMETFYNIF5IU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>().ClassId == </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="aclHYE66IT5YJCTHKJCVD2PATOPSE"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcELH54EKVCJAATNTLFHHCSVHPZU mthCX6FRHR4VNG37LJWH7N6THCMMA" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthMKOX4CWENJFS7LPD6QQZ2PTQRQ" Name="boundingRect" Nature="0" IsOverride="true">
        <AccessRules/>
        <ReturnType TypeId="400" extStr="com.trolltech.qt.core.QRectF"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>final double adjust = </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcNGQAWOQUY5DMHLIPS27TSPSNRU"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.BOUNDING_RECT.height() + 1;
return BOUNDING_RECT.adjusted(-adjust, -adjust, adjust, adjust);</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthQIBXOSBTORBDTJUUAZPXVFRTGE" Name="paint" Nature="0" IsOverride="true">
        <AccessRules/>
        <Parameters>
          <Parameter Name="painter" Id="mpr5QRAO76AGJDJPLQSZB37ZDLCPA">
            <Type TypeId="400" extStr="com.trolltech.qt.gui.QPainter"/>
          </Parameter>
          <Parameter Name="option" Id="mpr36OZXN52ONHMJNNVCSC667JCPE">
            <Type TypeId="400" extStr="com.trolltech.qt.gui.QStyleOptionGraphicsItem"/>
          </Parameter>
          <Parameter Name="widget" Id="mprGIDLN54X4FGGVOVXRXR5V6OEGQ">
            <Type TypeId="400" extStr="com.trolltech.qt.gui.QWidget"/>
          </Parameter>
        </Parameters>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>if ((option.state().isSet(QStyle.StateFlag.State_Sunken))) {
    painter.setBrush(GRADIENT_SUNKEN);
} else {
    painter.setBrush(GRADIENT_NORMAL);
}

if ((option.state().isSet(QStyle.StateFlag.State_Selected))) {
    painter.setPen(PEN_SELECTED);
} else {
    painter.setPen(PEN_NORMAL);
}

painter.drawRoundRect(BOUNDING_RECT, 10, 10);

final QRect r = new QRect(
        new QPoint((int)(BOUNDING_RECT.width() * 0.05), 0),
        new QPoint((int)(BOUNDING_RECT.width() * 0.95), FONT_LABEL.pointSize()*2)
        );

painter.drawLine(r.bottomLeft(), r.bottomRight());

painter.setPen(PEN_LABEL);
painter.setFont(FONT_LABEL);
painter.drawText(r, Qt.AlignmentFlag.AlignCenter.value(), </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthNZKATTZ2FVGPZOGTSUWFUPLW3Q" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>());

</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcCW52PS3PIRC5XHFOH7LKMEYVSY"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcCW52PS3PIRC5XHFOH7LKMEYVSY mthPLRHYJ7GEJBPVDQIF3BNINM7MM" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(userSession,painter, </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthTMYAHK6Q4VFUDMZKFMBO2CFMZI" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(), BOUNDING_RECT.adjusted(0, FONT_LABEL.pointSize()*2-2, 0, 0), ICON_SIZE, false);</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthCHNL3HNQCVEDXNB4XDXEH6IZJY" Name="isVirtual" Nature="0" IsOverride="false">
        <AccessRules IsPublished="false"/>
        <ReturnType TypeId="401" extStr="boolean"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>return false;</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthTMYAHK6Q4VFUDMZKFMBO2CFMZI" Name="getIconId" Nature="0" IsOverride="false">
        <AccessRules IsPublished="false"/>
        <ReturnType TypeId="411" Path="adcELH54EKVCJAATNTLFHHCSVHPZU"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>return </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="adcKDF543XQWZEI5DORWHNFIYCZ2A"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcKDF543XQWZEI5DORWHNFIYCZ2A mthGFAPI2TPWZEJHN436UQMWZIPZM" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>(</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthDZFKAV7V25FBZMIMETFYNIF5IU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>().Icon);</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mthNZKATTZ2FVGPZOGTSUWFUPLW3Q" Name="getTitle" Nature="0" IsOverride="false">
        <AccessRules IsPublished="false"/>
        <ReturnType TypeId="21"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>return </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mthDZFKAV7V25FBZMIMETFYNIF5IU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>().Title;</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mth7XG2KIRZ2NAGPK2IL5HCYAFOJ4" Name="canDelete" Nature="0" IsOverride="false">
        <AccessRules IsPublished="false"/>
        <ReturnType TypeId="401" extStr="boolean"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:Java>return !</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mth5TTFMVMPORGPJABUFDPDJIGCHA" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
      <Method Id="mth5TTFMVMPORGPJABUFDPDJIGCHA" Name="isPredefined" Nature="0" IsOverride="false">
        <AccessRules IsPublished="false"/>
        <ReturnType TypeId="401" extStr="boolean"/>
        <Sources>
          <Src>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="aclACFEFPIGQFEO3NJWMLWNQAM7KA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java> transformer = null;

if (graph.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcHMXIRC2KYZFDRHIIULJ2M6YRLM mthT2TS5WMORZFVZPX7O2XGPFO7DM" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>() instanceof </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="aclACFEFPIGQFEO3NJWMLWNQAM7KA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>) {
    transformer = (</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:TypeDeclaration TypeId="411" Path="aclACFEFPIGQFEO3NJWMLWNQAM7KA"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>) graph.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcHMXIRC2KYZFDRHIIULJ2M6YRLM mthT2TS5WMORZFVZPX7O2XGPFO7DM" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>();
}

if(transformer!=null){
    if(</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mth5H7AVP2QWVG77BVX2TAC4C7HAE" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>().</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adc6MUJT675HNGATDJ477ZWLDUOHM mthJ4YIWLZDFRFJHGGWOEYKWOCHLU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>() == transformer.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="aclACFEFPIGQFEO3NJWMLWNQAM7KA pruPC3FFHXU5VCTXHUTBGNBS5BCBY" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.Value || </xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adcIY4RHST2WFHCPAIW6JAM2JB2UI mth5H7AVP2QWVG77BVX2TAC4C7HAE" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>().</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="adc6MUJT675HNGATDJ477ZWLDUOHM mthJ4YIWLZDFRFJHGGWOEYKWOCHLU" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>() == transformer.</xsc:Java>
            </xsc:Item>
            <xsc:Item>
              <xsc:IdReference Path="aclACFEFPIGQFEO3NJWMLWNQAM7KA pruB3PUHMTRARCEFFXHR2O7A6USIQ" Invoke="true"/>
            </xsc:Item>
            <xsc:Item>
              <xsc:Java>.Value){
        return true;
    } 
}
return false;</xsc:Java>
            </xsc:Item>
          </Src>
        </Sources>
      </Method>
    </Methods>
    <Extends TypeId="411" Path="adcS75H6U36SFG2LDRZX5GM3WS47Q"/>
  </AdsClassDefinition>
</AdsDefinition>