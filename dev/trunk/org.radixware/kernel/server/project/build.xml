<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="org.radixware-kernel-server" default="default" basedir=".">
    <description>Builds, tests, and runs the project org.radixware-kernel-common-general.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="org.radixware-kernel-common-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->


<!-- *****************  Cobertura code coverage entries ***************** -->
    <taskdef classpath="cobertura.jar" resource="tasks.properties" onerror="ignore"/>

    <target name="-cobertura-init" if="cobertura.enabled">
        <delete dir="${build.instrumented.dir}" />
        <delete dir="${build.report.cobertura.dir}" />
        <mkdir dir="${build.instrumented.dir}" />
        <mkdir dir="${build.report.cobertura.dir}" />
        <cobertura-instrument todir="${build.instrumented.dir}">
            <fileset dir="${build.classes.dir}">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="-cobertura-report" if="cobertura.enabled">
        <!-- You can disable the html portion if you are using the hudson plugin and rely on the xml -->
        <!--<cobertura-report format="html" srcdir="${src.dir}" destdir="${build.report.cobertura.dir}"/>-->
        <!-- Used by the hudson plug-in -->
        <cobertura-report format="xml" srcdir="${src.dir}" destdir="${build.report.cobertura.dir}"/>
        <delete file="cobertura.ser" />
    </target>

    <target name="-pre-compile-test">
        <antcall target="-cobertura-init"/>
    </target>
    <target name="-post-test-run">
        <antcall target="-cobertura-report"/>
    </target>

<!-- *****************  xbeans jar build ***************** -->
    <target name="check-xbeans-uptodate" depends="init">
        <condition property="xbeans-build-not-required">
            <and>
                <uptodate>
                    <srcfiles dir= "${schema.src.dir}" includes="*.xsd"/>
                    <mapper type="glob" from="*.xsd" to="{schema.dist.dir}/xb_*.jar"/>
                </uptodate>
                <uptodate>
                    <srcfiles dir= "${schema.src.dir}" includes="*.wsdl"/>
                    <mapper type="glob" from="*.wsdl" to="{schema.dist.dir}/xb_*.jar"/>
                </uptodate>
            </and>
        </condition>
    </target>
    
    <target name="check-schema-xbeans-uptodate">
        <uptodate property="schema-xbeans-build-not-required" srcfile="${schema.src.dir}/${schema-file}" targetfile="${schema.dist.dir}/xb_${schema-name}.jar"/>
    </target>
    
    <target name="schema-build-xbeans" depends="check-schema-xbeans-uptodate" unless="schema-xbeans-build-not-required">
        <echo message="BUILD ${schema-file}"/>
        <delete file="${schema.dist.dir}/xb_${schema-name}.jar"/>
        <delete dir="${build.dir}/xbeans/${schema-name}"/>
        <mkdir dir="${build.dir}/xbeans/${schema-name}"/>
        <java classname="${xbeans-compiler-class}" fork="true">
            <arg value="${schema.src.dir}/${schema-file}"/>
            <arg value="${schema.dist.dir}/xb_${schema-name}.jar"/>
            <arg value="${schema.dist.dir}/tmp_xb_${schema-name}.jar"/>
            <arg value="-src"/>
            <arg value="${build.dir}/xbeans/${schema-name}"/>
            <arg value="-compile"/>
		<!--	<arg value="-verbose"/> -->
            <classpath>
                <fileset dir="${schema.dist.dir}">
                    <include name="**/xb_*.jar"/>
                </fileset>
                <pathelement path="${build.classes.dir}"/>
                <pathelement path="${javac.classpath}"/>
            </classpath>
        </java>
    </target>
    
    <target name="build-xbeans" depends="check-xbeans-uptodate" unless="xbeans-build-not-required">
        <property name="xbeans-compiler-dir" value="org/radixware/kernel/common/build/xbeans"/>
        <property name="xbeans-compiler-class" value="org.radixware.kernel.common.build.xbeans.XbeansSchemaCompilerAdapter"/>

	<!-- compile enums firstly -->
        <javac srcdir="${src.src.dir}" destdir="${build.classes.dir}"
               includes="org/radixware/kernel/server/enums/*.*"
               classpath="${javac.classpath}"
               debug="@{debug}" deprecation="${javac.deprecation}" encoding="${source.encoding}"/>

	<!-- define macros -->
        <macrodef name="xbeans-build">
            <attribute name="schema-file"/>
            <attribute name="schema-name"/>
            <sequential>
                <antcall target="schema-build-xbeans">
                    <param name="schema-file" value="@{schema-file}"/>
                    <param name="schema-name" value="@{schema-name}"/>
                </antcall>
            </sequential>
        </macrodef>

	<!-- do build -->
        <mkdir dir="${schema.dist.dir}"/>
        <xbeans-build schema-file="aas.wsdl"        	schema-name="aas"/>
        <xbeans-build schema-file="netporthandler.wsdl" schema-name="netporthandler"/>
        <xbeans-build schema-file="jmshandler.wsdl" schema-name="jmshandler"/>
        <xbeans-build schema-file="personalcommunications.xsd"  schema-name="personalcommunications"/>
        <xbeans-build schema-file="nethub.wsdl"  schema-name="nethub"/>
        <xbeans-build schema-file="snmpagent.wsdl" schema-name="snmpagent"/>
        <xbeans-build schema-file="messagequeue.wsdl" schema-name="messagequeue"/>
    </target>
    <target name="-pre-compile" depends="build-xbeans"/>


<!-- *************** build directory.xml *****************  -->
    <target name="build-directory" depends="init">
        <echo message="BUILD directory.xml"/>
        <java classname="org.radixware.kernel.common.build.directory.DirectoryFileBuilder"
  	      classpath="${javac.classpath}"
              fork="true">
		<!-- Command line must be: DirectoryFile excludeRegexp group1 regexp1  group2 regexp2 ... -->
            <arg value="../directory.xml"/>
            <arg value="lib/ojdbc6.jar||.*/(\.svn||src||xsd||doc||project||build)/.*" />
            <arg value="KernelServer"/>
            <arg value="(bin||lib)/.*\.jar" />             
            <classpath>
                <fileset dir="${dist.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${build.classes.dir}"/>
                <pathelement path="${javac.classpath}"/>
            </classpath>
        </java>
        <echo message="SIGN directory.xml"/>
        <java classname="org.radixware.kernel.common.build.directory.DirectoryFileSigner"
  	      classpath="${javac.classpath}"
              fork="true">
            <arg value="../directory.xml"/>
            <classpath>
                <fileset dir="${dist.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${build.classes.dir}"/>
                <pathelement path="${javac.classpath}"/>
            </classpath>
        </java>
    </target>

<!-- *************** javadoc generation and archiving *****************  -->
    <target name="-javadoc-build" depends="init">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc additionalparam="${javadoc.additionalparam}" author="${javadoc.author}" charset="UTF-8" destdir="${dist.javadoc.dir}" docencoding="UTF-8" encoding="${javadoc.encoding.used}" failonerror="true" noindex="${javadoc.noindex}" nonavbar="${javadoc.nonavbar}" notree="${javadoc.notree}" private="${javadoc.private}" source="${javac.source}" splitindex="${javadoc.splitindex}" use="${javadoc.use}" useexternalfile="true" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <fileset dir="${src.src.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
            </fileset>
        </javadoc>
        <apply executable="dot" dest="${dist.javadoc.dir}" parallel="false">
            <arg value="-Tpng"/>
            <arg value="-o"/>
            <targetfile/>
            <srcfile/>
            <fileset dir="${dist.javadoc.dir}" includes="*.dot"/>
            <mapper type="glob" from="*.dot" to="*.png"/>
        </apply>
<!-- addon begin -->
        <zip destfile="../doc/${application.title}.zip" basedir="${dist.javadoc.dir}"/>
        <delete dir="${dist.javadoc.dir}"/>
<!-- addon end -->
    </target>

    <target name="-post-clean">
        <delete dir="../bin"/>
    </target>

    <target name="copy-jar">
        <copy todir="../bin" file="${dist.jar}"/>
    </target>

    <target name="-post-jar" depends="copy-jar, build-directory">
    </target>

    <target name="distributive" depends="jar"/>

</project>
