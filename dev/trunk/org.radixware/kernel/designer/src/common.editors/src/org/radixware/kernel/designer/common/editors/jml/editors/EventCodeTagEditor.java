/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.editors.jml.editors;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.LinkedList;
import javax.swing.DefaultComboBoxModel;
import org.openide.util.NbBundle;
import org.openide.util.actions.SystemAction;
import org.radixware.kernel.common.defs.Definition;
import org.radixware.kernel.common.defs.ExtendableDefinitions.EScope;
import org.radixware.kernel.common.defs.ads.AdsDefinition;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumDef;
import org.radixware.kernel.common.defs.ads.localization.AdsEventCodeDef;
import org.radixware.kernel.common.defs.ads.localization.AdsMultilingualStringDef;
import org.radixware.kernel.common.enums.EEventSeverity;
import org.radixware.kernel.common.jml.JmlTagEventCode;
import org.radixware.kernel.designer.ads.common.EventSourceEnumFinder;
import org.radixware.kernel.designer.common.dialogs.scmlnb.tags.TagEditor;
import org.radixware.kernel.designer.common.dialogs.utils.RadixNbEditorUtils;
import org.radixware.kernel.designer.common.editors.jml.JmlEditor;


public class EventCodeTagEditor<T extends JmlTagEventCode> extends TagEditor<T> {

    private Definition context;
    private LocalizedStringTagEditor lsPanel;

    /**
     * Creates new form MergePanel
     */
    public EventCodeTagEditor() {
        initComponents();
        lsPanel = new LocalizedStringTagEditor();
        pnLocale.setLayout(new BorderLayout());
        pnLocale.add(lsPanel, BorderLayout.CENTER);
        btCopyGuid.setIcon(SystemAction.get(org.openide.actions.CopyAction.class).getIcon());
        btCopyGuid.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                RadixNbEditorUtils.copyIdToClipboard(getTag().getStringId());
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnLocale = new javax.swing.JPanel();
        lbEventSource = new javax.swing.JLabel();
        coEventSource = new javax.swing.JComboBox();
        lbSeverity = new javax.swing.JLabel();
        coSeverity = new javax.swing.JComboBox();
        btCopyGuid = new javax.swing.JButton();

        javax.swing.GroupLayout pnLocaleLayout = new javax.swing.GroupLayout(pnLocale);
        pnLocale.setLayout(pnLocaleLayout);
        pnLocaleLayout.setHorizontalGroup(
            pnLocaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnLocaleLayout.setVerticalGroup(
            pnLocaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 122, Short.MAX_VALUE)
        );

        lbEventSource.setText(org.openide.util.NbBundle.getMessage(EventCodeTagEditor.class, "EventCodeTagEditor.lbEventSource.text")); // NOI18N

        coEventSource.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbSeverity.setText(org.openide.util.NbBundle.getMessage(EventCodeTagEditor.class, "EventCodeTagEditor.lbSeverity.text")); // NOI18N

        coSeverity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btCopyGuid.setText(org.openide.util.NbBundle.getMessage(EventCodeTagEditor.class, "EventCodeTagEditor.btCopyGuid.text")); // NOI18N
        btCopyGuid.setToolTipText(org.openide.util.NbBundle.getMessage(EventCodeTagEditor.class, "EventCodeTagEditor.btCopyGuid.toolTipText")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbEventSource)
                    .addComponent(coEventSource, 0, 208, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbSeverity)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(coSeverity, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btCopyGuid)))
                .addContainerGap())
            .addComponent(pnLocale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnLocale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbEventSource)
                    .addComponent(lbSeverity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coEventSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coSeverity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btCopyGuid))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCopyGuid;
    private javax.swing.JComboBox coEventSource;
    private javax.swing.JComboBox coSeverity;
    private javax.swing.JLabel lbEventSource;
    private javax.swing.JLabel lbSeverity;
    private javax.swing.JPanel pnLocale;
    // End of variables declaration//GEN-END:variables

    @Override
    public void afterOpen() {
        context = getOpenInfo().getLookup().lookup(JmlEditor.ContextProvider.class).getContext();
        AdsEventCodeDef ecDef = getEventCodeDef();
        lsPanel.open(getObject(), getOpenInfo());

        DefaultComboBoxModel severityModel = new DefaultComboBoxModel(EEventSeverity.values());
        severityModel.removeElement(EEventSeverity.NONE);
        coSeverity.setModel(severityModel);
        if (ecDef.getEventSeverity() != null) {
            coSeverity.setSelectedItem(ecDef.getEventSeverity());
        }

        AdsEnumDef sourceEnum = findEventSourceEnum();
        if (sourceEnum == null) {
            setCorrect(false);
            coEventSource.setEnabled(false);
            btCopyGuid.setEnabled(false);
            coSeverity.setEnabled(false);
            lsPanel.setEnabled(false);
            return;

        }
        DefaultComboBoxModel sourceModel = new DefaultComboBoxModel(createSourceValues(sourceEnum));
        coEventSource.setModel(sourceModel);
        if (ecDef.getEventSource() != null) {
            coEventSource.setSelectedItem(ecDef.getEventSource());
        }

        if (getTag().getStringId() == null) {
            btCopyGuid.setVisible(false);
        } else {
            btCopyGuid.setVisible(true);
        }
    }

    private Object[] createSourceValues(AdsEnumDef sourceEnum) {
        LinkedList<Object> list = new LinkedList<Object>();
        for (final AdsEnumDef.IItem item : sourceEnum.getItems().get(EScope.LOCAL_AND_OVERWRITE)) {
            list.add(item.getValue().toString());
        }
        Object[] arr = list.toArray();
        Arrays.sort(arr);
        return arr;
    }

    private AdsEnumDef findEventSourceEnum() {
        EventSourceEnumFinder finder = new EventSourceEnumFinder();
        return finder.findEventSourceEnum(context);
    }

    @Override
    public void applyChanges() {
        lsPanel.applyChanges();
        AdsEventCodeDef ecDef = getEventCodeDef();
        ecDef.setEventSource(coEventSource.getSelectedItem().toString());
        ecDef.setEventSeverity((EEventSeverity) coSeverity.getSelectedItem());
    }

    private AdsEventCodeDef getEventCodeDef() {
        if (context instanceof AdsDefinition) {
            AdsMultilingualStringDef stringDef = ((AdsDefinition) context).findLocalizingBundle().getStrings().findById(getObject().getStringId(), EScope.LOCAL_AND_OVERWRITE).get();
            if (stringDef instanceof AdsEventCodeDef) {
                return (AdsEventCodeDef) stringDef;
            }
            AdsEventCodeDef ecDef = getOpenInfo().getLookup().lookup(AdsEventCodeDef.class);
            return ecDef;
        } else {
            return null;
        }
    }

    @Override
    public String getTitle() {
//        return "Event Code";
        return NbBundle.getMessage(EventCodeTagEditor.class, "event-code");
    }

    @Override
    protected boolean tagDefined() {
        return true;
    }

    @Override
    public void setReadOnly(boolean readOnly) {
        
    }
}
