/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */
package org.radixware.kernel.designer.common.editors.editmask;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import org.openide.util.Exceptions;
import org.radixware.kernel.common.components.ExtendableTextField;
import org.radixware.kernel.common.defs.ads.AdsDefinition;
import org.radixware.kernel.common.defs.ads.clazz.presentation.editmask.EditMask;
import org.radixware.kernel.common.defs.ads.clazz.presentation.editmask.EditMaskFilePath;
import org.radixware.kernel.common.defs.ads.localization.AdsMultilingualStringDef;
import org.radixware.kernel.common.enums.EFileSelectionMode;
import org.radixware.kernel.common.enums.EIsoLanguage;
import org.radixware.kernel.common.enums.EMimeType;
import org.radixware.kernel.common.resources.RadixWareIcons;

public class FilePathEditor extends Editor {

    private boolean readOnly = false;
    private JButton editTitleBtn;
    private boolean freeInput;
    private EFileSelectionMode mode;
    private boolean storepath;
    private String title;
    private EMimeType mimeType;
    private boolean checkIfPathExists;
    private final AdsDefinition definition;
    private AdsMultilingualStringDef stringDef;

    /**
     * Creates new form FilePathEditor
     */
    public FilePathEditor(final AdsDefinition definition, final EditMaskFilePath mask) {
        initComponents();
        mimeTypeComboBox1.insertItemAt(null, 0);//"*" mime type
        this.definition = definition;

        if (mask != null) {
            AdsMultilingualStringDef strDef = definition.findLocalizedString(mask.getTitleId());
            stringDef = strDef == null ? AdsMultilingualStringDef.Factory.newInstance() : strDef;
        } else {
            stringDef = AdsMultilingualStringDef.Factory.newInstance();
        }
        setupInitValues(mask);
        this.editTitleBtn = dlgTitleTextField.addButton(RadixWareIcons.DIALOG.CHOOSE.getIcon());
        dlgTitleTextField.setTextFieldValue(title);
        freeInputCheckBox.setSelected(freeInput);
        selectionModeCombo.setSelectedItem(mode);
        checkIfPathExistCheckBox.setSelected(checkIfPathExists);
        storeLastpathChb.setSelected(storepath);
        if (mimeType != null) {
            mimeTypeComboBox1.setSelectedItem(mimeType);
        } else {
            mimeTypeComboBox1.setSelectedIndex(0);
        }

        editTitleBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                PathTitleLocalizingEditor.Factory.newInstance(definition, stringDef).open();
                dlgTitleTextField.setValue(stringDef.findValue(EIsoLanguage.ENGLISH));
            }
        });
        dlgTitleTextField.addChangeListener(new ExtendableTextField.ExtendableTextChangeListener() {
            @Override
            public void onEvent(ExtendableTextField.ExtendableTextChangeEvent e) {
                if (stringDef != null) {
                    stringDef.setValue(EIsoLanguage.ENGLISH, dlgTitleTextField.getValue().toString());
                }
            }
        });
        updateEnableState();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
     * code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        freeInputCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        selectionModeCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        mimeTypeComboBox1 = new javax.swing.JComboBox();
        jlabel3 = new javax.swing.JLabel();
        checkIfPathExistCheckBox = new javax.swing.JCheckBox();
        dlgTitleTextField = new org.radixware.kernel.common.components.ExtendableTextField();
        storeLastpathChb = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(freeInputCheckBox, org.openide.util.NbBundle.getMessage(FilePathEditor.class, "FilePathEditor.freeInputCheckBox.text")); // NOI18N
        freeInputCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freeInputCheckBoxActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FilePathEditor.class, "FilePathEditor.jPanel1.border.title"))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(65, 53));

        selectionModeCombo.setModel(new DefaultComboBoxModel<>(EFileSelectionMode.values()));
        selectionModeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionModeComboActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(FilePathEditor.class, "FilePathEditor.jLabel2.text")); // NOI18N

        mimeTypeComboBox1.setModel(new DefaultComboBoxModel<EMimeType>(EMimeType.values()));
        mimeTypeComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mimeTypeComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectionModeCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mimeTypeComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(selectionModeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mimeTypeComboBox1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(jlabel3, org.openide.util.NbBundle.getMessage(FilePathEditor.class, "FilePathEditor.jlabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(checkIfPathExistCheckBox, org.openide.util.NbBundle.getMessage(FilePathEditor.class, "FilePathEditor.checkIfPathExistCheckBox.text")); // NOI18N
        checkIfPathExistCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkIfPathExistCheckBoxActionPerformed(evt);
            }
        });

        storeLastpathChb.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(storeLastpathChb, org.openide.util.NbBundle.getMessage(FilePathEditor.class, "FilePathEditor.storeLastpathChb.text")); // NOI18N
        storeLastpathChb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeLastpathChbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dlgTitleTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(storeLastpathChb)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkIfPathExistCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(freeInputCheckBox)))
                        .addGap(0, 194, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dlgTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkIfPathExistCheckBox)
                    .addComponent(freeInputCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(storeLastpathChb)
                .addGap(42, 42, 42))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void freeInputCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeInputCheckBoxActionPerformed
        this.freeInput = freeInputCheckBox.isSelected();
        updateEnableState();
    }//GEN-LAST:event_freeInputCheckBoxActionPerformed

    private void mimeTypeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mimeTypeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mimeTypeTextFieldActionPerformed

    private void checkIfPathExistCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkIfPathExistCheckBoxActionPerformed
        this.checkIfPathExists = checkIfPathExistCheckBox.isSelected();
        updateEnableState();
    }//GEN-LAST:event_checkIfPathExistCheckBoxActionPerformed

    private void mimeTypeComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mimeTypeComboBox1ActionPerformed
        mimeType = (EMimeType) this.mimeTypeComboBox1.getSelectedItem();
        updateEnableState();
    }//GEN-LAST:event_mimeTypeComboBox1ActionPerformed

    private void selectionModeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionModeComboActionPerformed
        this.mode = (EFileSelectionMode) selectionModeCombo.getSelectedItem();
        updateEnableState();
    }//GEN-LAST:event_selectionModeComboActionPerformed

    private void storeLastpathChbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeLastpathChbActionPerformed
        this.storepath = storeLastpathChb.isSelected();
        updateEnableState();    }//GEN-LAST:event_storeLastpathChbActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkIfPathExistCheckBox;
    private org.radixware.kernel.common.components.ExtendableTextField dlgTitleTextField;
    private javax.swing.JCheckBox freeInputCheckBox;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jlabel3;
    private javax.swing.JComboBox mimeTypeComboBox1;
    private javax.swing.JComboBox selectionModeCombo;
    private javax.swing.JCheckBox storeLastpathChb;
    // End of variables declaration//GEN-END:variables

    @Override
    public void apply(EditMask editMask) {
        try {
            if (!(editMask instanceof EditMaskFilePath)) {
            } else {
                EditMaskFilePath mask = (EditMaskFilePath) editMask;
                title = dlgTitleTextField.getValue().toString();
                mimeType = (EMimeType) mimeTypeComboBox1.getSelectedItem();
                if (selectionModeCombo.getSelectedItem() != null) {
                    mode = (EFileSelectionMode) selectionModeCombo.getSelectedItem();
                }
                freeInput = freeInputCheckBox.isSelected();
                checkIfPathExists = checkIfPathExistCheckBox.isSelected();
                storepath = storeLastpathChb.isSelected();
                mask.setHandleInputAvailable(freeInput);
                mask.setSelectionMode(mode);
                mask.setMimeType(mimeType);
                mask.setCheckIfPathExists(checkIfPathExists);
                mask.setStoreLastPathInConfig(storepath);
                if (stringDef != null) {
                    mask.setTitleId(stringDef.getId());
                    mask.setFileDialogTitle(stringDef.findValue(EIsoLanguage.ENGLISH));
                }
                if (mask.getTitleId() != null) {
                    AdsMultilingualStringDef strDef = definition.findLocalizedString(mask.getTitleId());
                    if (strDef != null) {
                        definition.findExistingLocalizingBundle().getStrings().getLocal().remove(strDef);
                    }
                    definition.findExistingLocalizingBundle().getStrings().getLocal().add(stringDef);
                }

            }
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    @Override
    public void setReadOnly(boolean readOnly) {
        this.readOnly = readOnly;
    }

    private void updateEnableState() {
        freeInputCheckBox.setEnabled(!readOnly);
        dlgTitleTextField.setEnabled(!readOnly);
        selectionModeCombo.setEnabled(!readOnly);
        checkIfPathExistCheckBox.setEnabled(!readOnly);
        storeLastpathChb.setEnabled(!readOnly);
        if (mode == EFileSelectionMode.SELECT_DIRECTORY) {
            mimeTypeComboBox1.setSelectedItem(null);
            mimeTypeComboBox1.setEnabled(false);
        } else {
            mimeTypeComboBox1.setEnabled(!readOnly);
        }
    }

    private void setupInitValues(EditMaskFilePath mask) {
        if (mask != null) {
            title = mask.getFileDialogTitle();
            freeInput = mask.getHandleInputAvailable();
            mode = mask.getSelectionMode();
            mimeType = mask.getMimeType();
            checkIfPathExists = mask.getCheckIfPathExists();
            storepath = mask.getStoreLastPathInConfig();
            /*AdsMultilingualStringDef def = mask.findLocalizedString(mask.getTitleId());
             stringDef = def != null ? def : stringDef;*/
        } else {
            title = "File Dialog";
            freeInput = false;
            checkIfPathExists = false;
            mode = EFileSelectionMode.SELECT_FILE;
            mimeType = null;
            storepath = true;
        }
        if (stringDef != null) {
            stringDef.setValue(EIsoLanguage.ENGLISH, title);
        }
    }
}
