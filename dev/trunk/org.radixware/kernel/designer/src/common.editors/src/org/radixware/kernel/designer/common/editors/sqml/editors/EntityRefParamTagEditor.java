/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.editors.sqml.editors;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.openide.util.NbBundle;
import org.openide.util.lookup.Lookups;
import org.radixware.kernel.common.defs.IParameterDef;
import org.radixware.kernel.common.defs.ads.clazz.presentation.AdsFilterDef;
import org.radixware.kernel.common.defs.ads.clazz.presentation.AdsFilterDef.Parameter;
import org.radixware.kernel.common.defs.ads.type.AdsClassType.EntityObjectType;
import org.radixware.kernel.common.defs.ads.type.AdsType;
import org.radixware.kernel.common.defs.dds.DdsTableDef;
import org.radixware.kernel.common.enums.EValType;
import org.radixware.kernel.common.sqml.tags.EntityRefParameterTag;
import org.radixware.kernel.common.types.Id;
import org.radixware.kernel.common.utils.Utils;
import org.radixware.kernel.designer.common.dialogs.scmlnb.library.ProxyModalOpenInfo;
import org.radixware.kernel.designer.common.dialogs.scmlnb.tags.TagEditor;


public class EntityRefParamTagEditor extends TagEditor<EntityRefParameterTag> {

    /**
     * Creates new form EntityRefaParamEditor
     */
    public EntityRefParamTagEditor() {
        initComponents();

        refEditPanel.addPropertyChangeListener("correct", new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                updateOkState();
            }
        });

        pnUnsyncError.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refEditPanel = new org.radixware.kernel.designer.common.editors.sqml.editors.EntityRefEditPanel();
        pnUnsyncError = new javax.swing.JPanel();
        btFixUnsyncError = new javax.swing.JButton();
        lbUnsyncError = new javax.swing.JLabel();

        btFixUnsyncError.setText(org.openide.util.NbBundle.getMessage(EntityRefParamTagEditor.class, "EntityRefParamTagEditor.btFixUnsyncError.text")); // NOI18N
        btFixUnsyncError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFixUnsyncErrorActionPerformed(evt);
            }
        });

        lbUnsyncError.setText(org.openide.util.NbBundle.getMessage(EntityRefParamTagEditor.class, "EntityRefParamTagEditor.lbUnsyncError.text")); // NOI18N

        javax.swing.GroupLayout pnUnsyncErrorLayout = new javax.swing.GroupLayout(pnUnsyncError);
        pnUnsyncError.setLayout(pnUnsyncErrorLayout);
        pnUnsyncErrorLayout.setHorizontalGroup(
            pnUnsyncErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnUnsyncErrorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbUnsyncError)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnUnsyncErrorLayout.createSequentialGroup()
                .addContainerGap(161, Short.MAX_VALUE)
                .addComponent(btFixUnsyncError)
                .addContainerGap())
        );
        pnUnsyncErrorLayout.setVerticalGroup(
            pnUnsyncErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnUnsyncErrorLayout.createSequentialGroup()
                .addComponent(lbUnsyncError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(btFixUnsyncError))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(refEditPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                    .addComponent(pnUnsyncError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refEditPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnUnsyncError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btFixUnsyncErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFixUnsyncErrorActionPerformed
        final DdsTableDef tableDef = refEditPanel.getOpenInfo().getLookup().lookup(DdsTableDef.class);
        getObject().setReferencedTableId(tableDef.getId());
    }//GEN-LAST:event_btFixUnsyncErrorActionPerformed

    @Override
    protected boolean tagDefined() {
        return refEditPanel.isCorrect();
    }

    @Override
    protected String getTitle() {
        return NbBundle.getMessage(EntityRefParamTagEditor.class, "entity-ref-param-tag");
    }

    @Override
    protected void applyChanges() {
        refEditPanel.applyChanges();
    }

    @Override
    protected void afterOpen() {
        AdsFilterDef.Parameter filterParamDef = null;
        DdsTableDef tableDef = null;
        Id tableId = null;

        final IParameterDef paramDef = getObject().findParameter();
        if (paramDef != null && paramDef.getDefinition() instanceof AdsFilterDef.Parameter) {
            filterParamDef = (Parameter) paramDef.getDefinition();
        } else {
            filterParamDef = getOpenInfo().getLookup().lookup(AdsFilterDef.Parameter.class);
        }
        if (filterParamDef != null) {
            if (filterParamDef.getType().getTypeId() == EValType.PARENT_REF || filterParamDef.getType().getTypeId() == EValType.OBJECT) {
                AdsType type = filterParamDef.getType().resolve(filterParamDef).get();
                if (type instanceof EntityObjectType) {
                    tableDef = ((EntityObjectType) type).getSource().findTable(getObject());
                    tableId = ((EntityObjectType) type).getSourceEntityId();
                } else {
                    throw new IllegalStateException("Can not obtain Entity ID from parameter. Missing dependencies?");
                }
            }
        } else {
            throw new IllegalStateException("Can not find parameter in OpenInfo");
        }

        if (!Utils.equalsNotNull(getObject().getReferencedTableId(), tableId)) {
            pnUnsyncError.setVisible(true);
        } else {
            pnUnsyncError.setVisible(false);
        }

        refEditPanel.open(getObject(), new ProxyModalOpenInfo(getOpenInfo(), Lookups.fixed(tableDef)));
    }

    @Override
    protected void setReadOnly(boolean readOnly) {
        refEditPanel.setReadOnly(readOnly);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btFixUnsyncError;
    private javax.swing.JLabel lbUnsyncError;
    private javax.swing.JPanel pnUnsyncError;
    private org.radixware.kernel.designer.common.editors.sqml.editors.EntityRefEditPanel refEditPanel;
    // End of variables declaration//GEN-END:variables
}
