/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * LinkedEntityPanel.java
 *
 * Created on Feb 19, 2009, 5:05:18 PM
 */
package org.radixware.kernel.designer.ads.editors.clazz.simple;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import org.radixware.kernel.common.defs.ads.clazz.AdsClassDef;
import org.radixware.kernel.common.defs.ads.clazz.entity.AdsApplicationClassDef;
import org.radixware.kernel.common.defs.ads.clazz.entity.AdsEntityClassDef;
import org.radixware.kernel.common.defs.ads.clazz.entity.AdsEntityObjectClassDef;
import org.radixware.kernel.common.defs.ads.clazz.entity.AdsEntityObjectClassDef.DetailReferenceInfo;
import org.radixware.kernel.common.defs.dds.DdsReferenceDef;
import org.radixware.kernel.common.defs.dds.DdsTableDef;
import org.radixware.kernel.common.types.Id;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ConfigureDefinitionListCfg;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ConfigureDefinitionTable.IdBooleanValueChangeEvent;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ConfigureDefinitionTable.IdBooleanValueChangeListener;


public class LinkedEntityPanel extends javax.swing.JPanel {

    private AdsEntityObjectClassDef adsEntityObjectClassDef;
//    private JButton gotoObjectButton, selectInExplorerButton;
    private boolean hasMasterDetailRefs = true;
    private IdBooleanValueChangeListener booleanListener = new IdBooleanValueChangeListener() {
        @Override
        public void onEvent(IdBooleanValueChangeEvent e) {
            LinkedEntityPanel.this.adsEntityObjectClassDef.setDetailAllowed(e.getId(), e.getNewValue());
        }
    };

    /**
     * Creates new form LinkedEntityPanel
     */
    public LinkedEntityPanel() {
        super();
        initComponents();

//        gotoObjectButton = extendableTextField1.addButton();
//        gotoObjectButton.setToolTipText("Open");
//        gotoObjectButton.setIcon(RadixWareIcons.ARROW.GO_TO_OBJECT.getIcon());
//        gotoObjectButton.addActionListener(new ActionListener() {
//
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                final DdsTableDef table = adsEntityObjectClassDef.findTable();
//                if (table != null) {
//                    EditorsManager.getDefault().open(table);
//                }
//            }
//        });
//
//        selectInExplorerButton = extendableTextField1.addButton();
//        selectInExplorerButton.setToolTipText("Select in Tree");
//        selectInExplorerButton.setIcon(RadixWareIcons.TREE.SELECT_IN_TREE.getIcon());
//        selectInExplorerButton.addActionListener(new ActionListener() {
//
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                final DdsTableDef table = adsEntityObjectClassDef.findTable();
//                if (table != null) {
//                    NodesManager.selectInProjects(table);
//                }
//            }
//        });

        allowedDetails.addConfigurableIdIsCheckedListener(booleanListener);
        this.remove(content);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        content = new javax.swing.JPanel();
        allowedDetailsLabel = new javax.swing.JLabel();
        allowedDetails = new org.radixware.kernel.designer.common.dialogs.chooseobject.ConfigureDefinitionListPanel();

        content.setLayout(new javax.swing.BoxLayout(content, javax.swing.BoxLayout.Y_AXIS));

        allowedDetailsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        allowedDetailsLabel.setText(org.openide.util.NbBundle.getMessage(LinkedEntityPanel.class, "LinkedEntityPanel.allowedDetailsLabel.text")); // NOI18N
        allowedDetailsLabel.setAlignmentY(0.0F);
        allowedDetailsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        content.add(allowedDetailsLabel);

        allowedDetails.setAlignmentX(0.0F);
        allowedDetails.setAlignmentY(0.0F);
        allowedDetails.setMaximumSize(new java.awt.Dimension(32767, 90));
        allowedDetails.setPreferredSize(new java.awt.Dimension(355, 90));
        content.add(allowedDetails);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void open(AdsEntityObjectClassDef adsEntityObjectClassDef) {
        this.adsEntityObjectClassDef = adsEntityObjectClassDef;
        update();
    }

    public void update() {


        final DdsTableDef ddsTableDef = adsEntityObjectClassDef.findTable(adsEntityObjectClassDef);
//        extendableTextField1.setValue(ddsTableDef != null ? ddsTableDef.getQualifiedName() : "");

        final List<DetailReferenceInfo> detailReferenceInfoList = adsEntityObjectClassDef.getAllowedDetailRefs();
        final List<Id> configureDefinitionIDs = new ArrayList<Id>();
        for (DetailReferenceInfo xDetailReferenceInfo : detailReferenceInfoList) {
            configureDefinitionIDs.add(xDetailReferenceInfo.getReferenceId());
        }

        final Set<DdsReferenceDef> allReferences = ddsTableDef != null ? ddsTableDef.collectIncomingReferences() : Collections.<DdsReferenceDef>emptySet();
        final List<DdsReferenceDef> availableDefinitions = new ArrayList<DdsReferenceDef>();
        for (DdsReferenceDef ref : allReferences) {
            if (ref.getType() == DdsReferenceDef.EType.MASTER_DETAIL) {
                availableDefinitions.add(ref);
            }
        }

        if (availableDefinitions.isEmpty()) {
            //hasMasterDetailRefs = false;
            this.remove(content);
        } else {

            //if (!hasMasterDetailRefs) {
            //  hasMasterDetailRefs = true;
            this.add(content);
            //}

            final List<DetailReferenceInfo> parentIds;
            AdsClassDef superClassObject = adsEntityObjectClassDef.getInheritance().findSuperClass().get();
            if (superClassObject instanceof AdsEntityClassDef) {
                parentIds = ((AdsEntityClassDef) superClassObject).getPresentations().getOwnerClass().getAllowedDetailRefs();
            } else if (superClassObject instanceof AdsApplicationClassDef) {
                parentIds = ((AdsApplicationClassDef) superClassObject).getAllowedDetailRefs();
            } else {
                parentIds = new ArrayList<DetailReferenceInfo>();
            }

            final List<Id> forbiddenIDs = new ArrayList<Id>();
            for (DetailReferenceInfo xDetailReferenceInfo : parentIds) {
                forbiddenIDs.add(xDetailReferenceInfo.getReferenceId());
            }

            this.allowedDetails.open(configureDefinitionIDs, ConfigureDefinitionListCfg.Factory.newInstanceWithDisabledIds(availableDefinitions, forbiddenIDs));
        }
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        allowedDetails.setEnabled(enabled);
    }

    public void setReadonly(boolean readonly) {
//        extendableTextField1.setReadOnly(readonly);
//        boolean hasTable = adsEntityObjectClassDef.getEntityId() != null ? (adsEntityObjectClassDef.findTable() != null) : false;
//        selectInExplorerButton.setEnabled(hasTable);
//        gotoObjectButton.setEnabled(hasTable);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.radixware.kernel.designer.common.dialogs.chooseobject.ConfigureDefinitionListPanel allowedDetails;
    private javax.swing.JLabel allowedDetailsLabel;
    private javax.swing.JPanel content;
    // End of variables declaration//GEN-END:variables
}
