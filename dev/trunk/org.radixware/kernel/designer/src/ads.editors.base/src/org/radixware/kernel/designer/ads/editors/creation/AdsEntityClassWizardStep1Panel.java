/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * AdsEntityClassWizardStep1Panel.java
 *
 * Created on Jan 16, 2009, 4:50:27 PM
 */
package org.radixware.kernel.designer.ads.editors.creation;

import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.util.ChangeSupport;
import org.radixware.kernel.common.builder.check.ads.AdsImageChecker;
import org.radixware.kernel.common.defs.Definition;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.ads.clazz.entity.AdsEntityClassDef;
import org.radixware.kernel.common.defs.ads.clazz.entity.AdsEntityObjectClassDef;
import org.radixware.kernel.common.defs.ads.common.AdsUtils;
import org.radixware.kernel.common.defs.ads.common.AdsVisitorProvider.AdsTopLevelDefVisitorProvider;
import org.radixware.kernel.common.defs.ads.module.AdsModule;
import org.radixware.kernel.common.defs.dds.DdsTableDef;
import org.radixware.kernel.common.defs.dds.providers.DdsVisitorProvider;
import org.radixware.kernel.common.enums.EClassType;
import org.radixware.kernel.common.enums.EDdsTableExtOption;
import org.radixware.kernel.common.repository.Layer;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ChooseDefinitionCfg;
import org.radixware.kernel.designer.common.dialogs.components.state.StateManager;


class AdsEntityClassWizardStep1Panel extends javax.swing.JPanel implements ChangeListener {

    private StateManager tableManager = new StateManager(this);
    private EClassType mode;
    private DdsTableDef selectedTable = null;
    private AdsEntityObjectClassDef selectedBasis = null;
    private String defaultName;

    /**
     * Creates new form AdsEntityClassWizardStep1Panel
     */
    public AdsEntityClassWizardStep1Panel() {
        initComponents();
        nameEditor.addChangeListener(this);
        basisSelect.addChangeListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nameEditor = new org.radixware.kernel.designer.common.dialogs.components.NameEditPanel();
        basisSelect = new org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel();
        lbTable = new javax.swing.JLabel();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(AdsEntityClassWizardStep1Panel.class, "AdsEntityClassWizardStep1Panel.jLabel1.text")); // NOI18N

        lbTable.setText(org.openide.util.NbBundle.getMessage(AdsEntityClassWizardStep1Panel.class, "AdsEntityClassWizardStep1Panel.lbTable.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(lbTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(basisSelect, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                    .addComponent(nameEditor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(basisSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTable))
                .addContainerGap(273, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel basisSelect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbTable;
    private org.radixware.kernel.designer.common.dialogs.components.NameEditPanel nameEditor;
    // End of variables declaration//GEN-END:variables

    public void open(String name, final AdsModule module, DdsTableDef table, AdsEntityObjectClassDef acl, final EClassType mode, String defaultName) {
        this.mode = mode;
        basisSelect.setClearable(false);
        this.selectedTable = table;
        this.selectedBasis = acl;
        this.nameEditor.setCurrentName(name);
        this.defaultName = defaultName;
        ChooseDefinitionCfg cfg;
        final Layer thisLayer = module.getSegment().getLayer();
        switch (mode) {
            case APPLICATION:
                lbTable.setText("Basis Class:");


                cfg = ChooseDefinitionCfg.Factory.newInstance(module, new AdsTopLevelDefVisitorProvider() {
                    @Override
                    public boolean isTarget(RadixObject radixObject) {
                        if (radixObject instanceof AdsEntityObjectClassDef) {
                            AdsEntityObjectClassDef clazz = (AdsEntityObjectClassDef) radixObject;
                            if (clazz.isFinal()) {
                                return false;
                            }
                            if (clazz instanceof AdsEntityClassDef) {
                                DdsTableDef table = clazz.findTable(clazz);
                                if (table != null && !table.getExtOptions().contains(EDdsTableExtOption.ENABLE_APPLICATION_CLASSES)) {
                                    return false;
                                }
                            }
                            return true;
                        } else {
                            return false;
                        }
                    }
                });
                basisSelect.open(cfg, acl, null);
                break;

            case ENTITY:
                lbTable.setText("Basis Table:");

                cfg = ChooseDefinitionCfg.Factory.newInstance(module, new DdsVisitorProvider() {
                    @Override
                    public boolean isTarget(RadixObject radixObject) {
                        if (radixObject instanceof DdsTableDef) {
                            DdsTableDef table = (DdsTableDef) radixObject;
                            if (table.getModule().getSegment().getLayer() == thisLayer) {
                                return !table.isHidden() && !AdsUtils.isEntityClassExists(table) && AdsUtils.isEntityClassAllowed(table);
                            } else {
                                return false;
                            }
                        } else {
                            return false;
                        }
                    }
                });
                basisSelect.open(cfg, table, null);
                break;
            case ENTITY_GROUP:
                lbTable.setText("Basis Entity:");
                cfg = ChooseDefinitionCfg.Factory.newInstance(module, new AdsTopLevelDefVisitorProvider() {
                    @Override
                    public boolean isTarget(RadixObject radixObject) {
                        if (radixObject instanceof AdsEntityClassDef) {
                            AdsEntityClassDef clazz = (AdsEntityClassDef) radixObject;
                            if (clazz.getModule().getSegment().getLayer() == thisLayer) {
                                DdsTableDef table = clazz.findTable(clazz);
                                if (table == null) {
                                    return false;
                                }
                                return !AdsUtils.isEntityGroupClassExists(table);
                            } else {
                                return false;
                            }
                        } else {
                            return false;
                        }
                    }
                });
                basisSelect.open(cfg, table, null);
                break;
            case PRESENTATION_ENTITY_ADAPTER:
                lbTable.setText("Basis Class:");

                cfg = ChooseDefinitionCfg.Factory.newInstance(module, new AdsTopLevelDefVisitorProvider() {
                    @Override
                    public boolean isTarget(RadixObject radixObject) {
                        if (radixObject instanceof AdsEntityObjectClassDef) {
                            AdsEntityObjectClassDef clazz = (AdsEntityObjectClassDef) radixObject;
                            if (AdsUtils.isPresentationEntityAdapterAllowed(clazz)) {
                                return true;
                            } else {
                                return false;
                            }
                        } else {
                            return false;
                        }
                    }
                });
                basisSelect.open(cfg, acl, null);
                break;
        }

    }

    private void checkName(final String check) {
        String name = nameEditor.getCurrentName();
        if (name == null || name.isEmpty() || name.equals(defaultName)) {
            defaultName = check;
            nameEditor.removeChangeListener(this);
            nameEditor.setCurrentName(check);
            nameEditor.addChangeListener(this);
        }
    }

    public boolean isComplete() {
        boolean res = nameEditor.isComplete();

        switch (mode) {
            case ENTITY:
                if (selectedTable != null) {
                    tableManager.ok();

                } else {
                    tableManager.error("Basis table should be specified");
                    res =
                            false;
                }

                break;
            case ENTITY_GROUP:
            case APPLICATION:
            case PRESENTATION_ENTITY_ADAPTER:
                if (selectedBasis != null) {
                    tableManager.ok();

                } else {
                    tableManager.error("Basis class should be specified");
                    res =
                            false;
                }

                break;
        }



        return res;
    }

//    public void setCurrentTable(final DdsTableDef table) {
//        tableSelector.setSelected(table);
//    }
    public DdsTableDef getSelectedTable() {
        return selectedTable;
    }

    public String getCurrentName() {
        return nameEditor.getCurrentName();
    }

    public AdsEntityObjectClassDef getSelectedBasis() {
        return selectedBasis;
    }
    private ChangeSupport changeSupport = new ChangeSupport(this);

    public void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    public void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        String checkName = null;
        switch (mode) {
            case ENTITY:
                selectedTable = (DdsTableDef) basisSelect.getDefinition();
                if (selectedTable != null) {
                    checkName = selectedTable.getName();
                }
                break;

            case APPLICATION:
            case ENTITY_GROUP:
            case PRESENTATION_ENTITY_ADAPTER:
                selectedBasis = (AdsEntityObjectClassDef) basisSelect.getDefinition();
                if (selectedBasis != null) {
                    checkName = selectedBasis.getName() + (mode == EClassType.ENTITY_GROUP ? "Group" : (mode == EClassType.APPLICATION ? "App" : "Adapter"));
                }
                break;

        }

        changeSupport.fireChange();
        if (e.getSource() != nameEditor) {
            if (checkName != null) {
                checkName(checkName);
            }
        }
    }
}
