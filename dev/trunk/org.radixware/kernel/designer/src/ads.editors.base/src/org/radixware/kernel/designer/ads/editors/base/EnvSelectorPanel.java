/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * EnvSelectorPanel.java
 *
 * Created on Nov 18, 2011, 2:55:53 PM
 */
package org.radixware.kernel.designer.ads.editors.base;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeListener;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.util.ChangeSupport;
import org.openide.util.RequestProcessor;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.ads.IEnvDependent;
import org.radixware.kernel.common.defs.ads.clazz.AdsClassDef;
import org.radixware.kernel.common.defs.ads.clazz.AdsClassMember;
import org.radixware.kernel.common.defs.ads.clazz.IAdsClassMember;
import org.radixware.kernel.common.defs.ads.clazz.entity.AdsEntityModelClassDef;
import org.radixware.kernel.common.defs.ads.clazz.entity.AdsEntityObjectClassDef;
import org.radixware.kernel.common.defs.ads.clazz.form.AdsFormHandlerClassDef;
import org.radixware.kernel.common.defs.ads.clazz.members.AdsMethodDef;
import org.radixware.kernel.common.defs.ads.clazz.members.AdsPropertyDef;
import org.radixware.kernel.common.defs.ads.clazz.presentation.AdsEditorPageDef;
import org.radixware.kernel.common.defs.ads.clazz.presentation.AdsEditorPresentationDef;
import org.radixware.kernel.common.defs.ads.clazz.presentation.AdsFilterDef;
import org.radixware.kernel.common.defs.ads.clazz.presentation.AdsSelectorPresentationDef;
import org.radixware.kernel.common.defs.ads.command.AdsCommandDef;
import org.radixware.kernel.common.defs.ads.explorerItems.AdsExplorerItemDef;
import org.radixware.kernel.common.enums.ERuntimeEnvironmentType;
import org.radixware.kernel.designer.common.dialogs.utils.DialogUtils;
import org.radixware.kernel.designer.common.general.utils.RadixMutex;


public class EnvSelectorPanel extends javax.swing.JPanel {

    private IEnvDependent context;

    private static class Item {

        final ERuntimeEnvironmentType env;

        public Item(ERuntimeEnvironmentType env) {
            this.env = env;
        }

        @Override
        public String toString() {
            return env.getName();
        }
    }

    private static class Model extends DefaultComboBoxModel {

        public Model(List<Item> items) {
            super(items.toArray(new Item[0]));
        }
    }

    /**
     * Creates new form EnvSelectorPanel
     */
    public EnvSelectorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(EnvSelectorPanel.class, "EnvSelectorPanel.jLabel1.text")); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, 0, 309, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public void open(IEnvDependent context) {
        this.context = context;
        update();
    }
    boolean updating = false;
    private ItemListener listener = new ItemListener() {

        @Override
        public void itemStateChanged(ItemEvent e) {
            if (!updating) {
                Item item = (Item) ((Model) jComboBox1.getModel()).getSelectedItem();
                if (item != null) {
                    setNewValue(item.env);
                    changeSupport.fireChange();
                }
            }
        }
    };

    private void buildSubclassesList(AdsClassDef init, List<AdsClassDef> result) {
        List<AdsClassDef> subclasses = init.getInheritance().findDirectSubclasses();
        for (AdsClassDef clazz : subclasses) {
            if (!result.contains(clazz)) {
                buildSubclassesList(clazz, result);
                result.add(clazz);
            }
        }
    }

    private void setNewValue(final ERuntimeEnvironmentType env) {
        if (context instanceof AdsMethodDef) {
            ((AdsMethodDef) context).setUsageEnvironment(env);
        } else if (context instanceof AdsClassDef.SourcePart) {
            ((AdsClassDef.SourcePart) context).setUsageEnvironment(env);
        } else if (context instanceof AdsPropertyDef) {
            ((AdsPropertyDef) context).setUsageEnvironment(env);
        } else if (context instanceof AdsExplorerItemDef) {
            ((AdsExplorerItemDef) context).setClientEnvironment(env);
        } else if (context instanceof AdsEditorPageDef) {
            ((AdsEditorPageDef) context).setClientEnvironment(env);
        } else if (context instanceof AdsFilterDef) {
            ((AdsFilterDef) context).setClientEnvironment(env);
        } else if (context instanceof AdsEditorPresentationDef) {
            ((AdsEditorPresentationDef) context).setClientEnvironment(env);
        }else if (context instanceof AdsSelectorPresentationDef) {
            ((AdsSelectorPresentationDef) context).setClientEnvironment(env);
        } else if (context instanceof AdsCommandDef) {
            ((AdsCommandDef) context).getPresentation().setClientEnvironment(env);
        } else if (context instanceof AdsEntityModelClassDef) {
            ((AdsEntityModelClassDef) context).setClientEnvironment(env);
        } else if (context instanceof AdsFormHandlerClassDef) {
            if (((AdsFormHandlerClassDef) context).getClientEnvironment() != env) {
                ((AdsFormHandlerClassDef) context).setClientEnvironment(env);
                updateSubclasses(context, env);
            }
        } else if (context instanceof AdsEntityObjectClassDef) {
            if (((AdsEntityObjectClassDef) context).getClientEnvironment() != env) {
                ((AdsEntityObjectClassDef) context).setClientEnvironment(env);
                updateSubclasses(context, env);
            }
        }
    }

    private void updateSubclasses(final IEnvDependent context, final ERuntimeEnvironmentType env) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                if (env != ERuntimeEnvironmentType.COMMON_CLIENT && DialogUtils.messageConfirmation("Apply option to all available subclasses of " + ((RadixObject) context).getQualifiedName())) {
                    RadixMutex.writeAccess(new Runnable() {

                        @Override
                        public void run() {
                            RequestProcessor.getDefault().post(new Runnable() {

                                @Override
                                public void run() {
                                    ProgressHandle handle = ProgressHandleFactory.createHandle("Update subclasses...");
                                    try {
                                        handle.start();

                                        AdsClassDef clazz = (AdsClassDef) context;
                                        List<AdsClassDef> subclasses = new LinkedList<AdsClassDef>();
                                        buildSubclassesList(clazz, subclasses);
                                        for (AdsClassDef c : subclasses) {
                                            if (c instanceof AdsEntityObjectClassDef) {
                                                ((AdsEntityObjectClassDef) c).setClientEnvironment(env);
                                            } else if (c instanceof AdsFormHandlerClassDef) {
                                                ((AdsFormHandlerClassDef) c).setClientEnvironment(env);
                                            }
                                        }
                                    } finally {
                                        handle.finish();
                                    }
                                }
                            });

                        }
                    });

                }

            }
        });
    }

    private Item defaultInit(List<Item> items, ERuntimeEnvironmentType current) {
        jComboBox1.setEnabled(!((RadixObject) context).isReadOnly());
        items.add(new Item(ERuntimeEnvironmentType.COMMON_CLIENT));
        items.add(new Item(ERuntimeEnvironmentType.EXPLORER));
        items.add(new Item(ERuntimeEnvironmentType.WEB));
        switch (current) {
            case COMMON_CLIENT:
                return items.get(0);
            case EXPLORER:
                return items.get(1);
            case WEB:
                return items.get(2);
            default:
                return null;
        }
    }

    public void update() {
        try {
            updating = true;
            jComboBox1.removeItemListener(listener);
            List<Item> items = new LinkedList<Item>();
            Item current = null;
            boolean opened = false;
            boolean canChange = true;
            if (context instanceof AdsPropertyDef) {
                canChange = ((AdsPropertyDef) context).canChangeClientEnvironment();
                current = defaultInit(items, ((AdsPropertyDef) context).getClientEnvironment());
                opened = true;
            } else if (context instanceof AdsMethodDef || context instanceof AdsPropertyDef || context instanceof AdsClassDef.SourcePart) {
                AdsClassDef owner = ((IAdsClassMember) context).getOwnerClass();
                if (owner.getUsageEnvironment() == ERuntimeEnvironmentType.COMMON_CLIENT && owner.isDual()) {
                    current = defaultInit(items, context.getUsageEnvironment());
                    opened = true;
                }
            } else if (context instanceof AdsExplorerItemDef) {
                current = defaultInit(items, ((AdsExplorerItemDef) context).getClientEnvironment());
                opened = true;
                canChange = ((AdsExplorerItemDef) context).canChangeClientEnvironment();
            } else if (context instanceof AdsEditorPageDef) {
                current = defaultInit(items, ((AdsEditorPageDef) context).getClientEnvironment());
                opened = true;
                canChange = ((AdsEditorPageDef) context).canChangeClientEnvironment();
            } else if (context instanceof AdsFilterDef) {
                current = defaultInit(items, ((AdsFilterDef) context).getClientEnvironment());
                opened = true;
                canChange = ((AdsFilterDef) context).canChangeClientEnvironment();
            } else if (context instanceof AdsEditorPresentationDef) {
                current = defaultInit(items, ((AdsEditorPresentationDef) context).getClientEnvironment());
                opened = true;
                canChange = ((AdsEditorPresentationDef) context).canChangeClientEnvironment();
                this.jLabel1.setVisible(false);
            } else if (context instanceof AdsSelectorPresentationDef) {
                current = defaultInit(items, ((AdsSelectorPresentationDef) context).getClientEnvironment());
                opened = true;
                canChange = ((AdsSelectorPresentationDef) context).canChangeClientEnvironment();
                this.jLabel1.setVisible(false);
            } else if (context instanceof AdsCommandDef) {
                current = defaultInit(items, ((AdsCommandDef) context).getPresentation().getClientEnvironment());
                canChange = ((AdsCommandDef) context).getPresentation().canChangeClientEnvironment();
                opened = true;
                this.jLabel1.setVisible(false);
            } else if (context instanceof AdsEntityObjectClassDef) {
                current = defaultInit(items, ((AdsEntityObjectClassDef) context).getClientEnvironment());
                canChange = ((AdsEntityObjectClassDef) context).canChangeClientEnvironment();
                this.jLabel1.setVisible(false);
                opened = true;
            } else if (context instanceof AdsFormHandlerClassDef) {
                current = defaultInit(items, ((AdsFormHandlerClassDef) context).getClientEnvironment());
                this.jLabel1.setVisible(false);
                opened = true;
            } else if (context instanceof AdsEntityModelClassDef) {
                current = defaultInit(items, ((AdsEntityModelClassDef) context).getClientEnvironment());
                canChange = ((AdsEntityModelClassDef) context).canChangeClientEnvironment();
                this.jLabel1.setVisible(false);
                opened = true;
            }

            if (current == null) {
                current = new Item(context.getUsageEnvironment());
                items.add(current);
            }
            Model model = new Model(items);
            jComboBox1.setModel(model);
            if (current != null) {
                model.setSelectedItem(current);
            }
            if (opened) {
                jComboBox1.addItemListener(listener);
                jComboBox1.setEnabled(!((RadixObject) context).isReadOnly() && canChange);
            } else {
                jComboBox1.setEnabled(false);
            }
        } finally {
            updating = false;
        }
    }

    public void removeChangeListener(ChangeListener listener) {
        changeSupport.removeChangeListener(listener);
    }

    public void addChangeListener(ChangeListener listener) {
        changeSupport.addChangeListener(listener);
    }
    private ChangeSupport changeSupport = new ChangeSupport(this);

    public static boolean isMeaningFullFor(IEnvDependent env) {
        if (env instanceof AdsPropertyDef || env instanceof AdsMethodDef) {
            AdsClassDef ownerClass = ((AdsClassMember) env).getOwnerClass();
            if (ownerClass.isDual() && ownerClass.getUsageEnvironment() == ERuntimeEnvironmentType.COMMON_CLIENT) {
                return true;
            }
        }
        return false;
    }
}
