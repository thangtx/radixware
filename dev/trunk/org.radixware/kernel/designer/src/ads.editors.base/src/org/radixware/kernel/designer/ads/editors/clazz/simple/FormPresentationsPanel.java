/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * FormPresentationsPanel.java
 *
 * Created on Jun 25, 2009, 4:15:00 PM
 */
package org.radixware.kernel.designer.ads.editors.clazz.simple;

import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.SwingUtilities;
import org.radixware.kernel.common.defs.ads.clazz.AdsClassDef;
import org.radixware.kernel.common.defs.ads.clazz.form.AdsFormHandlerClassDef;
import org.radixware.kernel.common.defs.ads.clazz.presentation.AbstractFormPresentations;
import org.radixware.kernel.common.defs.ads.common.ICustomViewable;
import org.radixware.kernel.common.defs.ads.common.ICustomViewable.CustomViewChangedEvent;
import org.radixware.kernel.common.enums.ERuntimeEnvironmentType;
import org.radixware.kernel.designer.common.dialogs.components.DefaultFormSizePanel;
import org.radixware.kernel.designer.common.editors.AdsDefinitionIconPresentation.IconIdChangeEvent;
import org.radixware.kernel.designer.common.editors.AdsDefinitionIconPresentation.IconIdStateChangeListener;


public class FormPresentationsPanel extends javax.swing.JPanel {

    private AbstractFormPresentations formPresentations;
    private boolean isUpdating = false;
    private boolean isReadonly = false;

    /**
     * Creates new form FormPresentationsPanel
     */
    public FormPresentationsPanel() {
        super();
        initComponents();
        setupAdditionalComponents();
    }

    private void setupAdditionalComponents() {
        editorPagesInheritedCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (isUpdating) {
                    return;
                }
                formPresentations.setEditorPagesInherited(editorPagesInheritedCheckBox.isSelected());
            }
        });
        customViewInheritedCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (isUpdating) {
                    return;
                }
                boolean isSelected = customViewInheritedCheckBox.isSelected();
                formPresentations.setCustomViewInherited(isSelected);
                update();
            }
        });
        useCustomViewCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (isUpdating) {
                    return;
                }
                formPresentations.getCustomViewSupport().setUseCustomView(ERuntimeEnvironmentType.EXPLORER, useCustomViewCheckBox.isSelected());
            }
        });
        useWebCustomViewCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (isUpdating) {
                    return;
                }
                formPresentations.getCustomViewSupport().setUseCustomView(ERuntimeEnvironmentType.WEB, useWebCustomViewCheckBox.isSelected());
            }
        });
        useInheritedIconCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (isUpdating) {
                    return;
                }
                final boolean isIconInherited = useInheritedIconCheckBox.isSelected();
                formPresentations.setIconInherited(isIconInherited);
                iconEditor.open(FormPresentationsPanel.this.formPresentations.getOwnerClass(), FormPresentationsPanel.this.formPresentations.getIconId());
                iconEditor.setReadonly(isIconInherited);
            }
        });

        iconEditor.getIconIdChangeSupport().addEventListener(new IconIdStateChangeListener() {
            @Override
            public void onEvent(IconIdChangeEvent e) {
                if (!isUpdating) {
                    FormPresentationsPanel.this.formPresentations.setIconId(e.iconId);
                }
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private final ICustomViewable.CustomViewChangeListener viewListener = new ICustomViewable.CustomViewChangeListener() {
        @Override
        public void onEvent(CustomViewChangedEvent e) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    update();
                }
            });
        }
    };

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editorPagesInheritedCheckBox = new javax.swing.JCheckBox();
        customViewInheritedCheckBox = new javax.swing.JCheckBox();
        useCustomViewCheckBox = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        useInheritedIconCheckBox = new javax.swing.JCheckBox();
        iconEditor = new org.radixware.kernel.designer.common.editors.AdsDefinitionIconPresentation();
        useWebCustomViewCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        defaultSizePanel = new org.radixware.kernel.designer.common.dialogs.components.DefaultFormSizePanel();

        setMaximumSize(null);

        editorPagesInheritedCheckBox.setText(org.openide.util.NbBundle.getMessage(FormPresentationsPanel.class, "FormPresentationsPanel.editorPagesInheritedCheckBox.text")); // NOI18N

        customViewInheritedCheckBox.setText(org.openide.util.NbBundle.getMessage(FormPresentationsPanel.class, "FormPresentationsPanel.customViewInheritedCheckBox.text")); // NOI18N

        useCustomViewCheckBox.setText(org.openide.util.NbBundle.getMessage(FormPresentationsPanel.class, "FormPresentationsPanel.useCustomViewCheckBox.text")); // NOI18N

        useInheritedIconCheckBox.setText(org.openide.util.NbBundle.getMessage(FormPresentationsPanel.class, "FormPresentationsPanel.useInheritedIconCheckBox.text")); // NOI18N

        useWebCustomViewCheckBox.setText(org.openide.util.NbBundle.getMessage(FormPresentationsPanel.class, "FormPresentationsPanel.useWebCustomViewCheckBox.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(defaultSizePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(defaultSizePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(useWebCustomViewCheckBox)
                            .addComponent(customViewInheritedCheckBox)
                            .addComponent(useCustomViewCheckBox)
                            .addComponent(useInheritedIconCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editorPagesInheritedCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(iconEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorPagesInheritedCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(customViewInheritedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useCustomViewCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useWebCustomViewCheckBox)
                        .addGap(55, 55, 55)
                        .addComponent(useInheritedIconCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(iconEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void open(AbstractFormPresentations formPresentations) {
        this.formPresentations = formPresentations;
        this.isReadonly = formPresentations.isReadOnly();
        defaultSizePanel.open(formPresentations);
        update();
        formPresentations.getCustomViewSupport().getChangeSupport().addEventListener(viewListener);
    }

    public void update() {
        isUpdating = true;
        AdsClassDef thisClass = formPresentations.getOwnerClass();

        AdsClassDef superClass = thisClass.getInheritance().findSuperClass().get();
        ERuntimeEnvironmentType thisClassEnv = thisClass.getClientEnvironment();

        final boolean allowInheritance = superClass != null && superClass instanceof AdsFormHandlerClassDef;

        final boolean readonly = formPresentations.isReadOnly();
        editorPagesInheritedCheckBox.setSelected(formPresentations.isEditorPagesInherited());
        editorPagesInheritedCheckBox.setEnabled(!readonly && allowInheritance);

        final boolean isCustomViewInherited = formPresentations.isCustomViewInherited();
        customViewInheritedCheckBox.setSelected(isCustomViewInherited);
        customViewInheritedCheckBox.setEnabled(!readonly && allowInheritance);

        useCustomViewCheckBox.setSelected(formPresentations.getCustomViewSupport().isUseCustomView(ERuntimeEnvironmentType.EXPLORER));
        useCustomViewCheckBox.setEnabled(!isCustomViewInherited && !readonly && thisClassEnv == ERuntimeEnvironmentType.COMMON_CLIENT || thisClassEnv == ERuntimeEnvironmentType.EXPLORER);

        useWebCustomViewCheckBox.setSelected(formPresentations.getCustomViewSupport().isUseCustomView(ERuntimeEnvironmentType.WEB));
        useWebCustomViewCheckBox.setEnabled(!isCustomViewInherited && !readonly && thisClassEnv == ERuntimeEnvironmentType.COMMON_CLIENT || thisClassEnv == ERuntimeEnvironmentType.WEB);


        useInheritedIconCheckBox.setSelected(formPresentations.isIconInherited());
        useInheritedIconCheckBox.setEnabled(!readonly && allowInheritance);

        iconEditor.open(FormPresentationsPanel.this.formPresentations.getOwnerClass(), FormPresentationsPanel.this.formPresentations.getIconId());
        iconEditor.setReadonly(!formPresentations.isReadOnly() && FormPresentationsPanel.this.formPresentations.isIconInherited());
        defaultSizePanel.update();
        isUpdating = false;
    }

    public void setReadonly(boolean readonly) {
//        this.isReadonly = formPresentations.isReadOnly() || readonly;
//
//        if (this.isReadonly) {
//            editorPagesInheritedCheckBox.setEnabled(false);
//            customViewInheritedCheckBox.setEnabled(false);
//            useCustomViewCheckBox.setEnabled(false);
//            useInheritedIconCheckBox.setEnabled(false);
//            iconEditor.setReadonly(true);
//        } else {
//            editorPagesInheritedCheckBox.setEnabled(true);
//            customViewInheritedCheckBox.setEnabled(true);
//            useCustomViewCheckBox.setEnabled(true);
//            useInheritedIconCheckBox.setEnabled(true);
//            //try to enable
//            if (!formPresentations.isIconInherited()) {
//                iconEditor.setReadonly(false);
//            }
//        }
    }

    @Override
    public Dimension getMinimumSize() {
        return getPreferredSize();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox customViewInheritedCheckBox;
    private org.radixware.kernel.designer.common.dialogs.components.DefaultFormSizePanel defaultSizePanel;
    private javax.swing.JCheckBox editorPagesInheritedCheckBox;
    private org.radixware.kernel.designer.common.editors.AdsDefinitionIconPresentation iconEditor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox useCustomViewCheckBox;
    private javax.swing.JCheckBox useInheritedIconCheckBox;
    private javax.swing.JCheckBox useWebCustomViewCheckBox;
    // End of variables declaration//GEN-END:variables
}
