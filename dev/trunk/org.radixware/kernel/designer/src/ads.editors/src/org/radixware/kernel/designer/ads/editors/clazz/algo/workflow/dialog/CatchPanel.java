/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.VisitorProvider;
import org.radixware.kernel.common.defs.ads.clazz.AdsExceptionClassDef;
import org.radixware.kernel.common.defs.ads.clazz.algo.object.*;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ChooseDefinition;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ChooseDefinitionCfg;


public class CatchPanel extends EditorDialog.EditorPanel<AdsCatchObject> {

    public CatchPanel(AdsCatchObject node) {
        super(node);
        initComponents();
        
        textName.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                obj.setName(textName.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                obj.setName(textName.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                obj.setName(textName.getText());
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelName = new javax.swing.JLabel();
        textName = new javax.swing.JTextField();
        labelException = new javax.swing.JLabel();
        textException = new javax.swing.JTextField();
        buttonException = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(32767, 70));
        setMinimumSize(new java.awt.Dimension(250, 70));
        setPreferredSize(new java.awt.Dimension(250, 70));
        setRequestFocusEnabled(false);

        labelName.setText(org.openide.util.NbBundle.getMessage(CatchPanel.class, "CatchPanel.labelName.text")); // NOI18N

        labelException.setText(org.openide.util.NbBundle.getMessage(CatchPanel.class, "CatchPanel.labelException.text")); // NOI18N

        textException.setEditable(false);

        buttonException.setText(org.openide.util.NbBundle.getMessage(CatchPanel.class, "CatchPanel.buttonException.text")); // NOI18N
        buttonException.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExceptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelException)
                    .addComponent(labelName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textName, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(textException, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonException, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelName)
                    .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelException)
                    .addComponent(buttonException)
                    .addComponent(textException, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonExceptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExceptionActionPerformed

    VisitorProvider provider = new VisitorProvider() {
        @Override
        public boolean isContainer(RadixObject object) {
            return true;
        }
        @Override
        public boolean isTarget(RadixObject object) {
            return object instanceof AdsExceptionClassDef;
        }
    };
        
    AdsPage page = obj.getOwnerPage();
    ChooseDefinitionCfg cfg = ChooseDefinitionCfg.Factory.newInstance(page,provider);
    AdsExceptionClassDef exceptionDef = (AdsExceptionClassDef)ChooseDefinition.chooseDefinition(cfg);
    
    if (obj.getExceptionDef() != exceptionDef) {
        obj.setExceptionDef(exceptionDef);
        textException.setText(exceptionDef != null ? exceptionDef.getQualifiedName() : NbBundle.getMessage(getClass(), "Panel.empty.text"));
    }

}//GEN-LAST:event_buttonExceptionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonException;
    private javax.swing.JLabel labelException;
    private javax.swing.JLabel labelName;
    private javax.swing.JTextField textException;
    private javax.swing.JTextField textName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void init() {
        textName.setText(obj.getName());
        AdsExceptionClassDef exceptionDef = obj.getExceptionDef();
        textException.setText(exceptionDef != null ? exceptionDef.getQualifiedName() : NbBundle.getMessage(getClass(), "Panel.empty.text"));
    }

    @Override
    public void apply() {
    }

    @Override
    public String getTitle() {
        return NbBundle.getMessage(getClass(), "CTL_CatchPanel");
    }
}
