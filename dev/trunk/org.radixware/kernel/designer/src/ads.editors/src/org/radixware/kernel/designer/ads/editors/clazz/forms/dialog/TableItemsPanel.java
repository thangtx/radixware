/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.forms.dialog;

import java.awt.Component;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractCellEditor;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellEditor;
import org.openide.explorer.propertysheet.PropertyPanel;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.RadixObjects.ContainerChangedEvent;
import org.radixware.kernel.common.defs.RadixObjects.ContainerChangesListener;
import org.radixware.kernel.common.defs.RadixObjects.EChangeType;
import org.radixware.kernel.common.defs.ads.localization.AdsMultilingualStringDef;
import org.radixware.kernel.common.defs.ads.ui.AdsAbstractUIDef;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef.Column;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef.Columns;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef.Items;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef.Row;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef.Rows;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef.WidgetItem;
import org.radixware.kernel.common.defs.ads.ui.AdsMetaInfo;
import org.radixware.kernel.common.defs.ads.ui.AdsUIProperty;
import org.radixware.kernel.common.defs.ads.ui.AdsUIUtil;
import org.radixware.kernel.common.defs.ads.ui.UiProperties;
import org.radixware.kernel.common.resources.icons.RadixIcon;
import org.radixware.kernel.designer.ads.editors.clazz.forms.palette.Item;
import org.radixware.kernel.designer.ads.editors.clazz.forms.props.UIPropertySupport;


public class TableItemsPanel extends JPanel implements ContainerChangesListener {

    private final AdsItemWidgetDef widget;
    private final Columns columns;
    private final Rows rows;
    private final AdsAbstractUIDef uiDef;

    public TableItemsPanel(AdsAbstractUIDef uiDef,AdsItemWidgetDef widget) {
        this.widget = widget;
        this.uiDef = uiDef;
        this.columns = widget.getColumns();
        this.rows = widget.getRows();
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        scrollPane = new javax.swing.JScrollPane();
        propTable = new javax.swing.JTable();
        panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.inactiveCaption));
        setMinimumSize(new java.awt.Dimension(400, 200));
        setPreferredSize(new java.awt.Dimension(400, 200));
        setRequestFocusEnabled(false);
        setLayout(new java.awt.BorderLayout());

        splitPane.setDividerLocation(200);

        propTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Title"
            }
        ));
        propTable.setGridColor(new java.awt.Color(213, 213, 213));
        propTable.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        scrollPane.setViewportView(propTable);

        splitPane.setRightComponent(scrollPane);

        panel.setMinimumSize(new java.awt.Dimension(160, 10));
        panel.setPreferredSize(new java.awt.Dimension(160, 100));
        panel.setLayout(new java.awt.BorderLayout());

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(itemTable);

        panel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        splitPane.setLeftComponent(panel);

        add(splitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable itemTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel;
    private javax.swing.JTable propTable;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSplitPane splitPane;
    // End of variables declaration//GEN-END:variables
    private ItemTableModel itemModel;
    private PropTableModel propModel;

    public final void init() {
        columns.getContainerChangesSupport().addEventListener(this);
        rows.getContainerChangesSupport().addEventListener(this);

        itemTable.setModel(itemModel = new ItemTableModel());
        propTable.setModel(propModel = new PropTableModel());

        itemTable.setDefaultRenderer(WidgetItem.class, new ItemCellRenderer());
        itemTable.setDefaultRenderer(Row.class, new RowCellRenderer());

        itemTable.getSelectionModel().addListSelectionListener(propModel);
        itemTable.getColumnModel().getSelectionModel().addListSelectionListener(propModel);
        itemTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        itemTable.setColumnSelectionAllowed(false);
        itemTable.setRowSelectionAllowed(false);
        itemTable.setCellSelectionEnabled(true);

        itemTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        itemTable.setRowHeight(20);

        if (columns.size() > 0 && rows.size() > 0) {
            itemTable.getSelectionModel().setSelectionInterval(0, 0);
            itemTable.getColumnModel().getSelectionModel().setSelectionInterval(1, 1);
        }

        itemTable.requestFocusInWindow();

        propTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        propTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        propTable.setRowHeight(18);

        propTable.setDefaultRenderer(AdsUIProperty.class, new PropertyCellRenderer());
        propTable.setDefaultEditor(AdsUIProperty.class, new PropertyCellEditor());
    }

    @Override
    public void onEvent(ContainerChangedEvent e) {
        if (e.changeType.equals(EChangeType.SWAP)) {
            RadixObject o1 = e.object, o2 = e.object2;
            if (o1 instanceof Column && o2 instanceof Column) {
                itemModel.swapColumns((Column) o1, (Column) o2);
            }
            if (o1 instanceof Row && o2 instanceof Row) {
                itemModel.swapRows((Row) o1, (Row) o2);
            }
        }
        itemModel.updateItems();
        itemModel.fireTableStructureChanged();
        if (columns.size() > 0 && rows.size() > 0) {
            itemTable.getSelectionModel().setSelectionInterval(0, 0);
            itemTable.getColumnModel().getSelectionModel().setSelectionInterval(1, 1);
        }
    }

    class ItemTableModel extends AbstractTableModel {

        private final Items items = widget.getItems();

        public ItemTableModel() {
            updateItems();
        }

        public void swapColumns(Column column1, Column column2) {
            int c1 = columns.indexOf(column1);
            int c2 = columns.indexOf(column2);
            for (WidgetItem item : items) {
                if (item.column == c1) {
                    item.column = c2;
                } else if (item.column == c2) {
                    item.column = c1;
                }
            }
        }

        public void swapRows(Row row1, Row row2) {
            int r1 = rows.indexOf(row1);
            int r2 = rows.indexOf(row2);
            for (WidgetItem item : items) {
                if (item.row == r1) {
                    item.row = r2;
                } else if (item.row == r2) {
                    item.row = r1;
                }
            }
        }

        public final void updateItems() {
            WidgetItem[][] it = getItemsAsArray();
            for (int i = 0; i < it.length; i++) {
                for (int j = 0; j < it[0].length; j++) {
                    if (i >= rows.size() || j >= columns.size()) {
                        it[i][j].delete();
                    }
                }
            }
            it = getItemsAsArray();
            for (int i = 0; i < rows.size(); i++) {
                for (int j = 0; j < columns.size(); j++) {
                    if (i > it.length - 1 || j > it[0].length - 1 || it[i][j] == null) {
                        WidgetItem item = new WidgetItem();
                        item.row = i;
                        item.column = j;
                        items.add(item);
                    }
                }
            }
        }

        public final WidgetItem[][] getItemsAsArray() {
            int colCount = columns.size();
            int rowCount = rows.size();
            for (WidgetItem item : items) {
                colCount = Math.max(item.column + 1, colCount);
                rowCount = Math.max(item.row + 1, rowCount);
            }
            WidgetItem its[][] = new WidgetItem[rowCount][colCount];
            for (WidgetItem item : items) {
                its[item.row][item.column] = item;
            }
            return its;
        }

        public Items getItems() {
            return items;
        }

        @Override
        public int getColumnCount() {
            return columns.size() + 1;
        }

        @Override
        public String getColumnName(int c) {
            if (c > 0) {
                Column column = columns.get(c - 1);
                AdsUIProperty.LocalizedStringRefProperty text = (AdsUIProperty.LocalizedStringRefProperty) AdsUIUtil.getUiProperty(column, "text");
                return Item.getTextById(column, text.getStringId());
            }
            return "";
        }

        @Override
        public int getRowCount() {
            return rows.size();
        }

        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        public void fireTableCellUpdated(WidgetItem item) {
            super.fireTableCellUpdated(item.row, item.column + 1);
        }

        @Override
        public Object getValueAt(int r, int c) {
            if (c > 0) {
                WidgetItem it[][] = getItemsAsArray();
                return it[r][c - 1];
            }
            return rows.get(r);
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return false;//col > 0;
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            assert col > 0;
            WidgetItem it[][] = getItemsAsArray();
            WidgetItem item = it[row][col - 1];
            AdsUIProperty.LocalizedStringRefProperty text = (AdsUIProperty.LocalizedStringRefProperty) AdsUIUtil.getUiProperties(item).getByName("text");
            if (text == null) {
                text = new AdsUIProperty.LocalizedStringRefProperty("text");
                AdsUIUtil.getUiProperties(item).add(text);
            }
            if (text.getStringId() == null) {
                AdsMultilingualStringDef sDef = AdsMultilingualStringDef.Factory.newInstance();
                widget.findLocalizingBundle().getStrings().getLocal().add(sDef);
            }
            Item.setTextById(widget, text.getStringId(), (String) value);

            fireTableCellUpdated(row, col);
            propModel.fireTableStructureChanged();
        }
    }

    private class ItemCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            WidgetItem item = (WidgetItem) value;

            AdsUIProperty.LocalizedStringRefProperty text = (AdsUIProperty.LocalizedStringRefProperty) AdsUIUtil.getUiProperty(item, "text");
            AdsUIProperty.ImageProperty icon = (AdsUIProperty.ImageProperty) AdsUIUtil.getUiProperty(item, "icon");
            AdsUIProperty.BrushProperty background = (AdsUIProperty.BrushProperty) AdsUIUtil.getUiProperty(item, "background");
            AdsUIProperty.BrushProperty foreground = (AdsUIProperty.BrushProperty) AdsUIUtil.getUiProperty(item, "foreground");

            setText(Item.getTextById(item, text.getStringId()));
            if (isSelected) {
                setBackground(table.getSelectionBackground());
                setForeground(foreground.color);
            } else {
                setBackground(background.color);
                setForeground(foreground.color);
            }

            RadixIcon radixIcon = Item.getIconById(item, icon.getImageId());
            setIcon(radixIcon != null ? radixIcon.getIcon(13) : null);

            return this;
        }
    }

    private class RowCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            AdsUIProperty.LocalizedStringRefProperty text = (AdsUIProperty.LocalizedStringRefProperty) AdsUIUtil.getUiProperty((Row) value, "text");
            Component comp = super.getTableCellRendererComponent(table, Item.getTextById((Row) value, text.getStringId()), isSelected, false, row, column);

            JTableHeader header = table.getTableHeader();
            if (header != null) {
                setForeground(header.getForeground());
                setBackground(header.getBackground());
                setFont(header.getFont());
            }

            return comp;
        }
    }

    // properties table model
    private class PropTableModel extends AbstractTableModel implements ListSelectionListener {

        private String[] columns = new String[]{
            NbBundle.getBundle(TableItemsPanel.class).getString("PropTable.Name"),
            NbBundle.getBundle(TableItemsPanel.class).getString("PropTable.Value")
        };
        private WidgetItem item = null;
        private List<AdsUIProperty> rows = null;

        public WidgetItem getItem() {
            return item;
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public int getRowCount() {
            return item == null || rows == null ? 0 : rows.size();
        }

        @Override
        public String getColumnName(int col) {
            return columns[col];
        }

        @Override
        public Object getValueAt(int row, int col) {
            return col > 0 ? rows.get(row) : rows.get(row).getName();
        }

        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return col != 0 && !widget.isReadOnly();
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            rows.set(row, (AdsUIProperty) value);
            fireTableCellUpdated(row, col);
        }

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting()) {
                return;
            }

            int row = itemTable.getSelectedRow();
            int column = itemTable.getSelectedColumn();

            item = row >= 0 && column > 0 ? (WidgetItem) itemModel.getValueAt(row, column) : null;
            if (item != null) {
                rows = new ArrayList<>(AdsMetaInfo.getProps(AdsMetaInfo.WIDGET_ITEM_CLASS, widget));
                UiProperties props = AdsUIUtil.getUiProperties(item);
                
                for (int i = 0; i < rows.size(); i++) {
                    if (rows.get(i).getName().equals("resizeMode")) {
                        rows.remove(i);
                        break;
                    }
                }
                
                for (int i = 0; i < rows.size(); i++) {
                    AdsUIProperty p = props.getByName(rows.get(i).getName());
                    
                    if (p != null) {
                        rows.set(i, p);
                    } else {
                        rows.set(i, rows.get(i).duplicate());
                    }
                }
            }
            fireTableStructureChanged();
        }
    }

    // property cell renderer
    private class PropertyCellEditor extends AbstractCellEditor implements TableCellEditor {

        private AdsUIProperty prop;

        public PropertyCellEditor() {
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int r, int c) {
            prop = (AdsUIProperty) value;
            final WidgetItem item = ((PropTableModel) table.getModel()).getItem();
            UIPropertySupport sup = new UIPropertySupport(prop, uiDef,item) {
                @Override
                public void setValue(Object val) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                    super.setValue(val);
                    itemModel.fireTableCellUpdated(item);
                }
            };
            return new PropertyPanel(sup, PropertyPanel.PREF_TABLEUI);
        }

        @Override
        public Object getCellEditorValue() {
            return prop;
        }
    }

    // property cell renderer
    private class PropertyCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int r, int c) {
            AdsUIProperty prop = (AdsUIProperty) value;
            WidgetItem item = ((PropTableModel) table.getModel()).getItem();
            UIPropertySupport sup = new UIPropertySupport(prop,uiDef, item);
            return new PropertyPanel(sup, PropertyPanel.PREF_TABLEUI);
        }
    }
}
