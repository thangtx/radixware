/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * OverwrittenEnumChooser.java
 *
 * Created on 10.11.2009, 11:18:40
 */

package org.radixware.kernel.designer.ads.editors.enumeration.creation;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.ChangeSupport;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.Definition;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.VisitorProvider;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumDef;
import org.radixware.kernel.common.defs.ads.module.AdsModule;
import org.radixware.kernel.common.utils.RadixObjectsUtils;
import org.radixware.kernel.common.utils.Utils;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ChooseDefinition;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ChooseDefinitionCfg;
import org.radixware.kernel.designer.common.dialogs.components.state.StateManager;
import org.radixware.kernel.common.resources.RadixWareIcons;


public class OverwrittenEnumChooser extends javax.swing.JPanel {

    /** Creates new form OverwrittenEnumChooser */
    public OverwrittenEnumChooser() {
        initComponents();

        overField.setEnabled(false);
        overField.setValue("<Not Defined>");
        javax.swing.JButton btn = overField.addButton();
        btn.setIcon(RadixWareIcons.DIALOG.CHOOSE.getIcon(13, 13));
        ActionListener btnListener = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                OverwrittenEnumChooser.this.chooseOverwrittenEnum();
            }

        };
        btn.addActionListener(btnListener);

        nameField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                changeSupport.fireChange();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                changeSupport.fireChange();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                changeSupport.fireChange();
            }

        });
    }

    private void chooseOverwrittenEnum(){
        ChooseDefinitionCfg cfg = ChooseDefinitionCfg.Factory.forOverwrite(context, new VisitorProvider() {

            @Override
            public boolean isContainer(RadixObject object) {
                return true;
            }

            @Override
            public boolean isTarget(RadixObject object) {
                //allow to override Ads constant of higher layers only
                return object instanceof AdsEnumDef &&
                        context.getSegment().getLayer().isHigherThan(((AdsEnumDef) object).getModule().getSegment().getLayer()) &&
                        Utils.equals(context.getId(), ((AdsEnumDef) object).getModule().getId());
            }
        });
        Definition def = ChooseDefinition.chooseDefinition(cfg);
        if (def != null){
            toOverwrite = (AdsEnumDef) def;
            overField.setValue(def.getQualifiedName());
            nameField.setText(def.getName());
            changeSupport.fireChange();
        }
    }

    private AdsModule context;
    private AdsEnumDef toOverwrite;

    public void open(AdsModule context){
        this.context = context;
    }

    public String getEnumName(){
        return nameField.getText();
    }

    public AdsEnumDef getOverwrittenEnum(){
        return toOverwrite;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        overField = new org.radixware.kernel.common.components.ExtendableTextField();
        nameField = new javax.swing.JTextField();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(OverwrittenEnumChooser.class, "OverwrittenEnum-Title")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(OverwrittenEnumChooser.class, "TransparentEnum-Name")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addComponent(overField, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(overField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField nameField;
    private org.radixware.kernel.common.components.ExtendableTextField overField;
    // End of variables declaration//GEN-END:variables

    private ChangeSupport changeSupport = new ChangeSupport(this);

    public final void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    public final void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }
    private final StateManager stateManager = new StateManager(this);

    public boolean isComplete() {
        if (overField.getValue().equals("<Not Defined>")) {
            stateManager.warning(NbBundle.getMessage(OverwrittenEnumChooser.class, "OverwrittenEnum-Error"));
            return false;
        }

        final String name = nameField.getText();
        if (!RadixObjectsUtils.isCorrectName(name)) {
            stateManager.error(NbBundle.getMessage(TransparentEnumChooser.class, "TransparentEnum-NameError"));
            return false;
        }
        
        stateManager.ok();
        return true;
    }
}
