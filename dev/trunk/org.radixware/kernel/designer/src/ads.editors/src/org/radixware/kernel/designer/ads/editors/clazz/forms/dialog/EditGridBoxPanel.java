/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.forms.dialog;

import java.awt.Color;
import java.awt.Component;
import java.util.LinkedList;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import org.radixware.kernel.common.defs.RadixObjects;
import org.radixware.kernel.common.defs.ads.ui.AdsUIItemDef;
import org.radixware.kernel.designer.ads.editors.clazz.forms.common.GridBoxWebLayout;
import org.radixware.kernel.designer.common.dialogs.RadixWareDesignerIcon;

import java.beans.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import org.radixware.kernel.common.defs.ads.ui.AdsAbstractUIDef;
import org.radixware.kernel.common.defs.ads.ui.rwt.AdsRwtWidgetDef;


abstract class EditGridBoxPanel<T extends RadixObjects, Y extends AdsUIItemDef> extends EditorDialog.EditorPanel<Y> {

    public EditGridBoxPanel(AdsAbstractUIDef uiDef,Y widget) {
        super(uiDef,widget);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        splitPane = new javax.swing.JSplitPane();
        scrollPane = new javax.swing.JScrollPane();
        tableSchemeRow = new javax.swing.JTable();
        panel = new javax.swing.JPanel();
        scrollPane2 = new javax.swing.JScrollPane();
        rowsList = new javax.swing.JList();
        panel2 = new javax.swing.JPanel();
        buttonAddRow = new javax.swing.JButton();
        buttonDelRow = new javax.swing.JButton();
        buttonUpRow = new javax.swing.JButton();
        buttonDownRow = new javax.swing.JButton();
        splitPane1 = new javax.swing.JSplitPane();
        scrollPane1 = new javax.swing.JScrollPane();
        tableSchemeCol = new javax.swing.JTable();
        panel1 = new javax.swing.JPanel();
        scrollPane3 = new javax.swing.JScrollPane();
        colsList = new javax.swing.JList();
        panel3 = new javax.swing.JPanel();
        buttonAddCol = new javax.swing.JButton();
        buttonDelCol = new javax.swing.JButton();
        buttonRightCol = new javax.swing.JButton();
        buttonLeftCol = new javax.swing.JButton();

        jTabbedPane1.setName(""); // NOI18N

        splitPane.setDividerLocation(160);
        splitPane.setLastDividerLocation(160);
        splitPane.setVerifyInputWhenFocusTarget(false);

        tableSchemeRow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"empty cell"}
            },
            new String [] {
                "Title"
            }
        ));
        tableSchemeRow.setGridColor(new java.awt.Color(213, 213, 213));
        tableSchemeRow.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        scrollPane.setViewportView(tableSchemeRow);

        splitPane.setRightComponent(scrollPane);

        panel.setMinimumSize(new java.awt.Dimension(160, 10));
        panel.setPreferredSize(new java.awt.Dimension(160, 100));
        panel.setLayout(new java.awt.BorderLayout());

        rowsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        rowsList.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        scrollPane2.setViewportView(rowsList);

        panel.add(scrollPane2, java.awt.BorderLayout.CENTER);

        buttonAddRow.setIcon(RadixWareDesignerIcon.CREATE.ADD.getIcon());
        buttonAddRow.setFocusPainted(false);
        buttonAddRow.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddRowActionPerformed(evt);
            }
        });
        panel2.add(buttonAddRow);

        buttonDelRow.setIcon(RadixWareDesignerIcon.DELETE.DELETE.getIcon());
        buttonDelRow.setFocusPainted(false);
        buttonDelRow.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonDelRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDelRowActionPerformed(evt);
            }
        });
        panel2.add(buttonDelRow);

        buttonUpRow.setIcon(RadixWareDesignerIcon.ARROW.MOVE_UP.getIcon());
        buttonUpRow.setFocusPainted(false);
        buttonUpRow.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonUpRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpRowActionPerformed(evt);
            }
        });
        panel2.add(buttonUpRow);

        buttonDownRow.setIcon(RadixWareDesignerIcon.ARROW.MOVE_DOWN.getIcon());
        buttonDownRow.setFocusPainted(false);
        buttonDownRow.setMaximumSize(new java.awt.Dimension(32, 32));
        buttonDownRow.setMinimumSize(new java.awt.Dimension(32, 32));
        buttonDownRow.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonDownRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDownRowActionPerformed(evt);
            }
        });
        panel2.add(buttonDownRow);

        panel.add(panel2, java.awt.BorderLayout.PAGE_END);

        splitPane.setLeftComponent(panel);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(EditGridBoxPanel.class, "EditGridBoxPanel.splitPane.TabConstraints.tabTitle"), splitPane); // NOI18N

        splitPane1.setDividerLocation(160);
        splitPane1.setLastDividerLocation(160);
        splitPane1.setName(""); // NOI18N

        tableSchemeCol.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Title"
            }
        ));
        tableSchemeCol.setColumnSelectionAllowed(true);
        tableSchemeCol.setGridColor(new java.awt.Color(213, 213, 213));
        tableSchemeCol.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        tableSchemeCol.setRowSelectionAllowed(false);
        scrollPane1.setViewportView(tableSchemeCol);

        splitPane1.setRightComponent(scrollPane1);

        panel1.setMinimumSize(new java.awt.Dimension(160, 10));
        panel1.setPreferredSize(new java.awt.Dimension(160, 100));
        panel1.setLayout(new java.awt.BorderLayout());

        colsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        colsList.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        scrollPane3.setViewportView(colsList);

        panel1.add(scrollPane3, java.awt.BorderLayout.CENTER);

        buttonAddCol.setIcon(RadixWareDesignerIcon.CREATE.ADD.getIcon());
        buttonAddCol.setFocusPainted(false);
        buttonAddCol.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonAddCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddColActionPerformed(evt);
            }
        });
        panel3.add(buttonAddCol);

        buttonDelCol.setIcon(RadixWareDesignerIcon.DELETE.DELETE.getIcon());
        buttonDelCol.setFocusPainted(false);
        buttonDelCol.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonDelCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDelColActionPerformed(evt);
            }
        });
        panel3.add(buttonDelCol);

        buttonRightCol.setIcon(RadixWareDesignerIcon.ARROW.RIGHT.getIcon());
        buttonRightCol.setFocusPainted(false);
        buttonRightCol.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonRightCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRightColActionPerformed(evt);
            }
        });
        panel3.add(buttonRightCol);

        buttonLeftCol.setIcon(RadixWareDesignerIcon.ARROW.LEFT.getIcon());
        buttonLeftCol.setFocusPainted(false);
        buttonLeftCol.setMaximumSize(new java.awt.Dimension(32, 32));
        buttonLeftCol.setMinimumSize(new java.awt.Dimension(32, 32));
        buttonLeftCol.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonLeftCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLeftColActionPerformed(evt);
            }
        });
        panel3.add(buttonLeftCol);

        panel1.add(panel3, java.awt.BorderLayout.PAGE_END);

        splitPane1.setLeftComponent(panel1);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(EditGridBoxPanel.class, "EditGridBoxPanel.splitPane1.TabConstraints.tabTitle"), splitPane1); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(EditGridBoxPanel.class, "EditGridBoxPanel.jTabbedPane1.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddRowActionPerformed
        addRow();//insert new row
    }//GEN-LAST:event_buttonAddRowActionPerformed

    private void buttonDelRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDelRowActionPerformed
        deleteRow();//remove row
    }//GEN-LAST:event_buttonDelRowActionPerformed

    private void buttonUpRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpRowActionPerformed
        upRow();
    }//GEN-LAST:event_buttonUpRowActionPerformed

    private void buttonDownRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDownRowActionPerformed
        downRow();
    }//GEN-LAST:event_buttonDownRowActionPerformed

    private void buttonAddColActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddColActionPerformed
        addColumn();
    }//GEN-LAST:event_buttonAddColActionPerformed

    private void buttonDelColActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDelColActionPerformed
        deleteColumn();
    }//GEN-LAST:event_buttonDelColActionPerformed

    private void buttonRightColActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRightColActionPerformed
        rightColumn();
    }//GEN-LAST:event_buttonRightColActionPerformed

    private void buttonLeftColActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLeftColActionPerformed
        leftColumn();
    }//GEN-LAST:event_buttonLeftColActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddCol;
    private javax.swing.JButton buttonAddRow;
    private javax.swing.JButton buttonDelCol;
    private javax.swing.JButton buttonDelRow;
    private javax.swing.JButton buttonDownRow;
    private javax.swing.JButton buttonLeftCol;
    private javax.swing.JButton buttonRightCol;
    private javax.swing.JButton buttonUpRow;
    private javax.swing.JList colsList;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panel2;
    private javax.swing.JPanel panel3;
    private javax.swing.JList rowsList;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JScrollPane scrollPane3;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JSplitPane splitPane1;
    private javax.swing.JTable tableSchemeCol;
    private javax.swing.JTable tableSchemeRow;
    // End of variables declaration//GEN-END:variables
    private IListModel<T> rowsListModel;
    private ITableModel<T> rowsTableModel;
    private ITableModel<T> colsTableModel;
    private IListModel<T> colsListModel;

    @Override
    public void init() {
        System.out.println("init");

        rowsList.setModel(rowsListModel = createRowsListModel());
        tableSchemeRow.setModel(rowsTableModel = createRowTableModel());//схема строк в таблице

        colsList.setModel(colsListModel = createColsListModel());
        tableSchemeCol.setModel(colsTableModel = createColTableModel());//схема колонок в таблице

        JTable rowTable1 = new RowNumberTable(tableSchemeRow);//вертикальный список строк в таблице
        JTable rowTable2 = new RowNumberTable(tableSchemeCol);

        scrollPane.setRowHeaderView(rowTable1);
        scrollPane1.setRowHeaderView(rowTable2);

        rowsList.getSelectionModel().addListSelectionListener(rowsTableModel);
        colsList.getSelectionModel().addListSelectionListener(colsTableModel);

        tableSchemeRow.setDefaultRenderer(Object.class, new CellRenderer());
        tableSchemeCol.setDefaultRenderer(Object.class, new CellRenderer());

        tableSchemeRow.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        tableSchemeRow.setRowHeight(18);

        tableSchemeCol.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        tableSchemeCol.setRowHeight(18);

        tableSchemeRow.setColumnSelectionAllowed(false);
        tableSchemeRow.setRowSelectionAllowed(true);

        tableSchemeCol.setColumnSelectionAllowed(true);
        tableSchemeCol.setRowSelectionAllowed(false);

        if (rowsListModel.getSize() > 0) {
            rowsList.getSelectionModel().setSelectionInterval(0, 0);
            tableSchemeRow.setRowSelectionInterval(0, 0);
        }

        if (colsListModel.getSize() > 0) {
            colsList.getSelectionModel().setSelectionInterval(0, 0);
            tableSchemeCol.setColumnSelectionInterval(0, 0);
        }

        final ListSelectionModel rsModel = tableSchemeRow.getSelectionModel();

        rsModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                    return;
                }

                int i = rowsList.getSelectedIndex();
                int idx = rsModel.isSelectionEmpty() ? 0 : i;
                rsModel.setSelectionInterval(idx, idx);
                enableButtons();

            }
        });

        final ListSelectionModel csModel = tableSchemeCol.getColumnModel().getSelectionModel();

        csModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                    return;
                }
                int i = colsList.getSelectedIndex();
                int idx = csModel.isSelectionEmpty() ? 0 : i;
                csModel.setSelectionInterval(idx, idx);
                enableButtons();
            }
        });

    }

    public final IListModel<T> getListModel() {
        return rowsListModel;
    }

    public final IListModel<T> getColsListModel() {
        return colsListModel;
    }

    public final ITableModel<T> getRowTableModel() {
        return rowsTableModel;
    }

    public final ITableModel<T> getColTableModel() {
        return colsTableModel;
    }

    public final JList getRowsList() {
        return rowsList;
    }

    public final JList getColumnsList() {
        return colsList;
    }

    protected abstract IListModel<T> createRowsListModel();

    protected abstract IListModel<T> createColsListModel();

    protected abstract ITableModel<T> createRowTableModel();

    protected abstract ITableModel<T> createColTableModel();

    private void update() {
        if (rowsList.getComponentCount() <= 0) {
            return;
        }

        enableButtons();
        rowsList.clearSelection();
        colsList.clearSelection();
    }

    void enableButtons() {
        int r = getRowIndex();
        int rs = rowsListModel.getSize();
        buttonAddRow.setEnabled(rs > 0 && !widget.isReadOnly());
        buttonDelRow.setEnabled(rs > 0 && !widget.isReadOnly());
        buttonDownRow.setEnabled(rs > 0 && !widget.isReadOnly() && r < rs - 1 && r >= 0);
        buttonUpRow.setEnabled(rs > 0 && !widget.isReadOnly() && r > 0);

        int c = getColIndex();
        int cs = colsListModel.getSize();
        buttonAddCol.setEnabled(cs > 0 && !widget.isReadOnly());
        buttonDelCol.setEnabled(cs > 0 && !widget.isReadOnly());
        buttonLeftCol.setEnabled(cs > 0 && c > 0 && !widget.isReadOnly());
        buttonRightCol.setEnabled(cs > 0 && c >= 0 && c < cs - 1 && !widget.isReadOnly());
    }

    void upRow() {
        int idx = getRowIndex();
        selectRow(idx);
        rowsListModel.up(idx);
        update();
        int nidx = idx - 1;
        selectRow(nidx);
    }

    void rightColumn() {
        int idx = getColIndex();
        selectCol(idx);
        colsListModel.up(idx);
        update();
        int nidx = idx + 1;
        selectCol(nidx);
    }

    void downRow() {
        int idx = getRowIndex();
        selectRow(idx);
        rowsListModel.down(idx);
        update();
        int nidx = idx + 1;
        selectRow(nidx);
    }

    void leftColumn() {
        int idx = getColIndex();
        selectCol(idx);
        colsListModel.down(idx);
        update();
        int nidx = idx - 1;
        selectCol(nidx);
    }

    void deleteRow() {
        int idx = getRowIndex();
        selectRow(idx);
        boolean isRowRemoved = rowsListModel.del(idx);

        if (!isRowRemoved) {
            System.out.println("row is not removed: " + idx);
            selectRow(idx);
        }

        update();
        int nidx = Math.max(0, idx - 1);
        selectRow(nidx);
    }

    void deleteColumn() {
        int idx = getColIndex();
        selectCol(idx);
        boolean isColRemoved = colsListModel.del(idx);

        if (!isColRemoved) {
            System.out.println("column is not removed: " + idx);
            selectCol(idx);
        }
        update();
        int nidx = Math.max(0, idx - 1);
        selectRow(nidx);
    }

    void addRow() {
        int idx = getRowIndex();
        selectRow(idx);
        boolean isRowAdded = rowsListModel.add(idx + 1);
        update();
        int nidx = Math.max(0, idx + 1);
        selectRow(nidx);
    }

    void addColumn() {
        int idx = getColIndex();
        selectCol(idx);
        boolean isColAdded = colsListModel.add(idx + 1);
        update();
        int nidx = Math.max(idx + 1, 0);
        selectCol(nidx);
    }

    int getRowIndex() {
        int i = rowsList.getSelectedIndex();
        return i >= 0 ? i : 0;
    }

    int getColIndex() {
        int i = colsList.getSelectedIndex();
        return i >= 0 ? i : 0;
    }

    void selectRow(int idx) {

        if (idx < 0 || idx >= rowsListModel.getSize()) {
            idx = 0;
        }

        tableSchemeRow.setRowSelectionInterval(idx, idx);
        rowsList.setSelectedIndex(idx);
    }

    void selectCol(int idx) {

        if (idx < 0 || idx >= colsListModel.getSize()) {
            idx = 0;
        }

        tableSchemeCol.setColumnSelectionInterval(idx, idx);
        colsList.setSelectedIndex(idx);
    }

    public interface ITableModel<T extends RadixObjects> extends javax.swing.table.TableModel, ListSelectionListener {

        T getItem();

        LinkedList getRows();

        LinkedList getColumns();
    }

    public interface IListModel<T extends RadixObjects> extends javax.swing.ListModel<Object> {

        void fireChanged(int idx);

        void up(int idx);

        void down(int idx);

        boolean del(int idx);

        boolean add(int i);
    }

    public class CellRenderer extends JLabel implements TableCellRenderer {

        Color occupy = new Color(205, 239, 250);
        Color spanned = new Color(247, 234, 205);
        Color empty = Color.white;

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

            JLabel cell = new JLabel();
            cell.setOpaque(true);
            cell.setBackground(empty);
            final GridBoxWebLayout.CellInfo data = GridBoxWebLayout.getComponentAt(row, column);
            if (data != null) {
                final AdsRwtWidgetDef widgetName = data.widget;
                cell.setText(widgetName.toString());
                cell.setToolTipText(widgetName.getName());
                cell.setForeground(table.getForeground());
                if (table.equals(tableSchemeRow)) {

                    if (isSelected) {
                        cell.setBackground(table.getSelectionBackground());
                        cell.setForeground(table.getSelectionForeground());
                    } else {
                        if (data.colspan > 1 || data.rowspan > 1) {
                            cell.setBackground(spanned);
                        } else {
                            cell.setBackground(occupy);
                        }
                    }
                } else if (tableSchemeCol.equals(table)) {

                    if (isSelected) {
                        cell.setBackground(table.getSelectionBackground());
                        cell.setForeground(table.getSelectionForeground());
                    } else {
                        if (data.colspan > 1 || data.rowspan > 1) {
                            cell.setBackground(spanned);
                        } else {
                            cell.setBackground(occupy);
                        }
                    }
                }
            }
            return cell;
        }
    }

    protected static abstract class TableSchemeModel<T extends RadixObjects> extends AbstractTableModel implements ITableModel<T> {

        protected T item;
        protected LinkedList rows = getRows();
        protected LinkedList columns = getColumns();
        String[] colname;
        String[] rowname;

        @Override
        public String getColumnName(int column) {
            return column >= 0 ? column + "" : "";//номер колонки
        }

        @Override
        public T getItem() {
            return item;
        }

        @Override
        public int getColumnCount() {
            int c = columns.size();
            return c;
        }

        @Override
        public int getRowCount() {
            int r = rows.size();
            return r;
        }

        @Override
        public Object getValueAt(int row, int col) {
            Object obj = null;
            return obj;
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return false;
        }
    }

    public class RowNumberTable extends JTable implements ChangeListener, PropertyChangeListener {

        private JTable main;

        public RowNumberTable(JTable table) {
            main = table;
            main.addPropertyChangeListener(this);

            setFocusable(false);
            setAutoCreateColumnsFromModel(false);
            setModel(main.getModel());
            setSelectionModel(main.getSelectionModel());

            TableColumn column = new TableColumn();
            addColumn(column);
            column.setCellRenderer(new RowNumberRenderer());

            getColumnModel().getColumn(0).setResizable(true);
            setPreferredScrollableViewportSize(getPreferredSize());
        }

        @Override
        public void addNotify() {
            super.addNotify();
            Component c = getParent();
            if (c instanceof JViewport) {
                JViewport viewport = (JViewport) c;
                viewport.addChangeListener(this);
            }
        }

        @Override
        public int getRowCount() {
            return main.getRowCount();
        }

        @Override
        public int getRowHeight(int row) {
            return main.getRowHeight(row);
        }

        @Override
        public Object getValueAt(int row, int column) {
            return Integer.toString(row);//count from 0
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }

        @Override
        public void stateChanged(ChangeEvent e) {

            JViewport viewport = (JViewport) e.getSource();
            JScrollPane scrollPane = (JScrollPane) viewport.getParent();
            scrollPane.getVerticalScrollBar().setValue(viewport.getViewPosition().y);//
        }

        @Override
        public void propertyChange(PropertyChangeEvent e) {

            if ("selectionModel".equals(e.getPropertyName())) {
                setSelectionModel(main.getSelectionModel());
            }

            if ("model".equals(e.getPropertyName())) {
                setModel(main.getModel());
            }
        }

        private class RowNumberRenderer extends DefaultTableCellRenderer {

            public RowNumberRenderer() {
                setHorizontalAlignment(JLabel.CENTER);
            }

            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if (table != null) {
                    JTableHeader header = table.getTableHeader();

                    if (header != null) {
                        setForeground(header.getForeground());
                        setBackground(header.getBackground());
                        setFont(header.getFont());
                    }
                }

                setText((value == null) ? "" : value.toString());
                return this;
            }
        }
    }
}
