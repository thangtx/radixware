/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * TransparentEnumChooser.java
 *
 * Created on 10.11.2009, 10:24:38
 */
package org.radixware.kernel.designer.ads.editors.enumeration.creation;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.ChangeSupport;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.ads.AdsDefinition;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumDef;
import org.radixware.kernel.common.defs.ads.module.AdsModule;
import org.radixware.kernel.common.defs.ads.module.ModuleDefinitions;
import org.radixware.kernel.common.enums.ERuntimeEnvironmentType;
import org.radixware.kernel.common.utils.RadixObjectsUtils;
import org.radixware.kernel.designer.common.dialogs.choosetype.RadixPlatformClassPanel;
import org.radixware.kernel.designer.common.dialogs.components.state.StateManager;
import org.radixware.kernel.common.resources.RadixWareIcons;


public class TransparentEnumChooser extends javax.swing.JPanel {

    /** Creates new form TransparentEnumChooser */
    public TransparentEnumChooser() {
        initComponents();

        publishedField.setEnabled(false);
        publishedField.setValue("<Not Defined>");
        javax.swing.JButton btn = publishedField.addButton();
        btn.setIcon(RadixWareIcons.DIALOG.CHOOSE.getIcon(13, 13));
        ActionListener btnListener = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                TransparentEnumChooser.this.choosePublishedEnum();
            }
        };
        btn.addActionListener(btnListener);

        nameField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                changeSupport.fireChange();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                changeSupport.fireChange();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                changeSupport.fireChange();
            }
        });

    }

    private void choosePublishedEnum() {
        String type = RadixPlatformClassPanel.choosePlatformEnum(context, ERuntimeEnvironmentType.COMMON);
        if (type != null && !type.isEmpty()) {
            publishedField.setValue(type);
            int point = type.lastIndexOf(".");
            String classname = type.substring(point + 1, type.length());
            nameField.setText(classname);
            changeSupport.fireChange();
        }
    }
    private AdsModule context;

    public void open(AdsModule context) {
        this.context = context;
    }

    public String getEnumName(){
        return nameField.getText();
    }

    public String getPublishedName(){
        return publishedField.getValue().toString();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        publishedField = new org.radixware.kernel.common.components.ExtendableTextField();
        nameField = new javax.swing.JTextField();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(TransparentEnumChooser.class, "TransparentEnum-Published")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(TransparentEnumChooser.class, "TransparentEnum-Name")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(publishedField, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(publishedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField nameField;
    private org.radixware.kernel.common.components.ExtendableTextField publishedField;
    // End of variables declaration//GEN-END:variables
    private ChangeSupport changeSupport = new ChangeSupport(this);

    public final void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    public final void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }
    private final StateManager stateManager = new StateManager(this);

    public boolean isComplete() {
        if (publishedField.getValue().equals("<Not Defined>")) {
            stateManager.warning(NbBundle.getMessage(TransparentEnumChooser.class, "TransparentEnum-Error"));
            return false;
        }

        final String name = nameField.getText();
        if (!RadixObjectsUtils.isCorrectName(name)) {
            stateManager.error(NbBundle.getMessage(TransparentEnumChooser.class, "TransparentEnum-NameError"));
            return false;
        }

        if (!checkPublishedClasses(publishedField.getValue().toString())) {
            stateManager.error(NbBundle.getMessage(TransparentEnumChooser.class, "Creature-RepeatedNameError"));
            return false;
        }

        stateManager.ok();
        return true;
    }

    private boolean checkPublishedClasses(String chosen) {
        ModuleDefinitions defs = context.getDefinitions();
        for (int i = 0; i <= defs.size() - 1; i++) {
            AdsDefinition d = defs.get(i);
            if (d instanceof AdsEnumDef) {
                AdsEnumDef cl = (AdsEnumDef) d;
                if (cl.isPlatformEnumPublisher()) {
                    String published = cl.getPublishedPlatformEnumName();
                    if (published != null &&
                            !published.isEmpty()) {
                        if (published.equals(chosen)) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
}
