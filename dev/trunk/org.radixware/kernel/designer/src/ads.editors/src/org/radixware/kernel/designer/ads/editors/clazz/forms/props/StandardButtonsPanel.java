/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * MergePanel.java
 *
 * Created on 6 Ноябрь 2008 г., 14:25
 */

package org.radixware.kernel.designer.ads.editors.clazz.forms.props;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import org.openide.explorer.propertysheet.PropertyEnv;
import org.openide.util.Exceptions;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.ads.ui.AdsUIProperty;
import org.radixware.kernel.common.defs.ads.ui.enums.EStandardButton;
import org.radixware.kernel.common.defs.ads.ui.enums.UIEnum;


public class StandardButtonsPanel extends JPanel implements PropertyChangeListener {

    private PropertyEnv env;
    private StandardButtonsEditor editor;
    
    private List<JCheckBox> checks = new ArrayList<JCheckBox>();

    StandardButtonsPanel(StandardButtonsEditor editor, PropertyEnv env) {
        this.env = env;
        this.editor = editor;

        env.setState(PropertyEnv.STATE_NEEDS_VALIDATION);
        env.addPropertyChangeListener(this);

        setLayout(new java.awt.BorderLayout ());
        setBorder(BorderFactory.createEmptyBorder(12, 12, 0, 11));
        
        initComponents();

        checks.add(checkOk);
        checks.add(checkSave);
        checks.add(checkSaveAll);

        checks.add(checkOpen);
        checks.add(checkYes);
        checks.add(checkYesToAll);

        checks.add(checkNo);
        checks.add(checkNoToAll);
        checks.add(checkAbort);

        checks.add(checkRetry);
        checks.add(checkIgnore);
        checks.add(checkClose);

        checks.add(checkCancel);
        checks.add(checkDiscard);
        checks.add(checkHelp);

        checks.add(checkApply);
        checks.add(checkReset);
        checks.add(checkRestoreDefaults);

        AdsUIProperty.SetProperty prop = getProperty();
        List<UIEnum> values = Arrays.asList(prop.getValues());

        for (JCheckBox check: checks) {
            EStandardButton value = EStandardButton.getForValue(check.getText());
            check.setSelected(values.contains(value));
            check.setEnabled(!getNode().isReadOnly());
        }
    }

    private AdsUIProperty.SetProperty getProperty() {
        return (AdsUIProperty.SetProperty)editor.getValue();
    }

    private RadixObject getNode() {
        return ((UIPropertySupport)editor.getSource()).getNode();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkOk = new javax.swing.JCheckBox();
        checkSave = new javax.swing.JCheckBox();
        checkSaveAll = new javax.swing.JCheckBox();
        checkYes = new javax.swing.JCheckBox();
        checkYesToAll = new javax.swing.JCheckBox();
        checkNo = new javax.swing.JCheckBox();
        checkOpen = new javax.swing.JCheckBox();
        checkNoToAll = new javax.swing.JCheckBox();
        checkAbort = new javax.swing.JCheckBox();
        checkRetry = new javax.swing.JCheckBox();
        checkIgnore = new javax.swing.JCheckBox();
        checkClose = new javax.swing.JCheckBox();
        checkCancel = new javax.swing.JCheckBox();
        checkDiscard = new javax.swing.JCheckBox();
        checkHelp = new javax.swing.JCheckBox();
        checkApply = new javax.swing.JCheckBox();
        checkReset = new javax.swing.JCheckBox();
        checkRestoreDefaults = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.inactiveCaption));
        setMinimumSize(new java.awt.Dimension(200, 140));
        setPreferredSize(new java.awt.Dimension(320, 260));

        checkOk.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkOk.text")); // NOI18N

        checkSave.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkSave.text")); // NOI18N

        checkSaveAll.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkSaveAll.text")); // NOI18N

        checkYes.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkYes.text")); // NOI18N

        checkYesToAll.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkYesToAll.text")); // NOI18N

        checkNo.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkNo.text")); // NOI18N

        checkOpen.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkOpen.text")); // NOI18N

        checkNoToAll.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkNoToAll.text")); // NOI18N

        checkAbort.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkAbort.text")); // NOI18N

        checkRetry.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkRetry.text")); // NOI18N

        checkIgnore.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkIgnore.text")); // NOI18N

        checkClose.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkClose.text")); // NOI18N

        checkCancel.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkCancel.text")); // NOI18N

        checkDiscard.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkDiscard.text")); // NOI18N

        checkHelp.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkHelp.text")); // NOI18N

        checkApply.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkApply.text")); // NOI18N

        checkReset.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkReset.text")); // NOI18N

        checkRestoreDefaults.setText(org.openide.util.NbBundle.getMessage(StandardButtonsPanel.class, "StandardButtonsPanel.checkRestoreDefaults.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkOk)
                    .addComponent(checkAbort)
                    .addComponent(checkNoToAll)
                    .addComponent(checkNo)
                    .addComponent(checkYesToAll)
                    .addComponent(checkYes)
                    .addComponent(checkOpen)
                    .addComponent(checkSave)
                    .addComponent(checkSaveAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkRetry)
                    .addComponent(checkIgnore)
                    .addComponent(checkClose)
                    .addComponent(checkCancel)
                    .addComponent(checkDiscard)
                    .addComponent(checkHelp)
                    .addComponent(checkApply)
                    .addComponent(checkReset)
                    .addComponent(checkRestoreDefaults))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkOk)
                    .addComponent(checkRetry))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkSave)
                    .addComponent(checkIgnore))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkSaveAll)
                    .addComponent(checkClose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkOpen)
                    .addComponent(checkCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkYes)
                    .addComponent(checkDiscard))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkYesToAll)
                    .addComponent(checkHelp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkNo)
                    .addComponent(checkApply))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkNoToAll)
                    .addComponent(checkReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkAbort)
                    .addComponent(checkRestoreDefaults))
                .addContainerGap(25, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkAbort;
    private javax.swing.JCheckBox checkApply;
    private javax.swing.JCheckBox checkCancel;
    private javax.swing.JCheckBox checkClose;
    private javax.swing.JCheckBox checkDiscard;
    private javax.swing.JCheckBox checkHelp;
    private javax.swing.JCheckBox checkIgnore;
    private javax.swing.JCheckBox checkNo;
    private javax.swing.JCheckBox checkNoToAll;
    private javax.swing.JCheckBox checkOk;
    private javax.swing.JCheckBox checkOpen;
    private javax.swing.JCheckBox checkReset;
    private javax.swing.JCheckBox checkRestoreDefaults;
    private javax.swing.JCheckBox checkRetry;
    private javax.swing.JCheckBox checkSave;
    private javax.swing.JCheckBox checkSaveAll;
    private javax.swing.JCheckBox checkYes;
    private javax.swing.JCheckBox checkYesToAll;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (PropertyEnv.PROP_STATE.equals(evt.getPropertyName()) && evt.getNewValue() == PropertyEnv.STATE_VALID) {
            List<UIEnum> values = new ArrayList<UIEnum>();
            for (JCheckBox check: checks) {
                EStandardButton value = EStandardButton.getForValue(check.getText());
                if (check.isSelected())
                    values.add(value);
            }

            if (values.isEmpty())
                values.add(EStandardButton.NoButton);

            AdsUIProperty.SetProperty prop = getProperty();
            prop.setValues(values.toArray(new UIEnum[values.size()]));

            editor.setValue(prop);
            try {
                ((UIPropertySupport)editor.getSource()).setValue(prop);
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }
}
