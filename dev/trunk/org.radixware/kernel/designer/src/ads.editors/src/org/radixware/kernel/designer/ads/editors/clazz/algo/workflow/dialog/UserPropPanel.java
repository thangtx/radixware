/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog;

import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.event.ChangeEvent;
import javax.swing.ListSelectionModel;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import org.radixware.kernel.common.defs.ExtendableDefinitions.EScope;
import org.radixware.kernel.common.defs.RadixObjectIcon;
import org.radixware.kernel.common.defs.ads.AdsDefinitionIcon;
import org.radixware.kernel.common.defs.ads.AdsValAsStr;
import org.radixware.kernel.common.defs.ads.clazz.algo.object.*;
import org.radixware.kernel.common.defs.ads.clazz.algo.object.AdsAppObject.Prop;
import org.radixware.kernel.common.defs.ads.clazz.entity.AdsEntityObjectClassDef;
import org.radixware.kernel.common.defs.ads.clazz.members.AdsPropertyDef;
import org.radixware.kernel.common.defs.ads.clazz.members.AdsUserPropertyDef;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumDef;
import org.radixware.kernel.common.defs.ads.enumeration.AdsEnumItemDef;
import org.radixware.kernel.common.defs.ads.module.AdsSearcher;
import org.radixware.kernel.common.defs.ads.type.AdsEnumType;
import org.radixware.kernel.common.defs.ads.type.AdsType;
import org.radixware.kernel.common.defs.ads.type.AdsTypeDeclaration;
import org.radixware.kernel.common.defs.value.ValAsStr;
import org.radixware.kernel.common.enums.EEditPossibility;
import org.radixware.kernel.common.enums.EValType;
import org.radixware.kernel.common.resources.icons.RadixIcon;
import org.radixware.kernel.common.types.Id;
import org.radixware.kernel.common.utils.RadixResourceBundle;
import org.radixware.kernel.common.utils.Utils;


public class UserPropPanel extends EditorDialog.EditorPanel<AdsAppObject> implements PropertyChangeListener, ChangeListener {

    private final List<AdsUserPropertyDef> userProps = new ArrayList<AdsUserPropertyDef>();
    private final List<ValAsStr> userPropValues = new ArrayList<ValAsStr>();
    private int currentRow = -1;

    public UserPropPanel(AdsAppObject node) {
        super(node);
        initComponents();

        classId = node.getPropByName("class");
        userPropIds = node.getPropByName("userPropIds");

        tableUserProps.setModel(new UserPropModel());
        tableUserProps.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tableUserProps.setDefaultRenderer(AdsTypeDeclaration.class, new TypeCellRenderer());
        tableUserProps.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    updateValueEditor();
                }
            }
        });
        valueEditor.setDefaultValue(EValType.STR);

        tableUserProps.setEnabled(!node.isReadOnly());
        valueEditor.setEnabled(!node.isReadOnly());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableUserProps = new javax.swing.JTable();
        valueEditor = new org.radixware.kernel.designer.common.dialogs.components.PropertyValueEditPanel();
        labelValue = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.inactiveCaption));
        setMinimumSize(new java.awt.Dimension(500, 430));
        setPreferredSize(new java.awt.Dimension(500, 430));
        setRequestFocusEnabled(false);

        tableUserProps.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Name", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableUserProps);
        tableUserProps.getColumnModel().getColumn(0).setPreferredWidth(50);
        tableUserProps.getColumnModel().getColumn(0).setHeaderValue(RadixResourceBundle.getMessage(UserPropPanel.class, "UserPropPanel.tableUserProps.columnModel.title0")); // NOI18N
        tableUserProps.getColumnModel().getColumn(1).setMinWidth(70);
        tableUserProps.getColumnModel().getColumn(1).setPreferredWidth(70);
        tableUserProps.getColumnModel().getColumn(1).setMaxWidth(70);
        tableUserProps.getColumnModel().getColumn(1).setHeaderValue(RadixResourceBundle.getMessage(UserPropPanel.class, "UserPropPanel.tableUserProps.columnModel.title1")); // NOI18N
        tableUserProps.getColumnModel().getColumn(2).setHeaderValue(RadixResourceBundle.getMessage(UserPropPanel.class, "UserPropPanel.tableUserProps.columnModel.title2")); // NOI18N

        labelValue.setText(org.openide.util.NbBundle.getMessage(UserPropPanel.class, "UserPropPanel.labelValue.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(labelValue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valueEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelValue))
                .addContainerGap())
        );

        labelValue.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(UserPropPanel.class, "UserPropPanel.labelValue.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelValue;
    private javax.swing.JTable tableUserProps;
    private org.radixware.kernel.designer.common.dialogs.components.PropertyValueEditPanel valueEditor;
    // End of variables declaration//GEN-END:variables
    private AdsAppObject.Prop classId;
    private AdsAppObject.Prop userPropIds;
    private AdsEntityObjectClassDef classDef = null;

    @Override
    public void init() {
        if (classId.getValue() != null) {
            classDef = (AdsEntityObjectClassDef) AdsSearcher.Factory.newAdsDefinitionSearcher(obj).findById(Id.Factory.loadFrom(classId.getValue().toString())).get();
        }

        initialize();
        apply(); //to refresh data list
    }

    private void updateValueEditor() {
        currentRow = tableUserProps.getSelectedRow();
        if (currentRow < 0 || currentRow >= userProps.size()) {
            valueEditor.setVisible(false);
            currentRow = -1;
        } else {
            valueEditor.setVisible(true);
            valueEditor.removeChangeListener(UserPropPanel.this);

            final AdsTypeDeclaration type = userProps.get(currentRow).getValue().getType();
            final AdsType t = type.resolve(obj).get();
            if (t instanceof AdsEnumType) {
                valueEditor.setEnum(((AdsEnumType) t).getSource(), userPropValues.get(currentRow));
            } else {
                valueEditor.setValue(type.getTypeId(), userPropValues.get(currentRow));
            }

            valueEditor.addChangeListener(UserPropPanel.this);
        }
    }

    private UserPropModel getModel() {
        return (UserPropModel) tableUserProps.getModel();
    }

    private void initialize() {
        userProps.clear();
        userPropValues.clear();

        if (classDef != null) {
            for (AdsPropertyDef p : classDef.getProperties().get(EScope.ALL)) {
                if (!(p instanceof AdsUserPropertyDef)) {
                    continue;
                }
                AdsUserPropertyDef prop = (AdsUserPropertyDef) p;
                EEditPossibility ep = prop.getPresentationSupport() != null ? prop.getPresentationSupport().getPresentation().getEditOptions().getEditPossibility() : null;
//                if (ep != EEditPossibility.ALWAYS && ep != EEditPossibility.ON_CREATE && ep != EEditPossibility.PROGRAMMATICALLY)
//                    continue;
                userProps.add(prop);
                Prop property = obj.getPropBySourceId(prop.getId());
                userPropValues.add(property != null ? property.getValue() : ValAsStr.Factory.newCopy(prop.getValue().getInitial() == null ? null : prop.getValue().getInitial().getValAsStr()));
            }
        }

        updateValueEditor();
    }

    @Override
    public void apply() {
        List<Prop> props = new ArrayList<Prop>();

        // register user properties
        int idx = 0;
        for (AdsUserPropertyDef p : userProps) {
            props.add(new Prop(p.getName(), p.getId(), Prop.PUBLIC | Prop.SETTING, p.getValue().getType(), true, userPropValues.get(idx++)));
        }

        // register programmical user properties
        if (classDef != null) {
            for (AdsPropertyDef p : classDef.getProperties().get(EScope.ALL)) {
                if (!(p instanceof AdsUserPropertyDef)) {
                    continue;
                }
                AdsUserPropertyDef prop = (AdsUserPropertyDef) p;
                EEditPossibility ep = prop.getPresentationSupport() != null ? prop.getPresentationSupport().getPresentation().getEditOptions().getEditPossibility() : null;
                if (EEditPossibility.PROGRAMMATICALLY == ep) {
                    props.add(new Prop(prop.getName(), prop.getId(), Prop.PUBLIC, prop.getValue().getType(), true, ValAsStr.Factory.newCopy(prop.getValue().getInitial() == null ? null : prop.getValue().getInitial().getValAsStr())));
                }
            }
        }

        obj.setUserProps(props);

        // write ids
        String ids = "";
        idx = 0;
        for (Prop prop : props) {
            ids += prop.getSourceId();
            if (++idx < props.size()) {
                ids += "\n";
            }
        }
        userPropIds.setValue(ids);
    }

    @Override
    public String getTitle() {
        return RadixResourceBundle.getMessage(getClass(), "CTL_UserPropProperties");
    }

    @Override
    public RadixIcon getIcon() {
        return AdsDefinitionIcon.Property.PROPERTY_USER;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getNewValue() == classDef) {
            return;
        }
        classDef = (AdsEntityObjectClassDef) evt.getNewValue();
        initialize();
        getModel().fireTableDataChanged();
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (currentRow < 0 || currentRow >= userProps.size()/* || !valueEditor.isVisible()*/) {
            return;
        }
        userPropValues.set(currentRow, valueEditor.getValue());
        getModel().fireTableRowsUpdated(currentRow, currentRow);
    }

    class UserPropModel extends AbstractTableModel {

        private final String[] columns = new String[]{
            RadixResourceBundle.getMessage(UserPropPanel.class, "UserPropPanel.tableUserProps.columnModel.title0"),
            RadixResourceBundle.getMessage(UserPropPanel.class, "UserPropPanel.tableUserProps.columnModel.title1"),
            RadixResourceBundle.getMessage(UserPropPanel.class, "UserPropPanel.tableUserProps.columnModel.title2")
        };

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public int getRowCount() {
            return userProps.size();
        }

        @Override
        public String getColumnName(int col) {
            return columns[col];
        }

        @Override
        public Object getValueAt(int row, int col) {
            switch (col) {
                case 0:
                    return userProps.get(row).getValue().getType();
                case 1:
                    return userProps.get(row).getName();
                case 2:
                    final ValAsStr valAsStr = userPropValues.get(row);
                    final AdsTypeDeclaration type = userProps.get(row).getValue().getType();
                    final AdsType t = type.resolve(obj).get();
                    if (t instanceof AdsEnumType) {
                        final AdsEnumDef en = ((AdsEnumType) t).getSource();
                        for (AdsEnumItemDef it : en.getItems().list(EScope.ALL)) {
                            if (Utils.equals(it.getValue(), valAsStr)) {
                                return en.getName() + "::" + it.getName();
                            }
                        }
                    }
                    return valAsStr == null ? "" : String.valueOf(valAsStr);
            }
            return null;
        }

        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return false;
        }
    }

    private class TypeCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            AdsTypeDeclaration type = value == null ? AdsTypeDeclaration.Factory.undefinedType() : (AdsTypeDeclaration) value;
            setText(type.getName(obj));
            if (isSelected) {
                setBackground(table.getSelectionBackground());
                setForeground(table.getSelectionForeground());
            } else {
                setBackground(table.getBackground());
                setForeground(table.getForeground());
            }
            RadixIcon icon = type != null ? RadixObjectIcon.getForValType(type.getTypeId()) : null;
            setIcon(icon != null ? icon.getIcon(13) : null);
            return this;
        }
    }
}
