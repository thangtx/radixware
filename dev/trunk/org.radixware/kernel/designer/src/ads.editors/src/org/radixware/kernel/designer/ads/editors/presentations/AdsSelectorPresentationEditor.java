/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.presentations;

import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import javax.swing.JScrollPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.ads.clazz.presentation.AdsSelectorPresentationDef;
import org.radixware.kernel.common.defs.ads.common.AdsCondition;
import org.radixware.kernel.designer.ads.editors.exploreritems.UsedContextlessCommandsListView;
import org.radixware.kernel.designer.common.annotations.registrators.EditorFactoryRegistration;
import org.radixware.kernel.designer.common.editors.RadixObjectEditor;
import org.radixware.kernel.designer.common.general.editors.IEditorFactory;
import org.radixware.kernel.designer.common.general.editors.IRadixObjectEditor;
import org.radixware.kernel.designer.common.general.editors.OpenInfo;


public class AdsSelectorPresentationEditor extends RadixObjectEditor<AdsSelectorPresentationDef> {

    @EditorFactoryRegistration
    public static final class Factory implements IEditorFactory<AdsSelectorPresentationDef> {

        @Override
        public IRadixObjectEditor<AdsSelectorPresentationDef> newInstance(AdsSelectorPresentationDef sp) {
            return new AdsSelectorPresentationEditor(sp);
        }
    }

    /** Creates new form AdsSelectorPresentationEditorView */
    public AdsSelectorPresentationEditor(AdsSelectorPresentationDef sp) {
        super(sp);

        initComponents();
        
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        commonContainer.setLayout(gbl);
        c.anchor = GridBagConstraints.NORTH;
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1.0;
        c.weighty = 1.0;
        gbl.setConstraints(commonProps, c);
        commonContainer.add(commonProps);
        c.gridy = 1;
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weighty = 0.0;
        gbl.setConstraints(contextlessView, c);
        commonContainer.add(contextlessView);

        javax.swing.JPanel additionalPanel = new javax.swing.JPanel();
        additionalPanel.setLayout(new BorderLayout());
        additionalPanel.add(commonContainer, BorderLayout.NORTH);

        scroll = new javax.swing.JScrollPane(additionalPanel);
        mainPane.add(commonProps.getName(), scroll);
        mainPane.add(selectorTable.getName(), selectorTable);
        conditionScroll = new javax.swing.JScrollPane(conditionPanel);
        mainPane.add(conditionPanel.getName(), conditionScroll);
        addonsScroll = new javax.swing.JScrollPane(addonsPanel);
        mainPane.add(addonsPanel.getName(), addonsScroll);
        restrictionsScroll = new javax.swing.JScrollPane(restrictionsPanel);
        mainPane.add(restrictionsPanel.getName(), restrictionsScroll);
        setLayout(new BorderLayout());
        add(mainPane, BorderLayout.CENTER);

        commonProps.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                AdsSelectorPresentationEditor.this.update();
            }

        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private javax.swing.JTabbedPane mainPane = new javax.swing.JTabbedPane();
    private javax.swing.JPanel commonContainer = new javax.swing.JPanel();

    private CommonPropertiesPanel commonProps = new CommonPropertiesPanel();
    private JScrollPane scroll = new JScrollPane();

    private UsedContextlessCommandsListView contextlessView = new UsedContextlessCommandsListView();
    private SelectorTablePanel selectorTable = new SelectorTablePanel();

    private ConditionsPanel conditionPanel = new ConditionsPanel();
    private JScrollPane conditionScroll = new JScrollPane();

    private SelectorAddonsPanel addonsPanel = new SelectorAddonsPanel();
    private JScrollPane addonsScroll = new JScrollPane();

    private InheritableRestrictionsPanel restrictionsPanel = new InheritableRestrictionsPanel();
    private JScrollPane restrictionsScroll = new JScrollPane();

    public AdsSelectorPresentationDef getSelectorPresentation() {
        return getRadixObject();
    }

    @Override
    public boolean open(OpenInfo info) {
        final AdsSelectorPresentationDef sp = getSelectorPresentation();

        commonProps.open(sp);
        selectorTable.open(sp);
        conditionPanel.open(sp);
        addonsPanel.open(sp);
        contextlessView.open(sp);
        restrictionsPanel.open(sp);

        RadixObject target = info.getTarget();
        AdsCondition condition = sp.getCondition();
        if (target.equals(sp.getColumns()) ||
            sp.getColumns().isParentOf(target)){
            mainPane.setSelectedComponent(selectorTable);
        } else if (target.equals(condition.getFrom()) ||
                   target.equals(condition.getWhere()) ||
                   condition.getFrom().isParentOf(target) ||
                   condition.getWhere().isParentOf(target)) {
            mainPane.setSelectedComponent(conditionScroll);
        } else if (target.equals(sp.getAddons())) {
            mainPane.setSelectedComponent(addonsScroll);
        } else if (target.equals(sp.getRestrictions())) {
            mainPane.setSelectedComponent(restrictionsScroll);
        } else {
            mainPane.setSelectedComponent(scroll); 
        }

        return super.open(info);
    }

    @Override
    public void update() {
        commonProps.update();
        selectorTable.update();
        conditionPanel.update();
        addonsPanel.update();
        contextlessView.update();
        restrictionsPanel.update();
    }
}
