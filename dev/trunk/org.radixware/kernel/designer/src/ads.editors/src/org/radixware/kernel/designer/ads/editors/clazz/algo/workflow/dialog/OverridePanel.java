/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog;

import java.util.Set;
import java.util.HashSet;
import java.util.StringTokenizer;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import org.radixware.kernel.common.defs.ads.clazz.algo.object.*;
import org.radixware.kernel.common.defs.ads.clazz.members.AdsUserPropertyDef;
import org.radixware.kernel.common.enums.EDefinitionIdPrefix;
import org.radixware.kernel.common.resources.icons.RadixIcon;
import org.radixware.kernel.common.utils.RadixResourceBundle;
import org.radixware.kernel.common.resources.RadixWareIcons;
import org.radixware.kernel.common.types.Id;
import org.radixware.kernel.common.utils.Utils;


public class OverridePanel extends EditorDialog.EditorPanel<AdsAppObject> {

    public static class OverrideList {
/*
        private final static String[] PROP_NAMES = new String[] {
            "title",
            "headerTitle",
            "footerTitle",
            "priority",
            "presentationIds",
            "submitVariants",
            "contentSaving",
            "clerk",
            "clerkRoleGuids",
            "adminRoleGuids",
            "accessArea",
        };
*/
        private final AdsAppObject node;
        private final Set<String> names = new HashSet<String>();
        private final Set<Id> props = new HashSet<Id>();

        public OverrideList(AdsAppObject node) {
            this.node = node;
            final AdsAppObject.Prop overrideMask = node.getPropByName("overrideMask");
            if (overrideMask.getValue() != null) {
                StringTokenizer t = new StringTokenizer(String.valueOf(Utils.nvl(overrideMask.getValue(), "")), "\n");
                while (t.hasMoreTokens()) {
                    final String token = t.nextToken();
                    if (token != null && !token.isEmpty()) {
                        if (token.startsWith(EDefinitionIdPrefix.ADS_USER_PROP.getValue()))
                            props.add(Id.Factory.loadFrom(token));
                        else
                            names.add(token);
                    }
                }
            }
        }

        public boolean isOverride(String name) {
            return names.contains(name);
        }

        public boolean isOverride(AdsUserPropertyDef prop) {
            return props.contains(prop.getId());
        }

        public void setOverride(String name, boolean override) {
            if (override)
                names.add(name);
            else
                names.remove(name);
        }

        public void setOverride(AdsUserPropertyDef prop, boolean override) {
            if (override)
                props.add(prop.getId());
            else
                props.remove(prop.getId());
        }

        public void resetUserProps() {
            props.clear();
        }

        public void save() {
            int sz = names.size() + props.size();
            int i = 0; String s = "";
            for (String name: names) {
                s += name;
                if (++i < sz)
                    s += "\n";
            }
            for (Id id: props) {
                s += String.valueOf(id);
                if (++i < sz)
                    s += "\n";
            }

            final AdsAppObject.Prop overrideMask = node.getPropByName("overrideMask");
            if (overrideMask != null)
                overrideMask.setValue(s);
        }
    }
    
    private final static String[] PROP_NAMES = new String[] {
        "accessArea"
    };

    public OverridePanel(AdsAppObject node) {
        super(node);
        initComponents();        
        tableOverride.setEnabled(!node.isReadOnly());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableOverride = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.inactiveCaption));
        setMinimumSize(new java.awt.Dimension(500, 400));
        setPreferredSize(new java.awt.Dimension(500, 400));
        setRequestFocusEnabled(false);

        tableOverride.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Overriden"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableOverride);
        tableOverride.getColumnModel().getColumn(0).setHeaderValue(RadixResourceBundle.getMessage(OverridePanel.class, "OverridePanel.tableOverride.columnModel.title0")); // NOI18N
        tableOverride.getColumnModel().getColumn(1).setMinWidth(70);
        tableOverride.getColumnModel().getColumn(1).setPreferredWidth(70);
        tableOverride.getColumnModel().getColumn(1).setMaxWidth(70);
        tableOverride.getColumnModel().getColumn(1).setHeaderValue(RadixResourceBundle.getMessage(OverridePanel.class, "OverridePanel.tableOverride.columnModel.title1")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableOverride;
    // End of variables declaration//GEN-END:variables

    private OverrideList ovr;

    @Override
    public void init() {
        ovr = new OverrideList(obj);
        tableOverride.setModel(new OverrideModel());
        tableOverride.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tableOverride.getColumnModel().getColumn(1).setMinWidth(70);
        tableOverride.getColumnModel().getColumn(1).setMaxWidth(70);
        tableOverride.getColumnModel().getColumn(1).setPreferredWidth(70);
    }
    
    @Override
    public void activate() {
        ovr = new OverrideList(obj);
        tableOverride.setModel(new OverrideModel());
    }

    @Override
    public void apply() {
        // ol.save();
    }

    @Override
    public String getTitle() {
        return RadixResourceBundle.getMessage(getClass(), "CTL_OverrideProperties");
    }

    @Override
    public RadixIcon getIcon() {
        return RadixWareIcons.ARROW.GO_TO_OVERWRITE;
    }

    class OverrideModel extends AbstractTableModel {

        private final String[] columns = new String[] {
            RadixResourceBundle.getMessage(OverridePanel.class, "OverridePanel.tableOverride.columnModel.title0"),
            RadixResourceBundle.getMessage(OverridePanel.class, "OverridePanel.tableOverride.columnModel.title1")
        };

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public int getRowCount() {
            return PROP_NAMES.length;
        }

        @Override
        public String getColumnName(int col) {
            return columns[col];
        }

        @Override
        public Object getValueAt(int row, int col) {
            switch (col) {
                case 0:
                    return PROP_NAMES[row];
                case 1:
                    return ovr.isOverride(PROP_NAMES[row]);
            }
            return null;
        }

        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return col > 0;
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            switch (col) {
                case 1:
                    ovr.setOverride(PROP_NAMES[row], (Boolean)value);
                    ovr.save();
                    break;
            }
            fireTableCellUpdated(row, col);
        }
    }
}
