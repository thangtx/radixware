/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * MergePanel.java
 *
 * Created on 6 Ноябрь 2008 г., 14:25
 */
package org.radixware.kernel.designer.ads.editors.clazz.forms.props;

import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import org.openide.explorer.propertysheet.PropertyEnv;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.ads.AdsDefinition;
import org.radixware.kernel.common.defs.ads.localization.AdsMultilingualStringDef;
import org.radixware.kernel.common.defs.ads.ui.AdsUIProperty;
import org.radixware.kernel.common.defs.ads.ui.AdsUIUtil;
import org.radixware.kernel.common.defs.localization.IMultilingualStringDef;
import org.radixware.kernel.common.enums.EIsoLanguage;
import org.radixware.kernel.common.types.Id;
import org.radixware.kernel.designer.common.dialogs.components.localizing.HandleInfo;
import org.radixware.kernel.designer.common.dialogs.components.localizing.LocalizingStringContextFactory;
import org.radixware.kernel.designer.common.dialogs.components.localizing.LocalizingStringEditor;


public class LocalizedStringPanel extends JPanel implements PropertyChangeListener {

    private PropertyEnv env;
    private LocalizedStringEditor editor;
    private LocalizingStringEditor localizingPanel;
    private Id stringId;

    private final HandleInfo handleInfo = new HandleInfo() {

        @Override
        public AdsDefinition getAdsDefinition() {
            return AdsUIUtil.getUiDef(getNode());
        }

        @Override
        public Id getTitleId() {
            return stringId;
        }

        @Override
        protected void onAdsMultilingualStringDefChange(IMultilingualStringDef multilingualStringDef) {
            stringId = multilingualStringDef != null ? multilingualStringDef.getId() : null;
        }

        @Override
        protected void onLanguagesPatternChange(EIsoLanguage language, String newStringValue) {
            getAdsMultilingualStringDef().setValue(language, newStringValue);
        }
    };

    LocalizedStringPanel(LocalizedStringEditor editor,PropertyEnv env, boolean extendedMode) {
        this.env = env;
        this.editor = editor;
        boolean isReadOnly =  !((UIPropertySupport)editor.getSource()).canWrite();
        

        env.setState(PropertyEnv.STATE_NEEDS_VALIDATION);
        env.addPropertyChangeListener(this);

        initComponents();
        

        setLayout(new java.awt.BorderLayout());

        final LocalizingStringEditor.Options options = new LocalizingStringEditor.Options()
                .add(LocalizingStringEditor.Options.COLLAPSABLE_KEY, true)
                .add(LocalizingStringEditor.Options.TITLE_KEY, "Title")
                .add(LocalizingStringEditor.Options.MODE_KEY, extendedMode
                    ? LocalizingStringEditor.EEditorMode.MULTILINE : LocalizingStringEditor.EEditorMode.LINE);

        localizingPanel = LocalizingStringEditor.Factory.createEditor(options);
        
        add(localizingPanel, BorderLayout.CENTER);

        stringId = getProperty().getStringId();
        localizingPanel.open(LocalizingStringContextFactory.newProxyInstance(handleInfo));        
        localizingPanel.setReadonly(isReadOnly);
    }

    private AdsUIProperty.LocalizedStringRefProperty getProperty() {
        return (AdsUIProperty.LocalizedStringRefProperty) editor.getValue();
    }

    private RadixObject getNode() {
        return ((UIPropertySupport) editor.getSource()).getNode();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.inactiveCaption));
        setMinimumSize(new java.awt.Dimension(200, 140));
        setPreferredSize(new java.awt.Dimension(320, 260));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 258, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (PropertyEnv.PROP_STATE.equals(evt.getPropertyName()) && evt.getNewValue() == PropertyEnv.STATE_VALID) {

            if (!localizingPanel.getLocalizingStringContext().commit()) {
                Logger.getLogger(LocalizedStringPanel.class.getName()).log(Level.WARNING, "Failed to set the property 'ToolTip'");
            }

            AdsUIProperty.LocalizedStringRefProperty prop = getProperty();
            if (prop.getStringId() != stringId) {
                prop.setStringId(stringId);
            }

            editor.setValue(prop);
            ((UIPropertySupport) editor.getSource()).setValue(prop);
        }
    }
}
