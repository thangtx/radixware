/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */
package org.radixware.kernel.designer.ads.editors.clazz.forms.dialog;

import javax.swing.event.TreeModelListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.TreePath;
import org.openide.util.NbBundle;
import java.awt.Component;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractCellEditor;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.ListSelectionModel;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeSelectionModel;
import org.openide.explorer.propertysheet.PropertyPanel;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.RadixObjects.ContainerChangedEvent;
import org.radixware.kernel.common.defs.RadixObjects.ContainerChangesListener;
import org.radixware.kernel.common.defs.ads.ui.AdsAbstractUIDef;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef.Columns;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef.Items;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef.WidgetItem;
import org.radixware.kernel.common.defs.ads.ui.AdsMetaInfo;
import org.radixware.kernel.common.defs.ads.ui.AdsUIProperty;
import org.radixware.kernel.common.defs.ads.ui.AdsUIUtil;
import org.radixware.kernel.common.defs.ads.ui.UiProperties;
import org.radixware.kernel.common.resources.icons.RadixIcon;
import org.radixware.kernel.designer.ads.editors.clazz.forms.palette.Item;
import org.radixware.kernel.designer.ads.editors.clazz.forms.props.UIPropertySupport;
import org.radixware.kernel.common.resources.RadixWareIcons;

public class TreeItemsPanel extends JPanel implements ContainerChangesListener {

    private final AdsItemWidgetDef widget;
    private final Columns columns;
    private final AdsAbstractUIDef uiDef;

    public TreeItemsPanel(AdsAbstractUIDef uiDef, AdsItemWidgetDef widget) {
        this.widget = widget;
        this.uiDef = uiDef;
        this.columns = widget.getColumns();
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        scrollPane = new javax.swing.JScrollPane();
        propTable = new javax.swing.JTable();
        panel = new javax.swing.JPanel();
        panel2 = new javax.swing.JPanel();
        buttonAdd = new javax.swing.JButton();
        buttonDel = new javax.swing.JButton();
        buttonAddSub = new javax.swing.JButton();
        buttonLeft = new javax.swing.JButton();
        buttonRight = new javax.swing.JButton();
        buttonUp = new javax.swing.JButton();
        buttonDown = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.inactiveCaption));
        setMinimumSize(new java.awt.Dimension(400, 200));
        setPreferredSize(new java.awt.Dimension(400, 200));
        setRequestFocusEnabled(false);
        setLayout(new java.awt.BorderLayout());

        splitPane.setDividerLocation(260);
        splitPane.setLastDividerLocation(260);

        propTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Title"
            }
        ));
        propTable.setGridColor(new java.awt.Color(213, 213, 213));
        propTable.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        scrollPane.setViewportView(propTable);

        splitPane.setRightComponent(scrollPane);

        panel.setMinimumSize(new java.awt.Dimension(260, 10));
        panel.setPreferredSize(new java.awt.Dimension(260, 100));
        panel.setLayout(new java.awt.BorderLayout());

        buttonAdd.setIcon(RadixWareIcons.CREATE.ADD.getIcon());
        buttonAdd.setFocusPainted(false);
        buttonAdd.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });
        panel2.add(buttonAdd);

        buttonDel.setIcon(RadixWareIcons.DELETE.DELETE.getIcon());
        buttonDel.setFocusPainted(false);
        buttonDel.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDelActionPerformed(evt);
            }
        });
        panel2.add(buttonDel);

        buttonAddSub.setIcon(RadixWareIcons.CREATE.ADD_SUB.getIcon());
        buttonAddSub.setFocusPainted(false);
        buttonAddSub.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonAddSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddSubActionPerformed(evt);
            }
        });
        panel2.add(buttonAddSub);

        buttonLeft.setIcon(RadixWareIcons.ARROW.RIGHT_UP.getIcon());
        buttonLeft.setFocusPainted(false);
        buttonLeft.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLeftActionPerformed(evt);
            }
        });
        panel2.add(buttonLeft);

        buttonRight.setIcon(RadixWareIcons.ARROW.UP_RIGHT.getIcon());
        buttonRight.setFocusPainted(false);
        buttonRight.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRightActionPerformed(evt);
            }
        });
        panel2.add(buttonRight);

        buttonUp.setIcon(RadixWareIcons.ARROW.MOVE_UP.getIcon());
        buttonUp.setFocusPainted(false);
        buttonUp.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpActionPerformed(evt);
            }
        });
        panel2.add(buttonUp);

        buttonDown.setIcon(RadixWareIcons.ARROW.MOVE_DOWN.getIcon());
        buttonDown.setFocusPainted(false);
        buttonDown.setMaximumSize(new java.awt.Dimension(32, 32));
        buttonDown.setMinimumSize(new java.awt.Dimension(32, 32));
        buttonDown.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDownActionPerformed(evt);
            }
        });
        panel2.add(buttonDown);

        panel.add(panel2, java.awt.BorderLayout.PAGE_END);

        jScrollPane1.setViewportView(tree);

        panel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        splitPane.setLeftComponent(panel);

        add(splitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        // TODO add your handling code here:
        RadixObject sel = getSelection();
        sel = treeModel.add((WidgetItem) sel, new WidgetItem());
        setSelection(sel);
        update();
        tree.updateUI();
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDelActionPerformed
        // TODO add your handling code here:
        RadixObject sel = getSelection();
        sel = treeModel.del((WidgetItem) sel);
        setSelection(sel);
        update();
        tree.updateUI();
    }//GEN-LAST:event_buttonDelActionPerformed

    private void buttonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpActionPerformed
        // TODO add your handling code here:
        RadixObject sel = getSelection();
        sel = treeModel.up((WidgetItem) sel);
        setSelection(sel);
        update();
        tree.updateUI();
    }//GEN-LAST:event_buttonUpActionPerformed

    private void buttonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDownActionPerformed
        // TODO add your handling code here:
        RadixObject sel = getSelection();
        sel = treeModel.down((WidgetItem) sel);
        setSelection(sel);
        update();
        tree.updateUI();
    }//GEN-LAST:event_buttonDownActionPerformed

    private void buttonAddSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddSubActionPerformed
        // TODO add your handling code here:
        RadixObject sel = getSelection();
        sel = treeModel.addSub(sel, new WidgetItem());
        setSelection(sel);
        update();
        tree.updateUI();
    }//GEN-LAST:event_buttonAddSubActionPerformed

    private void buttonLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLeftActionPerformed
        // TODO add your handling code here:
        RadixObject sel = getSelection();
        sel = treeModel.left((WidgetItem) sel);
        setSelection(sel);
        update();
        tree.updateUI();
    }//GEN-LAST:event_buttonLeftActionPerformed

    private void buttonRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRightActionPerformed
        // TODO add your handling code here:
        RadixObject sel = getSelection();
        sel = treeModel.right((WidgetItem) sel);
        setSelection(sel);
        update();
        tree.updateUI();
    }//GEN-LAST:event_buttonRightActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonAddSub;
    private javax.swing.JButton buttonDel;
    private javax.swing.JButton buttonDown;
    private javax.swing.JButton buttonLeft;
    private javax.swing.JButton buttonRight;
    private javax.swing.JButton buttonUp;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel panel2;
    private javax.swing.JTable propTable;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables

    private TreeItemsModel treeModel;
    private TableModel tableModel;

    public final void init() {
        splitPane.setVisible(columns.size() > 0);
        columns.getContainerChangesSupport().addEventListener(this);
        tree.setModel(treeModel = new TreeItemsModel());
        propTable.setModel(tableModel = new TableModel());

        tree.getSelectionModel().addTreeSelectionListener(tableModel);
        tree.setCellRenderer(new TreeRenderer());

        tree.setSelectionPath(new TreePath(widget));
        tree.requestFocusInWindow();

        tree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                TreeSelectionModel sm = (TreeSelectionModel) e.getSource();
                cursorChanged(sm.isSelectionEmpty() ? null : tree.getSelectionPath().getLastPathComponent());
            }
        });

        propTable.setModel(tableModel);
        propTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        propTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        propTable.setRowHeight(18);

        propTable.setDefaultRenderer(AdsUIProperty.class, new PropertyCellRenderer());
        propTable.setDefaultEditor(AdsUIProperty.class, new PropertyCellEditor());
        update();
    }

    private void cursorChanged(Object o) {
        update();
    }

    private void setSelection(final RadixObject o) {
        List<Object> list = new ArrayList<>();
        if (o instanceof AdsItemWidgetDef) {
            list.add(o);
        } else {
            WidgetItem item = (WidgetItem) o;
            while (true) {
                list.add(0, item);
                if (item.getOwnerWidget() != null) {
                    break;
                }
                item = item.getOwnerItem();
            };
            list.add(0, item.getOwnerWidget());
        }
        tree.setSelectionPath(new TreePath(list.toArray()));
    }

    private RadixObject getSelection() {
        if (tree.isSelectionEmpty()) {
            return null;
        }
        return (RadixObject) tree.getSelectionPath().getLastPathComponent();
    }

    private void update() {
        int idx = -1;
        int size = -1;
        boolean root = false;
        boolean underRoot = false;
        if (!tree.isSelectionEmpty()) {
            Object o = tree.getSelectionPath().getLastPathComponent();
            if (o instanceof AdsItemWidgetDef) {
                idx = 0;
                size = 1;
                root = true;
            } else {
                WidgetItem item = (WidgetItem) o;
                Items items = (Items) item.getContainer();
                idx = items.indexOf(item);
                size = items.size();
                underRoot = item.getOwnerWidget() != null;
            }
        }
        final boolean isReadOnly = widget.isReadOnly() || AdsUIUtil.isReadOnlyNode(uiDef, widget);
        buttonAdd.setEnabled(!isReadOnly && !root && idx >= 0);
        buttonDel.setEnabled(!isReadOnly && !root && idx >= 0);
        buttonAddSub.setEnabled(!isReadOnly && idx >= 0);
        buttonLeft.setEnabled(!isReadOnly && !root && !underRoot);
        buttonRight.setEnabled(!isReadOnly && !root && idx >= 0 && idx < size - 1);
        buttonUp.setEnabled(!isReadOnly && !root && idx >= 1);
        buttonDown.setEnabled(!isReadOnly && !root && idx >= 0 && idx < size - 1);
    }

    @Override
    public void onEvent(ContainerChangedEvent e) {
        splitPane.setVisible(columns.size() > 0);
        if (columns.size() == 0) {
            widget.getItems().clear();
        }
        tree.setSelectionPath(new TreePath(widget));
        update();
        tree.updateUI();
    }

    public class TreeRenderer extends DefaultTreeCellRenderer {

        public TreeRenderer() {
            super();
            setOpenIcon(null);
            setClosedIcon(null);
            setLeafIcon(null);
        }

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            if (value.equals(widget)) {
                return super.getTreeCellRendererComponent(tree, widget.getName(), sel, expanded, leaf, row, hasFocus);
            }

            WidgetItem item = (WidgetItem) value;

            AdsUIProperty.LocalizedStringRefProperty text = (AdsUIProperty.LocalizedStringRefProperty) AdsUIUtil.getUiProperty(item, "text");
            AdsUIProperty.ImageProperty icon = (AdsUIProperty.ImageProperty) AdsUIUtil.getUiProperty(item, "icon");
            AdsUIProperty.BrushProperty background = (AdsUIProperty.BrushProperty) AdsUIUtil.getUiProperty(item, "background");
            AdsUIProperty.BrushProperty foreground = (AdsUIProperty.BrushProperty) AdsUIUtil.getUiProperty(item, "foreground");

            String s = Item.getTextById(item, text.getStringId());
            JLabel label = (JLabel) super.getTreeCellRendererComponent(tree, s.isEmpty() ? "   " : s, sel, expanded, leaf, row, hasFocus);
            RadixIcon radixIcon = Item.getIconById(item, icon.getImageId());
            if (radixIcon != null) {
                label.setIcon(radixIcon.getIcon());
            }

            if (!sel) {
                label.setBackground(background.color);
            }
            label.setForeground(foreground.color);

            return label;
        }
    }

    // tree model
    private class TreeItemsModel implements TreeModel {

        TreeItemsModel() {
        }

        @Override
        public Object getRoot() {
            return widget;
        }

        private Items getItems(final Object parent) {
            if (parent.equals(getRoot())) {
                return widget.getItems();
            }
            return ((WidgetItem) parent).getItems();
        }

        private Items getOwnerItems(final RadixObject item) {
            return (Items) item.getContainer();
        }

        @Override
        public Object getChild(Object parent, int index) {
            return getItems(parent).get(index);
        }

        @Override
        public int getChildCount(Object parent) {
            return getItems(parent).size();
        }

        @Override
        public boolean isLeaf(Object node) {
            return getChildCount(node) == 0;
        }

        @Override
        public void valueForPathChanged(TreePath path, Object newValue) {
            Object o = path.getLastPathComponent();
            if (o instanceof WidgetItem) {
                Items items = ((WidgetItem) o).getItems();
                int idx = items.indexOf((WidgetItem) o);
                items.remove(idx);
                items.add(idx, (WidgetItem) newValue);
            }
        }

        @Override
        public int getIndexOfChild(Object parent, Object child) {
            return getItems(parent).indexOf((WidgetItem) child);
        }

        @Override
        public void addTreeModelListener(TreeModelListener l) {
        }

        @Override
        public void removeTreeModelListener(TreeModelListener l) {
        }

        public RadixObject add(WidgetItem sel, WidgetItem item) {
            Items items = getOwnerItems(sel);
            items.add(items.indexOf(sel) + 1, item);

            AdsUIProperty.LocalizedStringRefProperty text = new AdsUIProperty.LocalizedStringRefProperty("text");
            item.getProperties().add(text);

            return item;
        }

        public RadixObject addSub(RadixObject sel, WidgetItem item) {
            Items items = getItems(sel);
            items.add(item);

            AdsUIProperty.LocalizedStringRefProperty text = new AdsUIProperty.LocalizedStringRefProperty("text");
            item.getProperties().add(text);

            return item;
        }

        public RadixObject del(WidgetItem sel) {
            Items items = getOwnerItems(sel);
            int idx = items.indexOf(sel);
            items.remove(sel);
            idx = Math.min(items.size() - 1, idx);
            if (idx >= 0) {
                return items.get(idx);
            }
            return items.getContainer();
        }

        public RadixObject up(WidgetItem sel) {
            Items items = getOwnerItems(sel);
            int idx = items.indexOf(sel);
            items.swap(idx - 1, idx);
            return sel;
        }

        public RadixObject down(WidgetItem sel) {
            Items items = getOwnerItems(sel);
            int idx = items.indexOf(sel);
            items.swap(idx + 1, idx);
            return sel;
        }

        public RadixObject left(WidgetItem sel) {
            WidgetItem owner = sel.getOwnerItem();
            Items items = getOwnerItems(owner);
            int idx = items.indexOf(owner);
            sel.delete();
            items.add(idx, sel);
            return sel;
        }

        public RadixObject right(WidgetItem sel) {
            Items items = getOwnerItems(sel);
            int idx = items.indexOf(sel);
            WidgetItem owner = items.get(idx + 1);
            sel.delete();
            return addSub(owner, sel);
        }
    }

    // properties table model
    private class TableModel extends AbstractTableModel implements TreeSelectionListener {

        private String[] columns = new String[]{
            NbBundle.getBundle(TreeItemsPanel.class).getString("PropTable.Name"),
            NbBundle.getBundle(TreeItemsPanel.class).getString("PropTable.Value")
        };

        private WidgetItem item = null;
        List<AdsUIProperty> rows = null;

        public WidgetItem getItem() {
            return item;
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public int getRowCount() {
            return item == null || rows == null ? 0 : rows.size();
        }

        @Override
        public String getColumnName(int col) {
            return columns[col];
        }

        @Override
        public Object getValueAt(int row, int col) {
            return col > 0 ? rows.get(row) : rows.get(row).getName();
        }

        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return col != 0 && !widget.isReadOnly();
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            rows.set(row, (AdsUIProperty) value);
            fireTableCellUpdated(row, col);
        }

        @Override
        public void valueChanged(TreeSelectionEvent e) {
            if (e.getNewLeadSelectionPath() == null) {
                return;
            }
            Object o = e.getNewLeadSelectionPath().getLastPathComponent();
            item = o instanceof WidgetItem ? (WidgetItem) o : null;
            if (item != null) {
                rows = new ArrayList<>(AdsMetaInfo.getProps(AdsMetaInfo.WIDGET_ITEM_CLASS, widget));
                UiProperties props = AdsUIUtil.getUiProperties(item);
                for (int i = 0; i < rows.size(); i++) {
                    AdsUIProperty p = props.getByName(rows.get(i).getName());
                    if (p != null) {
                        rows.set(i, p);
                    } else {
                        rows.set(i, rows.get(i).duplicate());
                    }
                }
            }
            fireTableStructureChanged();
        }
    }

    // property cell editor
    private class PropertyCellEditor extends AbstractCellEditor implements TableCellEditor {

        private AdsUIProperty prop;

        public PropertyCellEditor() {
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int r, int c) {
            prop = (AdsUIProperty) value;
            final WidgetItem item = ((TableModel) table.getModel()).getItem();
            UIPropertySupport sup = new UIPropertySupport(prop, uiDef, item) {
                @Override
                public void setValue(Object val) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                    super.setValue(val);
                    tree.updateUI();
                }
            };
            return new PropertyPanel(sup, PropertyPanel.PREF_TABLEUI);
        }

        @Override
        public Object getCellEditorValue() {
            return prop;
        }
    }

    // property cell renderer
    private class PropertyCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            AdsUIProperty prop = (AdsUIProperty) value;
            WidgetItem item = ((TableModel) table.getModel()).getItem();
            UIPropertySupport sup = new UIPropertySupport(prop, uiDef, item);
            return new PropertyPanel(sup, PropertyPanel.PREF_TABLEUI);
        }
    }
}
