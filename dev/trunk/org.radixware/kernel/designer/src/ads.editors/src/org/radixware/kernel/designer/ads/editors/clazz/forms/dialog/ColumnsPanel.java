/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */
package org.radixware.kernel.designer.ads.editors.clazz.forms.dialog;

import org.openide.util.NbBundle;
import java.awt.Component;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractCellEditor;
import javax.swing.AbstractListModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import org.openide.explorer.propertysheet.PropertyPanel;
import org.radixware.kernel.common.defs.RadixObjects.ContainerChangedEvent;
import org.radixware.kernel.common.defs.RadixObjects.EChangeType;
import org.radixware.kernel.common.defs.ads.ui.AdsAbstractUIDef;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef.Column;
import org.radixware.kernel.common.defs.ads.ui.AdsItemWidgetDef.Columns;
import org.radixware.kernel.common.defs.ads.ui.AdsMetaInfo;
import org.radixware.kernel.common.defs.ads.ui.AdsUIProperty;
import org.radixware.kernel.common.defs.ads.ui.AdsUIUtil;
import org.radixware.kernel.common.defs.ads.ui.UiProperties;
import org.radixware.kernel.common.resources.icons.RadixIcon;
import org.radixware.kernel.designer.ads.editors.clazz.forms.palette.Item;
import org.radixware.kernel.designer.ads.editors.clazz.forms.props.UIPropertySupport;
import org.radixware.kernel.common.resources.RadixWareIcons;

public class ColumnsPanel extends JPanel {

    private AdsItemWidgetDef widget;
    private AdsAbstractUIDef uiDef;

    /**
     * Creates new form MergePanel
     */
    public ColumnsPanel(AdsAbstractUIDef uiDef, AdsItemWidgetDef widget) {
        this.widget = widget;
        this.uiDef = uiDef;
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        scrollPane = new javax.swing.JScrollPane();
        propTable = new javax.swing.JTable();
        panel = new javax.swing.JPanel();
        scrollPane2 = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        panel2 = new javax.swing.JPanel();
        buttonAdd = new javax.swing.JButton();
        buttonDel = new javax.swing.JButton();
        buttonUp = new javax.swing.JButton();
        buttonDown = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.inactiveCaption));
        setMinimumSize(new java.awt.Dimension(400, 200));
        setPreferredSize(new java.awt.Dimension(400, 200));
        setRequestFocusEnabled(false);
        setLayout(new java.awt.BorderLayout());

        splitPane.setDividerLocation(160);
        splitPane.setLastDividerLocation(160);

        propTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Title"
            }
        ));
        propTable.setGridColor(new java.awt.Color(213, 213, 213));
        propTable.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        scrollPane.setViewportView(propTable);

        splitPane.setRightComponent(scrollPane);

        panel.setMinimumSize(new java.awt.Dimension(160, 10));
        panel.setPreferredSize(new java.awt.Dimension(160, 100));
        panel.setLayout(new java.awt.BorderLayout());

        list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        scrollPane2.setViewportView(list);

        panel.add(scrollPane2, java.awt.BorderLayout.CENTER);

        buttonAdd.setIcon(RadixWareIcons.CREATE.ADD.getIcon());
        buttonAdd.setFocusPainted(false);
        buttonAdd.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });
        panel2.add(buttonAdd);

        buttonDel.setIcon(RadixWareIcons.DELETE.DELETE.getIcon());
        buttonDel.setFocusPainted(false);
        buttonDel.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDelActionPerformed(evt);
            }
        });
        panel2.add(buttonDel);

        buttonUp.setIcon(RadixWareIcons.ARROW.MOVE_UP.getIcon());
        buttonUp.setFocusPainted(false);
        buttonUp.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpActionPerformed(evt);
            }
        });
        panel2.add(buttonUp);

        buttonDown.setIcon(RadixWareIcons.ARROW.MOVE_DOWN.getIcon());
        buttonDown.setFocusPainted(false);
        buttonDown.setMaximumSize(new java.awt.Dimension(32, 32));
        buttonDown.setMinimumSize(new java.awt.Dimension(32, 32));
        buttonDown.setPreferredSize(new java.awt.Dimension(32, 32));
        buttonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDownActionPerformed(evt);
            }
        });
        panel2.add(buttonDown);

        panel.add(panel2, java.awt.BorderLayout.PAGE_END);

        splitPane.setLeftComponent(panel);

        add(splitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        // TODO add your handling code here:
        int idx = list.getSelectedIndex();
        listModel.add(idx + 1, new Column());
        list.setSelectedIndex(Math.max(idx + 1, 0));
        update();
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDelActionPerformed
        // TODO add your handling code here:
        int idx = list.getSelectedIndex();
        listModel.del(idx);
        list.setSelectedIndex(Math.min(idx, listModel.getSize() - 1));
        update();
    }//GEN-LAST:event_buttonDelActionPerformed

    private void buttonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpActionPerformed
        // TODO add your handling code here:
        int idx = list.getSelectedIndex();
        listModel.up(idx);
        list.setSelectedIndex(Math.max(Math.min(idx - 1, listModel.getSize() - 1), -1));
        update();
    }//GEN-LAST:event_buttonUpActionPerformed

    private void buttonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDownActionPerformed
        // TODO add your handling code here:
        int idx = list.getSelectedIndex();
        listModel.down(idx);
        list.setSelectedIndex(Math.max(Math.min(idx + 1, listModel.getSize() - 1), -1));
        update();
    }//GEN-LAST:event_buttonDownActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonDel;
    private javax.swing.JButton buttonDown;
    private javax.swing.JButton buttonUp;
    private javax.swing.JList list;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel panel2;
    private javax.swing.JTable propTable;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JSplitPane splitPane;
    // End of variables declaration//GEN-END:variables
    private ListModel listModel;
    private TableModel tableModel;

    public final void init() {
        list.setModel(listModel = new ListModel());
        propTable.setModel(tableModel = new TableModel());

        list.getSelectionModel().addListSelectionListener(tableModel);
        list.setCellRenderer(new ListRenderer());
        list.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                    return;
                }
                ListSelectionModel sm = (ListSelectionModel) e.getSource();
                cursorChanged(sm.isSelectionEmpty() ? -1 : list.getSelectedIndex());
            }
        });

        list.setSelectedIndex(0);
        list.requestFocusInWindow();

        propTable.setModel(tableModel);
        propTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        propTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        propTable.setRowHeight(18);

        propTable.setDefaultRenderer(AdsUIProperty.class, new PropertyCellRenderer());
        propTable.setDefaultEditor(AdsUIProperty.class, new PropertyCellEditor());
        update();
    }

    private void cursorChanged(int idx) {
        update();
    }

    private void update() {
        int idx = list.getSelectedIndex();
        int size = listModel.getSize();
        final boolean isReadOnly = widget.isReadOnly() || AdsUIUtil.isReadOnlyNode(uiDef, widget);
        buttonAdd.setEnabled(!isReadOnly);
        buttonDel.setEnabled(!isReadOnly && idx >= 0);
        buttonUp.setEnabled(!isReadOnly && idx >= 1);
        buttonDown.setEnabled(!isReadOnly && idx >= 0 && idx < size - 1);
    }

    public Columns getColumns() {
        return listModel.getColumns();
    }

    public class ListRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean hasFocus) {
            Column column = (Column) value;

            AdsUIProperty.LocalizedStringRefProperty text = (AdsUIProperty.LocalizedStringRefProperty) AdsUIUtil.getUiProperty(column, "text");
            AdsUIProperty.ImageProperty icon = (AdsUIProperty.ImageProperty) AdsUIUtil.getUiProperty(column, "icon");
            AdsUIProperty.BrushProperty background = (AdsUIProperty.BrushProperty) AdsUIUtil.getUiProperty(column, "background");
            AdsUIProperty.BrushProperty foreground = (AdsUIProperty.BrushProperty) AdsUIUtil.getUiProperty(column, "foreground");

            String s = Item.getTextById(column, text.getStringId());
            JLabel label = (JLabel) super.getListCellRendererComponent(list, s.isEmpty() ? " " : s, index, isSelected, hasFocus);
            RadixIcon radixIcon = Item.getIconById(column, icon.getImageId());
            if (radixIcon != null) {
                label.setIcon(radixIcon.getIcon());
            }

            if (!isSelected) {
                label.setBackground(background.color);
            }
            label.setForeground(foreground.color);

            return label;
        }
    }

    // list model
    private class ListModel extends AbstractListModel {

        private final Columns columns = widget.getColumns();

        ListModel() {
        }

        @Override
        public Object getElementAt(int i) {
            return columns.get(i);
        }

        @Override
        public int getSize() {
            return columns.size();
        }

        public Columns getColumns() {
            return columns;
        }

        public void fireContentChanged(Column column) {
            super.fireContentsChanged(this, columns.indexOf(column), columns.indexOf(column));
        }

        public void fireContentChanged(int idx) {
            super.fireContentsChanged(this, idx, idx);
        }

        void edited(Column column) {
            int idx = columns.indexOf(column);
            if (idx >= 0 && idx < getSize()) {
                fireContentsChanged(this, idx, idx);
            }
        }

        void add(int idx, Column column) {
            if (idx < 0 || idx > getSize()) {
                idx = 0;
            }

            AdsUIProperty.LocalizedStringRefProperty text = new AdsUIProperty.LocalizedStringRefProperty("text");
            column.getProperties().add(text);

            columns.add(idx, column);

            syncPropColumnCount();

            fireIntervalAdded(this, idx, idx);
        }

        void del(int idx) {
            if (idx >= 0 && idx < getSize()) {
                columns.remove(idx);

                syncPropColumnCount();

                fireIntervalRemoved(this, idx, idx);
            }
        }

        void up(int idx) {
            if (idx > 0 && idx < getSize()) {
                columns.moveUp(idx);
                fireContentsChanged(this, idx - 1, idx);
            }
        }

        void down(int idx) {
            if (idx >= 0 && idx < getSize() - 1) {
                columns.moveDown(idx);
                fireContentsChanged(this, idx, idx + 1);
            }
        }

        void syncPropColumnCount() {
            AdsUIProperty.IntProperty columnCount = (AdsUIProperty.IntProperty) widget.getProperties().getByName("columnCount");
            if (columnCount != null) {
                columnCount.value = columns.size();
                AdsUIUtil.fire(widget, columnCount, ColumnsPanel.this);
            }
        }
    }

    // properties table model
    private class TableModel extends AbstractTableModel implements ListSelectionListener {

        private String[] columns = new String[]{
            NbBundle.getBundle(ColumnsPanel.class).getString("PropTable.Name"),
            NbBundle.getBundle(ColumnsPanel.class).getString("PropTable.Value")
        };
        private Column column = null;
        List<AdsUIProperty> rows = null;

        public Column getColumn() {
            return column;
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public int getRowCount() {
            return column == null || rows == null ? 0 : rows.size();
        }

        @Override
        public String getColumnName(int col) {
            return columns[col];
        }

        @Override
        public Object getValueAt(int row, int col) {
            return col > 0 ? rows.get(row) : rows.get(row).getName();
        }

        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return col != 0 && !widget.isReadOnly();
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            rows.set(row, (AdsUIProperty) value);
            fireTableCellUpdated(row, col);
        }

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting()) {
                return;
            }
            int idx = list.getSelectedIndex();
            column = idx >= 0 ? (Column) listModel.getElementAt(idx) : null;
            if (column != null) {
                rows = new ArrayList<AdsUIProperty>(AdsMetaInfo.getProps(AdsMetaInfo.WIDGET_ITEM_CLASS, widget));
                UiProperties props = AdsUIUtil.getUiProperties(column);
                for (int i = 0; i < rows.size(); i++) {
                    AdsUIProperty p = props.getByName(rows.get(i).getName());
                    if (p != null) {
                        rows.set(i, p);
                    } else {
                        rows.set(i, rows.get(i).duplicate());
                    }
                }
            }
            fireTableStructureChanged();
        }
    }

    // property cell renderer
    private class PropertyCellEditor extends AbstractCellEditor implements TableCellEditor {

        private AdsUIProperty prop;

        public PropertyCellEditor() {
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int r, int c) {
            prop = (AdsUIProperty) value;
            final Column column = ((TableModel) table.getModel()).getColumn();
            UIPropertySupport sup = new UIPropertySupport(prop, uiDef, column) {

                @Override
                public void setValue(Object val) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                    super.setValue(val);
                    listModel.fireContentChanged(column);
                    listModel.getColumns().getContainerChangesSupport().fireEvent(new ContainerChangedEvent(column, EChangeType.MODIFY));
                }
            };
            return new PropertyPanel(sup, PropertyPanel.PREF_TABLEUI);
        }

        @Override
        public Object getCellEditorValue() {
            return prop;
        }
    }

    // property cell renderer
    private class PropertyCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int r, int c) {
            AdsUIProperty prop = (AdsUIProperty) value;
            Column column = ((TableModel) table.getModel()).getColumn();
            UIPropertySupport sup = new UIPropertySupport(prop, uiDef, column);
            return new PropertyPanel(sup, PropertyPanel.PREF_TABLEUI);
        }
    }
}
