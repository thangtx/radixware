/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * AbstractMembersGroupEditor.java
 *
 * Created on Aug 26, 2009, 10:26:21 AM
 */
package org.radixware.kernel.designer.ads.editors.members_group;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JList;
import org.radixware.kernel.common.defs.Definition;
import org.radixware.kernel.common.defs.ExtendableDefinitions.EScope;
import org.radixware.kernel.common.defs.IFilter;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.RadixObjectIcon;
import org.radixware.kernel.common.defs.ads.AdsDefinition;
import org.radixware.kernel.common.defs.ads.clazz.ExtendableMembers;
import org.radixware.kernel.common.defs.ads.clazz.IAdsClassMember;
import org.radixware.kernel.common.defs.ads.clazz.MembersGroup;
import org.radixware.kernel.common.resources.icons.RadixIcon;
import org.radixware.kernel.common.types.Id;
import org.radixware.kernel.designer.common.dialogs.chooseobject.AbstractItemRenderer;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ChooseDefinitionCfg;
import org.radixware.kernel.designer.common.dialogs.components.IRadixObjectChooserLeftComponent;
import org.radixware.kernel.designer.common.dialogs.components.RadixObjectChooserCommonComponent;
import org.radixware.kernel.designer.common.dialogs.components.RadixObjectsListModel;
import org.radixware.kernel.designer.common.editors.RadixObjectEditor;
import org.radixware.kernel.designer.common.general.editors.OpenInfo;


public abstract class AbstractMembersGroupEditor<Item extends AdsDefinition & IAdsClassMember, Group extends MembersGroup<Item>> extends RadixObjectEditor<Group> {

    public Group getGroup() {
        return getRadixObject();
    }

    abstract protected ExtendableMembers<Item> getExtendableMembers();

    abstract protected String getLeftComponentName();

    abstract protected String getRightComponentName();
    private AvailableItemsComponent rightComponent;
    private UsedItemsComponent leftComponent;

    /**
     * Creates new form AbstractMembersGroupEditor
     */
    protected AbstractMembersGroupEditor(Group group) {
        super(group);
        initComponents();
        initAdditionalComponents();
    }

    private void initAdditionalComponents() {
        rightComponent = new AvailableItemsComponent();
        leftComponent = new UsedItemsComponent();
    }

    @Override
    public boolean open(OpenInfo openInfo) {
        radixObjectChooserPanel.open(leftComponent, rightComponent);
        update();
        return super.open(openInfo);
    }

    @Override
    public void update() {

        final Group group = getGroup();
        leftComponent.open(group, null);
        rightComponent.open(group, null);
        radixObjectChooserPanel.update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radixObjectChooserPanel = new org.radixware.kernel.designer.common.dialogs.components.RadixObjectChooserPanel();

        javax.swing.GroupLayout radixObjectChooserPanelLayout = new javax.swing.GroupLayout(radixObjectChooserPanel);
        radixObjectChooserPanel.setLayout(radixObjectChooserPanelLayout);
        radixObjectChooserPanelLayout.setHorizontalGroup(
            radixObjectChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 484, Short.MAX_VALUE)
        );
        radixObjectChooserPanelLayout.setVerticalGroup(
            radixObjectChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 253, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radixObjectChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radixObjectChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.radixware.kernel.designer.common.dialogs.components.RadixObjectChooserPanel radixObjectChooserPanel;
    // End of variables declaration//GEN-END:variables

    public void setReadonly(boolean readonly) {
        radixObjectChooserPanel.setReadonly(readonly);
    }

    private class ItemsCellRenderer extends AbstractItemRenderer {

        public ItemsCellRenderer(JList list) {
            super(list);
        }

        @Override
        public String getObjectName(Object object) {
            if (object == null) {
                return "<not defined>";
            } else {
                if (object instanceof Id) {
                    final Id id = (Id) object;
                    final ExtendableMembers<Item> members = getExtendableMembers();
                    if (members == null) {
                        return id.toString();
                    }
                    final Item item = members.findById(id, EScope.LOCAL).get();
                    if (item == null) {
                        return id.toString();
                    } else {
                        return item.getName();
                    }
                } else {
                    assert (object instanceof RadixObject);
                    return ((RadixObject) object).getName();
                }
            }
        }

        @Override
        public String getObjectLocation(Object object) {
            return "";
        }

        @Override
        public RadixIcon getObjectIcon(Object object) {
            if (object != null) {
                if (object instanceof Id) {
                    final Id id = (Id) object;
                    ExtendableMembers<Item> members = getExtendableMembers();
                    if (members == null) {
                        return RadixObjectIcon.UNKNOWN;
                    }
                    final Item item = members.findById(id, EScope.LOCAL).get();
                    if (item != null) {
                        return item.getIcon();
                    } else {
                        return RadixObjectIcon.UNKNOWN;
                    }
                } else {
                    assert (object instanceof RadixObject);
                    return ((RadixObject) object).getIcon();
                }
            } else {
                return RadixObjectIcon.UNKNOWN;
            }
        }

        @Override
        public RadixIcon getObjectLocationIcon(Object object) {
            return null;
        }
    }

    private class AvailableItemsComponent extends RadixObjectChooserCommonComponent {

        private Group group;
        private Collection<Item> availableItems;

        @Override
        @SuppressWarnings("unchecked")
        public void open(Definition context, ChooseDefinitionCfg cfg) {
            this.group = (Group) context;
            list.setCellRenderer(new ItemsCellRenderer(list));
            updateContent();
        }

        @Override
        public void updateContent() {
            final List<Id> usedIds = group.getMemberIds();
            ExtendableMembers<Item> members = getExtendableMembers();
            if (members == null) {
                availableItems = Collections.emptyList();
            } else {
                availableItems = members.get(EScope.LOCAL, new IFilter<Item>() {
                    @Override
                    public boolean isTarget(Item item) {
                        return !usedIds.contains(item.getId());
                    }
                });
            }
            RadixObjectsListModel dm = new RadixObjectsListModel(members);
            for (Item xitem : availableItems) {
                dm.addElement(xitem);
            }
            list.setModel(dm);
        }

        @Override
        public JComponent getLabelComponent() {
            return new javax.swing.JLabel(getRightComponentName());
        }

        @Override
        @SuppressWarnings("unchecked")
        public void removeAll(Object[] objects) {
            for (Object xObj : objects) {
                assert (xObj instanceof Id);
                ExtendableMembers<Item> members = getExtendableMembers();
                Item def = members == null ? null : members.findById((Id) xObj, EScope.LOCAL).get();
                if (def != null) {
                    availableItems.remove(def);
                }
                ((RadixObjectsListModel) list.getModel()).removeElement((Id) xObj);

            }
        }

        @Override
        @SuppressWarnings("unchecked")
        public void addAllItems(Object[] objects) {
            for (Object xObj : objects) {
                if (xObj instanceof Id) {
                    ExtendableMembers<Item> members = getExtendableMembers();
                    final Item xItem = members == null ? null : members.findById((Id) xObj, EScope.LOCAL).get();
                    if (xItem != null && !availableItems.contains(xItem)) {
                        availableItems.add(xItem);
                    }
                    ((RadixObjectsListModel) list.getModel()).addElement((Id) xObj);
                }
            }
        }

        @Override
        public RadixObject getSelectedRadixObject() {
            final Object[] selection = getSelectedItems();
            if (selection != null && selection.length > 0) {
                final Object obj = selection[0];
                if (obj instanceof Id) {
                    ExtendableMembers<Item> members = getExtendableMembers();
                    return members == null ? null : members.findById((Id) obj, EScope.LOCAL).get();
                } else {
                    assert (obj instanceof RadixObject);
                    return (RadixObject) obj;
                }
            }
            return null;
        }
    }

    private class UsedItemsComponent extends RadixObjectChooserCommonComponent
            implements IRadixObjectChooserLeftComponent {

        private Group group;

        @Override
        @SuppressWarnings("unchecked")
        public void open(Definition context, ChooseDefinitionCfg cfg) {
            this.group = (Group) context;
            list.setCellRenderer(new ItemsCellRenderer(list));
            updateContent();
        }

        @Override
        public void updateContent() {
            final List<Id> usedMethodsIds = group.getMemberIds();
            RadixObjectsListModel dm = new RadixObjectsListModel(usedMethodsIds, getExtendableMembers());
            list.setModel(dm);
        }

        @Override
        public JComponent getLabelComponent() {
            return new javax.swing.JLabel(getLeftComponentName());
        }

        @Override
        public void moveDown() {
            //do nothing
        }

        @Override
        public void moveUp() {
            //do nothing
        }

        @Override
        public boolean isOrderDependant() {
            return false;
        }

        @Override
        @SuppressWarnings("unchecked")
        public void removeAll(Object[] objects) {
            for (Object xObj : objects) {
                if (xObj instanceof Id) {
                    final Id xId = (Id) xObj;
                    group.removeMemberId(xId);
                } else {
                    final Item xItem = (Item) xObj;
                    group.removeMember(xItem);
                }
            }
            updateContent();
        }

        @Override
        @SuppressWarnings("unchecked")
        public void addAllItems(Object[] objects) {
            for (Object xObj : objects) {
                if (xObj instanceof Id) {
                    ExtendableMembers<Item> members = getExtendableMembers();
                    Item item = members == null ? null : members.findById((Id) xObj, EScope.ALL).get();
                    if (item != null) {
                        group.addMember(item);
                    }
                } else {
                    final Item xItem = (Item) xObj;
                    group.addMember(xItem);
                }
            }
            updateContent();
        }

        @Override
        public RadixObject getSelectedRadixObject() {
            final Object[] selection = getSelectedItems();
            if (selection != null && selection.length > 0) {
                final Object obj = selection[0];
                if (obj instanceof Id) {
                    ExtendableMembers<Item> members = getExtendableMembers();
                    return members == null ? null : members.findById((Id) obj, EScope.LOCAL).get();
                } else {
                    assert (obj instanceof RadixObject);
                    return (RadixObject) obj;
                }
            }
            return null;
        }
    }
}
