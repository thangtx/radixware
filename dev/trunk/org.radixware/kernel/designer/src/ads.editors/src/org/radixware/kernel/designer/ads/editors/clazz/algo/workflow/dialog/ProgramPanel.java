/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.algo.workflow.dialog;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.ads.clazz.algo.object.*;
import org.radixware.kernel.common.jml.JmlTagPin;
import org.radixware.kernel.designer.common.editors.jml.JmlEditor;
import org.radixware.kernel.designer.common.dialogs.scmlnb.ScmlEditorPane;
import org.radixware.kernel.common.resources.RadixWareIcons;


public class ProgramPanel extends EditorDialog.EditorPanel<AdsProgramObject> {

    /** Creates new form MergePanel */
    public ProgramPanel(AdsProgramObject node) {
        super(node);
        initComponents();

        editor.setBorder(BorderFactory.createLineBorder(new Color(127, 157, 185), 1));
        panelEditor.add(editor);

        textName.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                obj.setName(textName.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                obj.setName(textName.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                obj.setName(textName.getText());
            }
        });

        textName.setEditable(!obj.isReadOnly());
        buttonLeaves.setEnabled(!obj.isReadOnly());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelName = new javax.swing.JLabel();
        textName = new javax.swing.JTextField();
        buttonLeaves = new javax.swing.JButton();
        leaveBar = new javax.swing.JToolBar();
        panelEditor = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.inactiveCaption));
        setMinimumSize(new java.awt.Dimension(500, 300));
        setPreferredSize(new java.awt.Dimension(500, 300));
        setRequestFocusEnabled(false);

        labelName.setText(org.openide.util.NbBundle.getMessage(ProgramPanel.class, "ProgramPanel.labelName.text")); // NOI18N

        buttonLeaves.setIcon(RadixWareIcons.ARROW.GO_TO_OBJECT.getIcon(16));
        buttonLeaves.setText(org.openide.util.NbBundle.getMessage(ProgramPanel.class, "ProgramPanel.buttonLeaves.text")); // NOI18N
        buttonLeaves.setFocusPainted(false);
        buttonLeaves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLeavesActionPerformed(evt);
            }
        });

        leaveBar.setFloatable(false);
        leaveBar.setRollover(true);
        leaveBar.setBorderPainted(false);

        panelEditor.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonLeaves)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leaveBar, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textName, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(panelEditor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonLeaves, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leaveBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonLeavesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLeavesActionPerformed
        // TODO add your handling code here:
        List<AdsPin> pins = obj.getSourcePins();
        if (EditorDialog.executeOkCancel(new LeavesPanel(pins))) {
            obj.setSourcePins(pins);
            initLeaves();
            editor.update();
        }
}//GEN-LAST:event_buttonLeavesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonLeaves;
    private javax.swing.JLabel labelName;
    private javax.swing.JToolBar leaveBar;
    private javax.swing.JPanel panelEditor;
    private javax.swing.JTextField textName;
    // End of variables declaration//GEN-END:variables

    private final JmlEditor editor = new JmlEditor();

    @Override
    public void init() {
        textName.setText(obj.getName());
        textName.requestFocusInWindow();        
        editor.open(obj.getSource());
        initLeaves();
    }

    @Override
    public void apply() {
//        obj.setName(textName.getText());
    }

    @Override
    public String getTitle() {
        return NbBundle.getMessage(getClass(), "CTL_ProgramPanel");
    }

    private void initLeaves() {
        leaveBar.removeAll();
        List<AdsPin> pins = obj.getSourcePins();
        for (int i = 0; i < pins.size(); i++) {
            final AdsPin pin = pins.get(i);
            JButton leave = new JButton(pin.toString());
            leave.setEnabled(!obj.isReadOnly());
            leave.setToolTipText(pin.toString());
            leave.setFont(new Font("Verdana", Font.BOLD, 10));
            leave.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            leave.setForeground(Color.RED);
            leave.setFocusPainted(false);
            if (!obj.isReadOnly())
                leave.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent me) {
                        if (me.getButton() != MouseEvent.BUTTON1 || me.getClickCount() >= 2) {
                            return;
                        }
                        ScmlEditorPane pane = editor.getPane();
                        pane.insertTag(new JmlTagPin(pin.getId()));
                        pane.requestFocusInWindow();
                    }
                });
            leaveBar.add(leave);
        }
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                leaveBar.updateUI();
            }
        });
    }
}
