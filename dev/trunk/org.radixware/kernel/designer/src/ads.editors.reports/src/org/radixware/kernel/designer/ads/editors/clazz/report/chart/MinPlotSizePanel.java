/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.report.chart;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.math.BigDecimal;
import javax.swing.JCheckBox;
import javax.swing.border.TitledBorder;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportChartCell;
import org.radixware.kernel.designer.common.dialogs.components.BigDecimalSpinnerModel;
import org.radixware.kernel.designer.common.dialogs.components.CheckedBigDecimalSpinnerEditor;
import org.radixware.kernel.designer.common.dialogs.components.ComponentTitledBorder;


public class MinPlotSizePanel extends javax.swing.JPanel {

     private AdsReportChartCell cell;
     private final JCheckBox cbMinPlotSize = new JCheckBox(NbBundle.getMessage(ChartAppearancePanel.class, "MinPlotSizePanel.minPlotSizeCheckBox.text"));
    /**
     * Creates new form MinPlotSizePanel
     */
     @SuppressWarnings("deprecation")
    public MinPlotSizePanel() {
        initComponents();
        minPlotWidthSpinner.setModel(new BigDecimalSpinnerModel(BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.valueOf(1000), BigDecimal.valueOf(1)));
        minPlotWidthSpinner.setEditor(new CheckedBigDecimalSpinnerEditor(minPlotWidthSpinner));
        minPlotHeightSpinner.setModel(new BigDecimalSpinnerModel(BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.valueOf(1000), BigDecimal.valueOf(1)));
        minPlotHeightSpinner.setEditor(new CheckedBigDecimalSpinnerEditor(minPlotHeightSpinner));
        ComponentTitledBorder border = new ComponentTitledBorder(cbMinPlotSize, this, new TitledBorder(""));
        this.setBorder(border);        
        cbMinPlotSize.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (cell!=null) {
                    setAxisSpacePanelEnabled(cbMinPlotSize.isSelected());
                    cell.setPlotMinSizeEnable(cbMinPlotSize.isSelected());
               }
            }
        });
    }
    
    public void open(final AdsReportChartCell cell) {
        this.cell=cell;
        cbMinPlotSize.setSelected(cell.getPlotMinSizeEnable());
        setAxisSpacePanelEnabled(cell.getPlotMinSizeEnable());
        minPlotHeightSpinner.setValue(BigDecimal.valueOf(cell.getMinPlotHeightMm()));
        minPlotWidthSpinner.setValue(BigDecimal.valueOf(cell.getMinPlotWidthMm()));
    }
    
    private void setAxisSpacePanelEnabled(final boolean enabled){               
        minPlotHeightSpinner.setEnabled(enabled);
        minPlotWidthSpinner.setEnabled(enabled);
        //lbMinPlotHeight.setEnabled(enabled);
        //lbMinPlotWidth.setEnabled(enabled);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        minPlotWidthSpinner = new javax.swing.JSpinner();
        minPlotHeightSpinner = new javax.swing.JSpinner();
        lbMinPlotWidth = new javax.swing.JLabel();
        lbMinPlotHeight = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(MinPlotSizePanel.class, "MinPlotSizePanel.border.title"))); // NOI18N

        minPlotWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minPlotWidthSpinnerStateChanged(evt);
            }
        });

        minPlotHeightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minPlotHeightSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lbMinPlotWidth, org.openide.util.NbBundle.getMessage(MinPlotSizePanel.class, "MinPlotSizePanel.lbMinPlotWidth.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lbMinPlotHeight, org.openide.util.NbBundle.getMessage(MinPlotSizePanel.class, "MinPlotSizePanel.lbMinPlotHeight.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbMinPlotWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbMinPlotHeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minPlotWidthSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addComponent(minPlotHeightSpinner))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minPlotWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbMinPlotWidth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minPlotHeightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbMinPlotHeight))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void minPlotWidthSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minPlotWidthSpinnerStateChanged
        // TODO add your handling code here:
        if(cell!=null){
            cell.setMinPlotWidthMm(((BigDecimal)minPlotWidthSpinner.getValue()).doubleValue());
        }
    }//GEN-LAST:event_minPlotWidthSpinnerStateChanged

    private void minPlotHeightSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minPlotHeightSpinnerStateChanged
        // TODO add your handling code here:
        if(cell!=null){
            cell.setMinPlotHeightMm(((BigDecimal)minPlotHeightSpinner.getValue()).doubleValue());
        }
    }//GEN-LAST:event_minPlotHeightSpinnerStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbMinPlotHeight;
    private javax.swing.JLabel lbMinPlotWidth;
    private javax.swing.JSpinner minPlotHeightSpinner;
    private javax.swing.JSpinner minPlotWidthSpinner;
    // End of variables declaration//GEN-END:variables
}
