/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * AxisEditPanel.java
 *
 * Created on May 18, 2012, 6:16:03 PM
 */
package org.radixware.kernel.designer.ads.editors.clazz.report.chart;

import java.awt.Component;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.radixware.kernel.common.defs.RadixObject.EEditState;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportChartAxis;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportChartCell;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportChartCell.AdsReportChartAxes;
import org.radixware.kernel.common.enums.EReportChartAxisType;
import org.radixware.kernel.common.resources.RadixWareIcons;


public class AxisListPanel extends JPanel {
    private final AdsReportChartCell cell;
    private final EReportChartAxisType axisType;    
    
    /** Creates new form AxisEditPanel */
    public AxisListPanel(final AdsReportChartAxesEditor parent, final AdsReportChartCell cell,
            final EReportChartAxisType axisType,final int axisIndex) {
        super();
        initComponents();
        this.cell=cell;
        this.axisType=axisType;
        btnAdd.setIcon(RadixWareIcons.CREATE.ADD.getIcon(20));
        btnDelete.setIcon(RadixWareIcons.DELETE.DELETE.getIcon(20));
        btnDelete.setEnabled(false);
       
        btnEdit.setIcon(RadixWareIcons.EDIT.EDIT.getIcon(20));
        btnEdit.setEnabled(false);
        btnEdit.setVisible(false);
        ListCellRenderer<AxisItem> rendrer=new MyCellRenderer();
        axesList.setCellRenderer(rendrer);

        axesList.addListSelectionListener(new ListSelectionListener(){

            @Override
            public void valueChanged(final ListSelectionEvent lse) {
                final AdsReportChartAxis axis=getCurrentChartAxis();
                final boolean isEnable=axis!=null;
                final DefaultListModel model=(DefaultListModel)axesList.getModel();
                btnDelete.setEnabled(isEnable&& model.size()>1);
                btnEdit.setEnabled(isEnable);
                parent.setAxis(axis);
            }
            
        });
        parent.setAxis(null); 
        
        final DefaultListModel<AxisItem> model=new DefaultListModel<>(); 
        axesList.setModel(model);
        final AdsReportChartAxes axisList = axisType==EReportChartAxisType.DOMAIN_AXIS ?
                cell.getDomainAxes():cell.getRangeAxes();
          
        for(AdsReportChartAxis axis:axisList){
                addItemToList(axis,false);                
        }
        if(axisIndex<axesList.getVisibleRowCount()){
                axesList.setSelectedIndex(axisIndex);
        }          
    }
    
    public AdsReportChartAxis getCurrentChartAxis(){
        final Object selectedItem=axesList.getSelectedValue();
        if(selectedItem!=null && selectedItem instanceof AxisItem)
            return ((AxisItem)selectedItem).getChartAxis();
        return null;
    }
    
    private void addItemToList(final AdsReportChartAxis axis,final boolean selectNewItem){
        final DefaultListModel<AxisItem> model=(DefaultListModel<AxisItem>)axesList.getModel();
        final AxisItem item=new AxisItem(axis);
        model.addElement(item);
        
        if(selectNewItem){
            axesList.setSelectedIndex(model.indexOf(item)); 
            axis.setIsRightOrTop(model.indexOf(item)>0);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        axesList = new javax.swing.JList<AxisItem>();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(200, 100));
        setPreferredSize(new java.awt.Dimension(230, 300));

        jScrollPane1.setViewportView(axesList);

        btnAdd.setText(org.openide.util.NbBundle.getMessage(AxisListPanel.class, "AxisListPanel.btnAdd.text")); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText(org.openide.util.NbBundle.getMessage(AxisListPanel.class, "AxisListPanel.btnDelete.text")); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setText(org.openide.util.NbBundle.getMessage(AxisListPanel.class, "AxisListPanel.btnEdit.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnDelete)
                        .addComponent(btnAdd))
                    .addComponent(btnEdit)))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnDelete, btnEdit});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEdit)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        final int index=axesList.getSelectedIndex();
        final DefaultListModel<AxisItem> model=(DefaultListModel<AxisItem>)axesList.getModel();
        model.remove(index);        
        final AdsReportChartAxes axes=axisType==EReportChartAxisType.DOMAIN_AXIS?
                cell.getDomainAxes(): cell.getRangeAxes();
        axes.remove(index);
        axesList.setSelectedIndex(index<model.size()?index:0);
        cell.setEditState(EEditState.MODIFIED);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        final String name=axisType==EReportChartAxisType.DOMAIN_AXIS?
                "DomainAxis":"RangeAxis";
        final String sIndex= axesList.getModel().getSize()<=0 ? 
                "" : String.valueOf(axesList.getModel().getSize());
        final AdsReportChartAxis axis=new AdsReportChartAxis(cell,name+sIndex, axisType);         
        if(axisType==EReportChartAxisType.DOMAIN_AXIS){
             cell.getDomainAxes().add(axis);
        }else{
             cell.getRangeAxes().add(axis);
        }
        addItemToList(axis,true);
        cell.setEditState(EEditState.MODIFIED);

    }//GEN-LAST:event_btnAddActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<AxisItem> axesList;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    class AxisItem {
        private final AdsReportChartAxis axis;
        
        AxisItem(final AdsReportChartAxis series){
            this.axis=series;
        }
        
        AdsReportChartAxis getChartAxis(){
            return axis;
        }
    }
    
     class MyCellRenderer extends JLabel implements ListCellRenderer<AxisItem> {

        @Override
         public Component getListCellRendererComponent(
           JList<? extends AxisItem> list,              // the list
           AxisItem value,            // value to display
           int index,               // cell index
           boolean isSelected,      // is the cell selected
           boolean cellHasFocus)    // does the cell have focus
         {
             final AxisItem item=value;
             if(item.getChartAxis()!=null){
                 final String s = item.getChartAxis().getName();
                 setText(s);
             }
             //Icon icon = item.getIcon();
             //setIcon(icon);
             if (isSelected) {
                 setBackground(list.getSelectionBackground());
                 setForeground(list.getSelectionForeground());
             } else {
                 setBackground(list.getBackground());
                 setForeground(list.getForeground());
             }
             setEnabled(list.isEnabled());
             setFont(list.getFont());
             setOpaque(true);
             return this;
         }
     }
}
