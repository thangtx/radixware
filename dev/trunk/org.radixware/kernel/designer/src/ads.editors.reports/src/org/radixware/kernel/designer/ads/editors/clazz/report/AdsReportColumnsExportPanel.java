/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * AdsReportCsvExportPanel.java
 *
 * Created on Feb 7, 2012, 5:18:17 PM
 */
package org.radixware.kernel.designer.ads.editors.clazz.report;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeListener;
import net.miginfocom.swing.MigLayout;
import org.openide.util.ChangeSupport;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportClassDef;
import org.radixware.kernel.common.enums.EReportExportFormat;
import org.radixware.kernel.designer.common.dialogs.components.ComponentTitledBorder;
import org.radixware.kernel.designer.common.general.editors.OpenInfo;

public class AdsReportColumnsExportPanel extends javax.swing.JPanel {

    private static final String EXPORT_ENABLES_TEXT = "Export to ";

    private AdsReportClassDef report;

    private final EReportExportFormat type;

    private final JCheckBox cbExportEnabled;
    private final JPanel containerPanel = new JPanel();

    private final CsvDelimiterPanel delimiterPanel;
    private final XlsxSheetNamePanel sheetNamePanel;
    private final ReportColumnsExportPanel reportInfoExportPanel;

    private final ChangeSupport changeSupport = new ChangeSupport(this);

    @SuppressWarnings("deprecation")
    public AdsReportColumnsExportPanel(final EReportExportFormat type) {
        initComponents();

        this.type = type;
        delimiterPanel = new CsvDelimiterPanel();
        sheetNamePanel = new XlsxSheetNamePanel();
        reportInfoExportPanel = new ReportColumnsExportPanel();
        cbExportEnabled = new JCheckBox(EXPORT_ENABLES_TEXT + type.getName());
        cbExportEnabled.setBorder(null);
        cbExportEnabled.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(final ItemEvent e) {
                processCheckBox();
                changeSupport.fireChange();
            }
        });
        containerPanel.setLayout(new MigLayout("fill, hidemode 2", "[]", "[shrink][shrink][shrink]"));

        containerPanel.add(delimiterPanel, "growx, shrinky, wrap");
        containerPanel.add(sheetNamePanel, "growx, shrinky, wrap");
        containerPanel.add(reportInfoExportPanel, "growx, shrinky");

        this.setBorder(new ComponentTitledBorder(cbExportEnabled, this, new TitledBorder("")));
        this.add(containerPanel);
    }

    public void open(final AdsReportClassDef report, final OpenInfo openInfo) {
        this.report = report;
        cbExportEnabled.setEnabled(!report.isReadOnly());
        delimiterPanel.open(report);
        sheetNamePanel.open(report);

        if (type == EReportExportFormat.CSV) {
            reportInfoExportPanel.open(report, report.getCsvInfo());
            cbExportEnabled.setSelected(report.getCsvInfo().isExportToCsvEnabled());
            delimiterPanel.setVisible(true);
            sheetNamePanel.setVisible(false);
        } else if (type == EReportExportFormat.XLSX) {
            reportInfoExportPanel.open(report, report.getXlsxReportInfo());
            cbExportEnabled.setSelected(report.getXlsxReportInfo().isExportToXlsxEnabled());
            delimiterPanel.setVisible(false);
            sheetNamePanel.setVisible(true);
        }

        processCheckBox();
    }
    
    public final void addChangeListener(ChangeListener listener) {
        changeSupport.addChangeListener(listener);
    }

    public final void removeChangeListener(ChangeListener listener) {
        changeSupport.removeChangeListener(listener);
    }

    private void processCheckBox() {
        final boolean isNeedExport = cbExportEnabled.isSelected();
        if (type == EReportExportFormat.CSV) {
            report.getCsvInfo().setIsExportToCsvEnabled(isNeedExport);
        } else if (type == EReportExportFormat.XLSX) {
            report.getXlsxReportInfo().setIsExportToXlsxEnabled(isNeedExport);
        }

        containerPanel.setVisible(isNeedExport);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
