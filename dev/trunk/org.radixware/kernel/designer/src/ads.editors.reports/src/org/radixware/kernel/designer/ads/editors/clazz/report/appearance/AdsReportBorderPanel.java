/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.radixware.kernel.designer.ads.editors.clazz.report.appearance;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportAbstractAppearance;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportAbstractAppearance.Border;
import org.radixware.kernel.common.defs.ads.clazz.sql.report.AdsReportAbstractAppearance.BorderProperty;
import org.radixware.kernel.common.resources.RadixWareIcons;
import org.radixware.kernel.designer.ads.reports.AdsReportDialogsUtils;

/**
 *
 * @author avoloshchuk
 */
public class AdsReportBorderPanel extends javax.swing.JPanel {
    private boolean updating = false;
    private Border border;
    private final PropertyChangeListener listener = new PropertyChangeListener() {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if (border == null){
                return;
            }
            
            if (evt.getSource() == topBorderPanel){
                BorderProperty b = border.getTopBorder();
                b.setThicknessMm(topBorderPanel.getThiknesMm());
                b.setStyle(topBorderPanel.getStyle());
                b.setColor(topBorderPanel.getColor());
                fireChanges();
            } else if (evt.getSource() == leftBorderPanel){
                BorderProperty b = border.getLeftBorder();
                b.setThicknessMm(leftBorderPanel.getThiknesMm());
                b.setStyle(leftBorderPanel.getStyle());
                b.setColor(leftBorderPanel.getColor());
                fireChanges();
            } else if (evt.getSource() == bottomBorderPanel){
                BorderProperty b = border.getBottomBorder();
                b.setThicknessMm(bottomBorderPanel.getThiknesMm());
                b.setStyle(bottomBorderPanel.getStyle());
                b.setColor(bottomBorderPanel.getColor());
                fireChanges();
            } else if (evt.getSource() == rightBorderPanel){
                BorderProperty b = border.getRightBorder();
                b.setThicknessMm(rightBorderPanel.getThiknesMm());
                b.setStyle(rightBorderPanel.getStyle());
                b.setColor(rightBorderPanel.getColor());
                fireChanges();
            }
        }
    };

    /**
     * Creates new form AdsReportBorderPanel
     */
    public AdsReportBorderPanel() {
        initComponents();
        iconButton.setIcon(RadixWareIcons.DIALOG.ALL.getIcon());
        iconButton.setText("");
    }
    
    public void open(Border border) {
        updating = true;
        this.border = border.copy(false);
        topCheckBox.setSelected(border.getOnTop());
        leftCheckBox.setSelected(border.getOnLeft());
        bottomCheckBox.setSelected(border.getOnBottom());
        rightCheckBox.setSelected(border.getOnRight());
        
        topBorderPanel.open(border.getTopThicknessMm(), border.getTopStyle(), border.getTopColor());
        leftBorderPanel.open(border.getLeftThicknessMm(), border.getLeftStyle(), border.getLeftColor());
        bottomBorderPanel.open(border.getBottomThicknessMm(), border.getBottomStyle(), border.getBottomColor());
        rightBorderPanel.open(border.getRightThicknessMm(), border.getRightStyle(), border.getRightColor());
        setEnabled(true);
        updating = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iconButton = new javax.swing.JButton();
        topPanel = new javax.swing.JPanel();
        topCheckBox = new javax.swing.JCheckBox();
        topBorderPanel = new org.radixware.kernel.designer.ads.editors.clazz.report.appearance.AdsReportBorderPropertyPanel();
        leftPanel = new javax.swing.JPanel();
        leftCheckBox = new javax.swing.JCheckBox();
        leftBorderPanel = new org.radixware.kernel.designer.ads.editors.clazz.report.appearance.AdsReportBorderPropertyPanel();
        rightPanel = new javax.swing.JPanel();
        rightCheckBox = new javax.swing.JCheckBox();
        rightBorderPanel = new org.radixware.kernel.designer.ads.editors.clazz.report.appearance.AdsReportBorderPropertyPanel();
        bottomPanel = new javax.swing.JPanel();
        bottomCheckBox = new javax.swing.JCheckBox();
        bottomBorderPanel = new org.radixware.kernel.designer.ads.editors.clazz.report.appearance.AdsReportBorderPropertyPanel();

        setMinimumSize(new java.awt.Dimension(435, 187));

        org.openide.awt.Mnemonics.setLocalizedText(iconButton, org.openide.util.NbBundle.getMessage(AdsReportBorderPanel.class, "AdsReportBorderPanel.iconButton.text")); // NOI18N
        iconButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iconButtonActionPerformed(evt);
            }
        });

        topPanel.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(topCheckBox, org.openide.util.NbBundle.getMessage(AdsReportBorderPanel.class, "AdsReportBorderPanel.topCheckBox.text")); // NOI18N
        topCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        topCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                topCheckBoxItemStateChanged(evt);
            }
        });
        topPanel.add(topCheckBox, java.awt.BorderLayout.PAGE_START);
        topPanel.add(topBorderPanel, java.awt.BorderLayout.CENTER);

        leftPanel.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(leftCheckBox, org.openide.util.NbBundle.getMessage(AdsReportBorderPanel.class, "AdsReportBorderPanel.leftCheckBox.text")); // NOI18N
        leftCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        leftCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                leftCheckBoxItemStateChanged(evt);
            }
        });
        leftPanel.add(leftCheckBox, java.awt.BorderLayout.PAGE_START);
        leftPanel.add(leftBorderPanel, java.awt.BorderLayout.CENTER);

        rightPanel.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(rightCheckBox, org.openide.util.NbBundle.getMessage(AdsReportBorderPanel.class, "AdsReportBorderPanel.rightCheckBox.text")); // NOI18N
        rightCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rightCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rightCheckBoxItemStateChanged(evt);
            }
        });
        rightPanel.add(rightCheckBox, java.awt.BorderLayout.PAGE_START);
        rightPanel.add(rightBorderPanel, java.awt.BorderLayout.CENTER);

        bottomPanel.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(bottomCheckBox, org.openide.util.NbBundle.getMessage(AdsReportBorderPanel.class, "AdsReportBorderPanel.bottomCheckBox.text")); // NOI18N
        bottomCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bottomCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bottomCheckBoxItemStateChanged(evt);
            }
        });
        bottomPanel.add(bottomCheckBox, java.awt.BorderLayout.PAGE_START);
        bottomPanel.add(bottomBorderPanel, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(rightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(iconButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(iconButton)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void topCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_topCheckBoxItemStateChanged
        boolean isSelected = topCheckBox.isSelected();
        topBorderPanel.setEnabled(isSelected);
        border.setOnTop(isSelected);
        fireChanges();
    }//GEN-LAST:event_topCheckBoxItemStateChanged

    private void rightCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rightCheckBoxItemStateChanged
        boolean isSelected = rightCheckBox.isSelected();
        rightBorderPanel.setEnabled(isSelected);
        border.setOnRight(isSelected);
        fireChanges();
    }//GEN-LAST:event_rightCheckBoxItemStateChanged

    private void leftCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_leftCheckBoxItemStateChanged
        boolean isSelected = leftCheckBox.isSelected();
        leftBorderPanel.setEnabled(isSelected);
        border.setOnLeft(isSelected);
        fireChanges();
    }//GEN-LAST:event_leftCheckBoxItemStateChanged

    private void bottomCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bottomCheckBoxItemStateChanged
        boolean isSelected = bottomCheckBox.isSelected();
        bottomBorderPanel.setEnabled(isSelected);
        border.setOnBottom(isSelected);
        fireChanges();
    }//GEN-LAST:event_bottomCheckBoxItemStateChanged

    private void iconButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iconButtonActionPerformed
        if (topCheckBox.isSelected() || leftCheckBox.isSelected()
                || rightCheckBox.isSelected() || bottomCheckBox.isSelected()) {
            topCheckBox.setSelected(false);
            leftCheckBox.setSelected(false);
            rightCheckBox.setSelected(false);
            bottomCheckBox.setSelected(false);
        } else {
            topCheckBox.setSelected(true);
            leftCheckBox.setSelected(true);
            rightCheckBox.setSelected(true);
            bottomCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_iconButtonActionPerformed

    private void fireChanges(){
        if (!updating){
            firePropertyChange(AdsReportDialogsUtils.BORDER_CHANGE, false, true);
        }
    }

    @Override
    public void addNotify() {
        super.addNotify();
        topBorderPanel.addPropertyChangeListener(AdsReportDialogsUtils.BORDER_CHANGE, listener);
        leftBorderPanel.addPropertyChangeListener(AdsReportDialogsUtils.BORDER_CHANGE, listener);
        bottomBorderPanel.addPropertyChangeListener(AdsReportDialogsUtils.BORDER_CHANGE, listener);
        rightBorderPanel.addPropertyChangeListener(AdsReportDialogsUtils.BORDER_CHANGE, listener); 
        
    }

    @Override
    public void removeNotify() {
        super.removeNotify();
        topBorderPanel.removePropertyChangeListener(AdsReportDialogsUtils.BORDER_CHANGE, listener);
        leftBorderPanel.removePropertyChangeListener(AdsReportDialogsUtils.BORDER_CHANGE, listener);
        bottomBorderPanel.removePropertyChangeListener(AdsReportDialogsUtils.BORDER_CHANGE, listener);
        rightBorderPanel.removePropertyChangeListener(AdsReportDialogsUtils.BORDER_CHANGE, listener); 
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        topCheckBox.setEnabled(enabled);
        leftCheckBox.setEnabled(enabled);
        bottomCheckBox.setEnabled(enabled);
        rightCheckBox.setEnabled(enabled);
        
        topBorderPanel.setEnabled(topCheckBox.isSelected() && enabled);
        leftBorderPanel.setEnabled(leftCheckBox.isSelected() && enabled);
        bottomBorderPanel.setEnabled(bottomCheckBox.isSelected() && enabled);
        rightBorderPanel.setEnabled(rightCheckBox.isSelected() && enabled);
        iconButton.setEnabled(enabled);
    }

    public Border getReportBorder() {
        return border;
    }

    public void apply(AdsReportAbstractAppearance appearance) {
        Border b = appearance.getBorder();
        b.setOnTop(border.isOnTop());
        b.setOnLeft(border.isOnLeft());
        b.setOnBottom(border.isOnBottom());
        b.setOnRight(border.isOnRight());
        
        if (border.isOnTop()){
            apply(topBorderPanel, b.getTopBorder());
        } 
        if (border.isOnLeft()){
            apply(leftBorderPanel, b.getLeftBorder());
        }
        if (border.isOnBottom()){
            apply(bottomBorderPanel, b.getBottomBorder());
        }
        if (border.isOnRight()){
            apply(rightBorderPanel, b.getRightBorder());
        }
    }
    
    private void apply(org.radixware.kernel.designer.ads.editors.clazz.report.appearance.AdsReportBorderPropertyPanel panel, BorderProperty prop) {
        prop.setThicknessMm(panel.getThiknesMm());
        prop.setStyle(panel.getStyle());
        prop.setColor(panel.getColor());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.radixware.kernel.designer.ads.editors.clazz.report.appearance.AdsReportBorderPropertyPanel bottomBorderPanel;
    private javax.swing.JCheckBox bottomCheckBox;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton iconButton;
    private org.radixware.kernel.designer.ads.editors.clazz.report.appearance.AdsReportBorderPropertyPanel leftBorderPanel;
    private javax.swing.JCheckBox leftCheckBox;
    private javax.swing.JPanel leftPanel;
    private org.radixware.kernel.designer.ads.editors.clazz.report.appearance.AdsReportBorderPropertyPanel rightBorderPanel;
    private javax.swing.JCheckBox rightCheckBox;
    private javax.swing.JPanel rightPanel;
    private org.radixware.kernel.designer.ads.editors.clazz.report.appearance.AdsReportBorderPropertyPanel topBorderPanel;
    private javax.swing.JCheckBox topCheckBox;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
