/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.dds.editors;


import java.awt.Component;
import javax.swing.DefaultListCellRenderer;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import org.radixware.kernel.common.defs.dds.DdsLabelDef;
import org.radixware.kernel.designer.common.dialogs.utils.DialogUtils;
import org.radixware.kernel.designer.common.editors.RadixObjectModalEditor;
import org.radixware.kernel.designer.common.general.editors.IEditorFactory;
import org.radixware.kernel.designer.common.general.editors.OpenInfo;

/**
 * DdsSequenceDef editor.
 */
public final class DdsLabelEditor extends RadixObjectModalEditor<DdsLabelDef> {

    private boolean opening = false;

    protected DdsLabelEditor(DdsLabelDef label) {
        super(label);
        initComponents();
        JTextField tfEditComp = (JTextField) cbSize.getEditor().getEditorComponent();
        tfEditComp.setHorizontalAlignment(SwingConstants.RIGHT);
        tfEditComp.setInputVerifier(new IntegerInputVerifier());
        cbSize.setRenderer(new RightAlignedListRenderer());
    }

    private class IntegerInputVerifier extends InputVerifier {

        @Override
        public boolean verify(JComponent input) {
            String text = ((JTextField) input).getText();
            try {
                Integer.parseInt(text);
            } catch (NumberFormatException exc) {
                DialogUtils.messageError("Invalid font size:\n\"" + text + "\" is not valid integer number");
                return false;
            }
            return true;
        }
    }

    private class RightAlignedListRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            label.setHorizontalAlignment(SwingConstants.RIGHT);
            return label;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labText = new javax.swing.JLabel();
        fontPanel = new javax.swing.JPanel();
        cbSize = new javax.swing.JComboBox();
        labSize = new javax.swing.JLabel();
        btnBold = new javax.swing.JButton();
        btnItalic = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taText = new javax.swing.JTextArea();

        org.openide.awt.Mnemonics.setLocalizedText(labText, org.openide.util.NbBundle.getMessage(DdsLabelEditor.class, "DdsLabelEditor.labText.text")); // NOI18N

        fontPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DdsLabelEditor.class, "DdsLabelEditor.fontPanel.border.title"))); // NOI18N

        cbSize.setEditable(true);
        cbSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8", "10", "12", "14", "18", "24", "36", "48" }));

        org.openide.awt.Mnemonics.setLocalizedText(labSize, org.openide.util.NbBundle.getMessage(DdsLabelEditor.class, "DdsLabelEditor.labSize.text")); // NOI18N

        btnBold.setFont(new java.awt.Font("Segoe UI", 1, 11));
        org.openide.awt.Mnemonics.setLocalizedText(btnBold, org.openide.util.NbBundle.getMessage(DdsLabelEditor.class, "DdsLabelEditor.btnBold.text")); // NOI18N
        btnBold.setBorderPainted(false);
        btnBold.setContentAreaFilled(false);
        btnBold.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnBold.setPreferredSize(new java.awt.Dimension(23, 23));
        btnBold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBoldMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBoldMouseExited(evt);
            }
        });
        btnBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoldActionPerformed(evt);
            }
        });

        btnItalic.setFont(new java.awt.Font("Segoe UI", 3, 11));
        org.openide.awt.Mnemonics.setLocalizedText(btnItalic, org.openide.util.NbBundle.getMessage(DdsLabelEditor.class, "DdsLabelEditor.btnItalic.text")); // NOI18N
        btnItalic.setBorderPainted(false);
        btnItalic.setContentAreaFilled(false);
        btnItalic.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnItalic.setPreferredSize(new java.awt.Dimension(23, 23));
        btnItalic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnItalicMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnItalicMouseExited(evt);
            }
        });
        btnItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItalicActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fontPanelLayout = new javax.swing.GroupLayout(fontPanel);
        fontPanel.setLayout(fontPanelLayout);
        fontPanelLayout.setHorizontalGroup(
            fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fontPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSize, 0, 130, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnItalic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        fontPanelLayout.setVerticalGroup(
            fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(labSize)
                .addComponent(btnItalic, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnBold, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cbSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        taText.setColumns(20);
        taText.setRows(5);
        jScrollPane1.setViewportView(taText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labText)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                    .addComponent(fontPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fontPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labText, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoldActionPerformed
        if (!opening) {
            btnBold.setSelected(!btnBold.isSelected());
        }
    }//GEN-LAST:event_btnBoldActionPerformed

    private void btnItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItalicActionPerformed
        if (!opening) {
            btnItalic.setSelected(!btnItalic.isSelected());
        }
    }//GEN-LAST:event_btnItalicActionPerformed

    private void btnBoldMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBoldMouseEntered
        if (!opening && !btnBold.isSelected()) {
            btnBold.setContentAreaFilled(true);
        }
    }//GEN-LAST:event_btnBoldMouseEntered

    private void btnBoldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBoldMouseExited
        if (!opening && !btnBold.isSelected()) {
            btnBold.setContentAreaFilled(false);
        }
    }//GEN-LAST:event_btnBoldMouseExited

    private void btnItalicMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnItalicMouseEntered
        if (!opening && !btnItalic.isSelected()) {
            btnItalic.setContentAreaFilled(true);
        }
    }//GEN-LAST:event_btnItalicMouseEntered

    private void btnItalicMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnItalicMouseExited
        if (!opening && !btnItalic.isSelected()) {
            btnItalic.setContentAreaFilled(false);
        }
    }//GEN-LAST:event_btnItalicMouseExited
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBold;
    private javax.swing.JButton btnItalic;
    private javax.swing.JComboBox cbSize;
    private javax.swing.JPanel fontPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labSize;
    private javax.swing.JLabel labText;
    private javax.swing.JTextArea taText;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean open(OpenInfo openInfo) {
        opening = true;

        DdsLabelDef label = getLabel();
        taText.setText(label.getText());

        DdsLabelDef.Font labelFont = label.getFont();
        cbSize.setSelectedItem(String.valueOf(labelFont.getSizePx()));

        boolean isBold = labelFont.isBold();
        btnBold.setSelected(isBold);
        btnBold.setContentAreaFilled(isBold);

        boolean isItalic = labelFont.isItalic();
        btnItalic.setSelected(isItalic);
        btnItalic.setContentAreaFilled(isItalic);

        update();

        opening = false;

        return super.open(openInfo);
    }

    @Override
    public void update() {
        updateState();
    }

    public void updateState() {
        DdsLabelDef label = getLabel();

        final boolean editable = !label.isReadOnly();

        fontPanel.setEnabled(editable);
        taText.setEditable(editable);
        cbSize.setEnabled(editable);
        btnBold.setEnabled(editable);
        btnItalic.setEnabled(editable);

        setComplete(true);
    }

    @Override
    protected void apply() {
        DdsLabelDef label = getLabel();
        label.setText(taText.getText());

        DdsLabelDef.Font labelFont = label.getFont();
        labelFont.setSizePx(Integer.parseInt((String) cbSize.getSelectedItem()));
        labelFont.setBold(btnBold.isSelected());
        labelFont.setItalic(btnItalic.isSelected());
    }

    private DdsLabelDef getLabel() {
        return getRadixObject();
    }

    public static final class Factory implements IEditorFactory<DdsLabelDef> {

        @Override
        public DdsLabelEditor newInstance(DdsLabelDef label) {
            return new DdsLabelEditor(label);
        }
    }

    @Override
    @SuppressWarnings("deprecation")
    public void requestFocus() {
        taText.requestFocus();
    }

    @Override
    public String getTitle() {
        return "Label Editor";
    }
}
