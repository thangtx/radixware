/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * FontPanel.java
 *
 * Created on 05.04.2010, 13:42:23
 */

package org.radixware.kernel.designer.ads.build.dialogs;

import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionListener;
import javax.swing.AbstractListModel;
import javax.swing.MutableComboBoxModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeListener;


public class FontToolbarPanel extends javax.swing.JPanel {

    /** Creates new form FontPanel */
    public FontToolbarPanel() {
        initComponents();
        familyBox.setModel(new FontModel()); 
        
    }

    public void setSelectedFontFamily(String family){
        assert(familyBox.getModel() instanceof FontModel);

        ((FontModel) familyBox.getModel()).setSelectedItem(family);
    }

    public String getSelectedFontFamily(){
        assert(familyBox.getModel() instanceof FontModel);

        return (String) ((FontModel) familyBox.getModel()).getSelectedItem();
    }

    public void setMaximumFontSize(int max){
        assert(sizeBox.getModel() instanceof SpinnerNumberModel);

        SpinnerNumberModel model = (SpinnerNumberModel) sizeBox.getModel();
        model.setMaximum(max);
    }

    public void setFontSize(int size){
        assert(sizeBox.getModel() instanceof SpinnerNumberModel);

        SpinnerNumberModel model = (SpinnerNumberModel) sizeBox.getModel();
        model.setValue(size); 
    }

    public Integer getFontSize(){
        assert(sizeBox.getModel() instanceof SpinnerNumberModel);

        SpinnerNumberModel model = (SpinnerNumberModel) sizeBox.getModel();
        return (Integer) model.getValue();
    }

    public void addFontFamilyChangeListener(ActionListener listener){
        familyBox.addActionListener(listener);
    }

    public void removeFontFamilyChangeListener(ActionListener listener){
        familyBox.removeActionListener(listener);
    }

    public void addFontSizeChangeListener(ChangeListener listener){
        sizeBox.addChangeListener(listener);
    }

    public void removeFontSizeChangeListener(ChangeListener listener){
        sizeBox.removeChangeListener(listener); 
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sizeBox = new javax.swing.JSpinner();
        familyBox = new javax.swing.JComboBox();

        sizeBox.setModel(new javax.swing.SpinnerNumberModel(2, 1, 28, 1));

        familyBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(familyBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sizeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(familyBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(sizeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox familyBox;
    private javax.swing.JSpinner sizeBox;
    // End of variables declaration//GEN-END:variables
public class FontModel extends AbstractListModel implements MutableComboBoxModel {

        private String[] fonts;
        private String selected;

        FontModel(){
            this.fonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
        }

        FontModel(Font selected) {
            this.fonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
            this.selected = selected.getFamily();
        }

        @Override
        public void addElement(Object obj) {
        }

        @Override
        public Object getElementAt(int index) {
            return fonts[index];
        }

        @Override
        public void setSelectedItem(Object anItem) {
            if (anItem instanceof String){
                String strItem = (String) anItem;
                this.selected = strItem;
            }
        }

        @Override
        public Object getSelectedItem() {
            return this.selected;
        }

        @Override
        public int getSize() {
            return fonts.length;
        }

        @Override
        public void insertElementAt(Object obj, int index) {
        }

        @Override
        public void removeElementAt(int index) {
        }

        @Override
        public void removeElement(Object obj) {
        }
    }
}
