/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.editors.branch;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import javax.swing.BorderFactory;
import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.SwingUtilities;
import javax.swing.event.ListDataListener;
import org.radixware.kernel.common.repository.Branch;
import org.radixware.kernel.common.repository.Layer;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ChooseLayer;
import org.radixware.kernel.designer.debugger.StartupInfo;


public class DebuggerSetup extends javax.swing.JPanel {

    /**
     * Creates new form DebuggerSetup
     */
    public DebuggerSetup() {
        initComponents();
        edTopLayer.setEditable(false);
        setBorder(BorderFactory.createEmptyBorder(4, 8, 4, 8));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel10 = new javax.swing.JLabel();
        edApp = new javax.swing.JTextField();
        lbAppHint = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        edJVM = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        edStarterArgs = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtClasspath = new javax.swing.JTextField();
        txtWorkDir = new javax.swing.JTextField();
        lblWorkDir = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        edTopLayer = new org.radixware.kernel.common.components.ExtendableTextField();

        setLayout(new java.awt.GridBagLayout());

        jLabel10.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.jLabel10.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        add(jLabel10, gridBagConstraints);

        edApp.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.edApp.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 0);
        add(edApp, gridBagConstraints);

        lbAppHint.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.lbAppHint.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -215;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 8, 0);
        add(lbAppHint, gridBagConstraints);

        jLabel19.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.jLabel19.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -35;
        gridBagConstraints.ipady = -1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 8, 0);
        add(jLabel19, gridBagConstraints);

        jLabel14.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.jLabel14.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        add(jLabel14, gridBagConstraints);

        edJVM.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.edJVM.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 274;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 0);
        add(edJVM, gridBagConstraints);

        jLabel6.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.jLabel6.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        add(jLabel6, gridBagConstraints);

        edStarterArgs.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.edStarterArgs.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 274;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 0);
        add(edStarterArgs, gridBagConstraints);

        jLabel12.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.jLabel12.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        add(jLabel12, gridBagConstraints);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 110;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 8, 0);
        add(jLabel1, gridBagConstraints);

        jLabel11.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.jLabel11.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        add(jLabel11, gridBagConstraints);

        txtClasspath.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.txtClasspath.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 0);
        add(txtClasspath, gridBagConstraints);

        txtWorkDir.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.txtWorkDir.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 0);
        add(txtWorkDir, gridBagConstraints);

        lblWorkDir.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.lblWorkDir.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        add(lblWorkDir, gridBagConstraints);

        jLabel3.setText(org.openide.util.NbBundle.getMessage(DebuggerSetup.class, "DebuggerSetup.jLabel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.weighty = 1.0;
        add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 0);
        add(edTopLayer, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField edApp;
    private javax.swing.JTextField edJVM;
    private javax.swing.JTextField edStarterArgs;
    private org.radixware.kernel.common.components.ExtendableTextField edTopLayer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lbAppHint;
    private javax.swing.JLabel lblWorkDir;
    private javax.swing.JTextField txtClasspath;
    private javax.swing.JTextField txtWorkDir;
    // End of variables declaration//GEN-END:variables
    private StartupInfo info;
    private Set<Layer> topLayerURIs = new HashSet<>();
    
    private class CBModel implements ComboBoxModel {
        
        String selectedItem = "";
        final List<String> uris;
        
        public CBModel(Branch branch) {
            List<Layer> layers = branch.getLayers().getInOrder();
            uris = new ArrayList<>(layers.size());
            for (Layer l : layers) {
                uris.add(l.getURI());
            }
        }
        
        @Override
        public void setSelectedItem(Object anItem) {
            selectedItem = (String) anItem;
        }
        
        @Override
        public Object getSelectedItem() {
            return selectedItem;
        }
        
        @Override
        public int getSize() {
            return uris.size();
        }
        
        @Override
        public Object getElementAt(int index) {
            return uris.get(index);
        }
        
        @Override
        public void addListDataListener(ListDataListener l) {
        }
        
        @Override
        public void removeListDataListener(ListDataListener l) {
        }
    }
    private JButton cfgTopLayersBtn = null;
    
    public void open(final StartupInfo info) {
        this.info = info;
        lbAppHint.setText(info.getAppArgsHint());
        edApp.setText(info.getAppArguments());
        edJVM.setText(info.getJVMArguments());
        edStarterArgs.setText(info.getStarterArguments());
        if (cfgTopLayersBtn == null) {
            cfgTopLayersBtn = edTopLayer.addButton("...");
            cfgTopLayersBtn.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            Set<Layer> newTopLayerURIs = ChooseLayer.choose(info.getBranch(), topLayerURIs, "Configure Top Layer List");
                            if (newTopLayerURIs != null) {
                                topLayerURIs.clear();
                                topLayerURIs.addAll(newTopLayerURIs);
                                updateTopLayerInfo();
                            }
                        }
                    });
                    
                }
            });
        }
        initTopLayerInfo(info);
        txtClasspath.setText(info.getClassPath());
        txtWorkDir.setText(info.getWorkDir());
    }
    
    private void initTopLayerInfo(StartupInfo info) {
        String[] infos = info.getTopLayerURI() == null ? new String[0] : info.getTopLayerURI().split(",");
        for (int i = 0; i < infos.length; i++) {
            infos[i] = infos[i].trim();
        }
        this.topLayerURIs.clear();
        for (String uri : infos) {
            Layer l = info.getBranch().getLayers().findByURI(uri);
            if (l != null) {
                this.topLayerURIs.add(l);
            }
        }
        updateTopLayerInfo();
    }
    
    private String getLayersAsString() {
        List<String> urls = new LinkedList<>();
        for (Layer l : topLayerURIs) {
            urls.add(l.getURI());
        }
        Collections.sort(urls);
        StringBuilder result = new StringBuilder();
        boolean first = true;
        for (String url : urls) {
            if (first) {
                first = false;
            } else {
                result.append(",");
            }
            result.append(url);
        }
        return result.toString();
    }
    
    private void updateTopLayerInfo() {
        this.edTopLayer.setTextFieldValue(getLayersAsString());
    }
    
    public void save() {
        if (info != null) {
            info.setAppArguments(edApp.getText());
            info.setJVMArguments(edJVM.getText());
            info.setStarterArguments(edStarterArgs.getText());
            info.setTopLayerURI(getLayersAsString());
            info.setClassPath(txtClasspath.getText());
            info.setWorkDir(txtWorkDir.getText());
        }
    }
    
    public StartupInfo getStartupInfo() {
        return info;
    }
}
