/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.eas.dialogs;

import java.util.LinkedList;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.event.ListDataListener;
import org.radixware.kernel.common.client.eas.connections.ConnectionOptions;
import org.radixware.kernel.designer.eas.client.DesignerConnections;


class LoginPanel extends javax.swing.JPanel {

    private class ConnectionCbItem {

        private final ConnectionOptions item;

        public ConnectionCbItem(ConnectionOptions item) {
            this.item = item;
        }

        @Override
        public String toString() {

            return item == null ? "<No connections>" : item.getName();
        }
    }

    private class ConnectionCbModel implements ComboBoxModel<ConnectionCbItem> {

        private ConnectionCbItem selected = null;
        private List<ConnectionCbItem> all = new LinkedList<>();
        private List<ListDataListener> listeners = new LinkedList<>();

        public ConnectionCbModel(DesignerConnections connections) {
            for (ConnectionOptions c : connections) {
                all.add(new ConnectionCbItem(c));
            }
            if (all.isEmpty()) {
                all.add(new ConnectionCbItem(null));
            }
            selected = all.get(0);
        }

        @Override
        public void setSelectedItem(Object anItem) {
            selected = (ConnectionCbItem) anItem;
        }

        @Override
        public Object getSelectedItem() {
            return selected;
        }

        @Override
        public int getSize() {
            return all.size();
        }

        @Override
        public ConnectionCbItem getElementAt(int index) {
            return all.get(index);
        }

        @Override
        public void addListDataListener(ListDataListener l) {
            if (!listeners.contains(l)) {
                listeners.add(l);
            }
        }

        @Override
        public void removeListDataListener(ListDataListener l) {
            listeners.remove(l);
        }
    }

    /**
     * Creates new form LoginPanel
     */
    public LoginPanel(LogonDialog dialog) {
        initComponents();
        ConnectionCbModel model = new ConnectionCbModel(dialog.getConnections());
        cbConnection.setModel(model);
        String userName = dialog.getUserName();
        if (userName == null) {
            userName = "";
        }
        if (userName.isEmpty()) {
            if (((ConnectionCbItem) model.getSelectedItem()).item != null && ((ConnectionCbItem) model.getSelectedItem()).item.getUserName() != null) {
                userName = ((ConnectionCbItem) model.getSelectedItem()).item.getUserName();
            }
        }
        edUser.setText(userName);
        edPassword.setText(dialog.getPassword() == null ? "" : dialog.getPassword());
    }

    public String getUserName() {
        return edUser.getText();
    }

    public String getPassword() {
        return String.valueOf(edPassword.getPassword());
    }

    public ConnectionOptions getConnection() {
        return ((ConnectionCbItem) cbConnection.getSelectedItem()).item;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        edUser = new javax.swing.JTextField();
        edPassword = new javax.swing.JPasswordField();
        cbConnection = new javax.swing.JComboBox();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(LoginPanel.class, "LoginPanel.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(LoginPanel.class, "LoginPanel.jLabel2.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(LoginPanel.class, "LoginPanel.jLabel3.text")); // NOI18N

        edUser.setText(org.openide.util.NbBundle.getMessage(LoginPanel.class, "LoginPanel.edUser.text")); // NOI18N

        edPassword.setText(org.openide.util.NbBundle.getMessage(LoginPanel.class, "LoginPanel.edPassword.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbConnection, 0, 258, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(edUser)
                            .addComponent(edPassword))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(edUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(edPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbConnection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbConnection;
    private javax.swing.JPasswordField edPassword;
    private javax.swing.JTextField edUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
