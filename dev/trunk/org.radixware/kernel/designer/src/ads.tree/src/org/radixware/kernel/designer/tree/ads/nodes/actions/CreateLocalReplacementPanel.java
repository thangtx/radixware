/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.radixware.kernel.designer.tree.ads.nodes.actions;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.nio.file.Files;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.miginfocom.swing.MigLayout;
import org.radixware.kernel.common.components.ExtendableTextField;
import org.radixware.kernel.common.dialogs.RadixImageDistributor;
import org.radixware.kernel.common.resources.RadixWareIcons;
import org.radixware.kernel.common.svn.utils.ReplacementUtils;
import org.radixware.kernel.designer.common.dialogs.components.state.StateAbstractDialog.StateAbstractPanel;
import org.radixware.kernel.designer.common.dialogs.components.state.StateManager;
import org.radixware.kernel.designer.common.dialogs.utils.DialogUtils;
import org.radixware.schemas.xscml.MmlType;

/**
 *
 * @author avoloshchuk
 */

public class CreateLocalReplacementPanel extends StateAbstractPanel {

    /**
     * Creates new form CreateLocalReplacementPanel
     */
    public CreateLocalReplacementPanel() {
        initComponents();
        setLayout(new MigLayout("fill"));
        add(outLabel, "shrink");
        chooseFile = txtOutput.addButton(RadixWareIcons.DIALOG.CHOOSE.getIcon());
        add(txtOutput, "growx, push, wrap");

        jPanel1.setLayout(new MigLayout("fillx", "[][][grow]"));
        jPanel1.add(rbOne, "shrink");
        jPanel1.add(rbRange, "shrink");
        jPanel1.add(rbAll, "shrink, wrap");
        jPanel3.setLayout(new MigLayout("fill, insets 0, hidemode 3"));
        jPanel3.add(jLabel1, "width pref, grow 0");
        jPanel3.add(jTextField1, "grow, push, gap 20");
        jPanel3.add(jLabel2, "width pref, grow 0");
        jPanel3.add(jTextField2, "grow, push");
        jPanel1.add(jPanel3, "span 3, growx");       
        add(jPanel1, "span 2, growx, wrap");
        jPanel2.setLayout(new MigLayout());
        jPanel2.add(commentLabel, "wrap");
        jPanel2.add(jScrollPane1, "grow, push");
        add(jSplitPane1, "span 2, grow, wrap");
        add(stateDisplayer1, "growx");
        
        rbOne.setToolTipText("Replacement for exactly one version or several. You can specify 'x' at the end (for example, y.y.y.x) to display all versions after the specified (y.y.y)");
        rbRange.setToolTipText("Replacement for range of version. You can specify 'x' at the end (for example, y.y.y.x) to display all versions after the specified (y.y.y)");
        rbAll.setToolTipText("Replacement for all versions");
        
        chooseFile.addActionListener(chooseFileListener);
        txtOutput.addChangeListener(changeListener);
        jTextField1.getDocument().addDocumentListener(documentListener);
        jTextField2.getDocument().addDocumentListener(documentListener);
        stateDisplayer1.getStateContext().reset();
        stateDisplayer1.getStateContext().updateMessage(StateManager.State.OK, "");
        jTable1.getColumnModel().getColumn(1).setMinWidth(20);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(20);
        jSplitPane1.setResizeWeight(0.85);    
        
    }
    
    public void open(List<String> paths, String currentVersion) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (String path : paths) {
            model.addRow(new Object[]{path, true});
        }
        rbOne.setSelected(true);
        jTextField1.setText(currentVersion);
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTable1.getModel());
        jTable1.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));

        sorter.setSortKeys(sortKeys);
        sorter.sort();
        check();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        chooseFile = new javax.swing.JButton();
        jFileChooser1 = new javax.swing.JFileChooser();
        outLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        rbOne = new javax.swing.JRadioButton();
        rbRange = new javax.swing.JRadioButton();
        rbAll = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        commentLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtOutput = new org.radixware.kernel.common.components.ExtendableTextField();
        stateDisplayer1 = new org.radixware.kernel.designer.common.dialogs.components.state.StateDisplayer();

        org.openide.awt.Mnemonics.setLocalizedText(outLabel, "Output location:");

        buttonGroup1.add(rbOne);
        org.openide.awt.Mnemonics.setLocalizedText(rbOne, "One");
        rbOne.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbOneItemStateChanged(evt);
            }
        });

        buttonGroup1.add(rbRange);
        org.openide.awt.Mnemonics.setLocalizedText(rbRange, "Range");
        rbRange.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbRangeItemStateChanged(evt);
            }
        });

        buttonGroup1.add(rbAll);
        org.openide.awt.Mnemonics.setLocalizedText(rbAll, "All Version");
        rbAll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbAllItemStateChanged(evt);
            }
        });

        jTextField2.setText("");

        jTextField1.setText("");

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "From");

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "To");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbOne)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbRange)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbAll)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbOne)
                    .addComponent(rbRange)
                    .addComponent(rbAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setOneTouchExpandable(true);

        org.openide.awt.Mnemonics.setLocalizedText(commentLabel, "Comment:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(commentLabel)
                        .addGap(0, 365, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(commentLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 25, Short.MAX_VALUE))
        );

        jSplitPane1.setBottomComponent(jPanel2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File", "Incude"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowSelectionAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);

        jSplitPane1.setLeftComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(outLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(stateDisplayer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outLabel)
                    .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(stateDisplayer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rbOneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbOneItemStateChanged
        if (rbOne.isSelected()) {
            jLabel1.setEnabled(true);
            jTextField1.setEnabled(true);
            jLabel2.setVisible(false);
            jTextField2.setVisible(false);
        }
        jPanel3.validate();
        check();
    }//GEN-LAST:event_rbOneItemStateChanged

    private void rbRangeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbRangeItemStateChanged
        if (rbRange.isSelected()) {
            jLabel1.setEnabled(true);
            jTextField1.setEnabled(true);
            jLabel2.setVisible(true);
            jTextField2.setVisible(true);
        }
        jPanel3.validate();
        check();
    }//GEN-LAST:event_rbRangeItemStateChanged

    private void rbAllItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbAllItemStateChanged
        if (rbAll.isSelected()) {
            jLabel1.setEnabled(false);
            jTextField1.setEnabled(false);
            jLabel2.setVisible(false);
            jTextField2.setVisible(false);
        }
        jPanel3.validate();
        check();
    }//GEN-LAST:event_rbAllItemStateChanged

    private final DocumentListener documentListener = new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            check();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            check();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            check();
        }
    };
    private final ActionListener chooseFileListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            JFileChooser fileChooser = new JFileChooser((File) null);
            FileFilter filter = new FileFilter() {
                @Override
                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    } else {
                        return f.getName().toLowerCase().endsWith(".zip");
                    }
                }

                @Override
                public String getDescription() {
                    return "ZIP Files";
                }
            };

            fileChooser.addChoosableFileFilter(filter);
            fileChooser.setFileFilter(filter);
            fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
            if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                if (!file.getName().endsWith(ZIP)) {
                    file = new File(file.getParentFile(), file.getName() + ZIP);
                }
                if (file.exists()) {                    
                    if (!DialogUtils.messageConfirmation("File " + file.getAbsolutePath() + " is already exists. Overwite?")) {
                        return;
                    }
                }
                txtOutput.setTextFieldValue(file.getAbsolutePath());
            }
            check();
        }
    };
    private final ExtendableTextField.ExtendableTextChangeListener changeListener = new ExtendableTextField.ExtendableTextChangeListener() {

        @Override
        public void onEvent(ExtendableTextField.ExtendableTextChangeEvent e) {
            check();
        }
    };
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton chooseFile;
    private javax.swing.JLabel commentLabel;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel outLabel;
    private javax.swing.JRadioButton rbAll;
    private javax.swing.JRadioButton rbOne;
    private javax.swing.JRadioButton rbRange;
    private org.radixware.kernel.designer.common.dialogs.components.state.StateDisplayer stateDisplayer1;
    private org.radixware.kernel.common.components.ExtendableTextField txtOutput;
    // End of variables declaration//GEN-END:variables
    private final String ZIP = ".zip";
    public File getFile() {
        return new File((String) txtOutput.getValue());
    }
    
    public List<String> getPaths() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        ArrayList<String> paths = new ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 1) == Boolean.TRUE) {
                paths.add((String) model.getValueAt(i, 0));
            }
        }
        return paths;
    }
    
    public String getComment() {
        return jTextArea1.getText();
    }
    
    public String getVersion() {
        StringBuilder sb = new StringBuilder();
        if (!rbAll.isSelected()) {
            sb.append(jTextField1.getText());
            if (rbRange.isSelected()) {
                sb.append("-").append(jTextField2.getText());
            }
        }
        return sb.toString();
    }

    @Override
    public void check() {
        File f = getFile();
        String name = f.getName().toLowerCase();
        if (ZIP.equals(name) || !name.endsWith(ZIP)) {
            stateManager.error("File is incorrect");
            changeSupport.fireChange();
            return;
        }
        if (rbOne.isSelected() || rbRange.isSelected()) {
            if (!checkVersion(jTextField1.getText())) {
                String message = rbOne.isSelected()? "Compatible version is incorrect" : "First compatible version is incorrect";
                stateManager.error(message);
                changeSupport.fireChange();
                return;
            }
        }
        if (!rbOne.isSelected() && rbRange.isSelected()) {
            if (!checkVersion(jTextField2.getText())) {
                stateManager.error("Second compatible version is incorrect");
                changeSupport.fireChange();
                return;
            }
        }
        stateManager.ok();
        changeSupport.fireChange();
    }
    
    private boolean checkVersion(String text) {
        try {
            ReplacementUtils.parseVersion(text, null);
        } catch (ParseException ex) {
            return false;
        }
        return true;
    }
}
