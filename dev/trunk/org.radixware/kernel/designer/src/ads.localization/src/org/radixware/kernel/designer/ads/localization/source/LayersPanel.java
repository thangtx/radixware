/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.radixware.kernel.designer.ads.localization.source;

import java.awt.Component;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.radixware.kernel.common.defs.Module;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.repository.Branch;
import org.radixware.kernel.common.repository.Layer;

/**
 *
 * @author avoloshchuk
 */
public class LayersPanel extends javax.swing.JPanel {
    private Branch branch;
    /**
     * Creates new form LayersPanel
     */
    public LayersPanel() {
        initComponents();
    }
    
    public void open(Set<Layer> layers){
        branch = layers.iterator().next().getBranch();
        List<Layer> allLayers = branch.getLayers().getInOrder();
        LayerTableModel model = new LayerTableModel();
        int count = 0;
        for (Layer layer : allLayers){
            if (!layer.isLocalizing()){
                boolean selected = false;
                if (layers.contains(layer)){
                    selected = true;
                }
                model.addRow(new Object[]{layer, selected});
                count++;
            }
        }
        model.setAllSelected(count == model.getSelectedSize());
        layersTabel.setModel(model);
        layersTabel.getColumnModel().getColumn(0).setCellRenderer(new Render());
        TableColumn checkboxesColumn = layersTabel.getColumnModel().getColumn(1);
        checkboxesColumn.setPreferredWidth(60);
        checkboxesColumn.setMaxWidth(60);
        checkboxesColumn.setMinWidth(60);
        checkboxesColumn.setCellRenderer(layersTabel.getDefaultRenderer(Boolean.class));
        layersTabel.getTableHeader().setReorderingAllowed(false);
        layersTabel.setRowHeight(20);
    }
    
    public Set<String> getSelectedLayers(){
        Set<String> layers = ((LayerTableModel)layersTabel.getModel()).getSelectedLayers();
        if (layers == null || layers.isEmpty())
                return null;
        else return layers;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        layersTabel = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        layersTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(layersTabel);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents
    
    class Render extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); 
            if (value instanceof RadixObject) {
                RadixObject radixObject = (RadixObject) value;
                if (radixObject instanceof Branch){
                    setText("Select All");
                    setIcon(null);
                } else {
                    setText(radixObject.getName());
                    setIcon(radixObject.getIcon().getIcon());
                }
                return this;
            }
            return component;
        }
        
        
    }

    
    class LayerTableModel extends DefaultTableModel{
        public LayerTableModel() {
            addColumn("Name");
            addColumn("Assign");
            if (branch != null) {
                addRow(new Object[]{branch, false});
            }
        }
        
        private void setAllLayersSelected(Object value){
            for (int i = 1; i < getRowCount(); i++){
                setValueAt(value, i, 1);
            }
        }
        
        public void setAllSelected(boolean selected){
            setValueAt(selected, 0, 1);
        }
        
        public Set<String> getSelectedLayers(){
            Set<String> list = new HashSet<>();
            for (int i = 1; i < getRowCount(); i++){
                if (getValueAt(i,1) == Boolean.TRUE){
                    Object value = getValueAt(i,0);
                    if (value instanceof Layer){
                        Layer layer = (Layer) value;
                        list.add(layer.getURI());
                    }
                }
            }
            return list;
        }
        
        public int getSelectedSize(){
            int selected = 0;
            for (int i = 0; i < getRowCount(); i++){
                if (getValueAt(i,1) == Boolean.TRUE){
                    selected++;
                }
            }
            return selected;
        }

        @Override
        public void setValueAt(Object aValue, int row, int column) {
            super.setValueAt(aValue, row, column);
            if (row == 0 && column == 1){
                setAllLayersSelected(aValue);
            } else {
                int count = getSelectedSize();
                if (getValueAt(0, 1) == Boolean.FALSE &&count == getRowCount() - 1){
                    super.setValueAt(Boolean.TRUE, 0, 1);
                } else {
                    if (getValueAt(0, 1) == Boolean.TRUE && aValue == Boolean.FALSE){
                        super.setValueAt(Boolean.FALSE, 0, 1);
                    }
                }
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            if (columnIndex == 1) {
			return Boolean.class;
            }
            return super.getColumnClass(columnIndex);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return column == 1;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable layersTabel;
    // End of variables declaration//GEN-END:variables
}
