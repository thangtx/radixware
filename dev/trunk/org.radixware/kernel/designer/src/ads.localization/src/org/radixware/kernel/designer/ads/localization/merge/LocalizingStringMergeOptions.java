package org.radixware.kernel.designer.ads.localization.merge;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import org.apache.xmlbeans.XmlException;
import org.openide.util.Exceptions;
import org.radixware.kernel.common.defs.Module;
import org.radixware.kernel.common.defs.localization.ILocalizingBundleDef;
import org.radixware.kernel.common.repository.Branch;
import org.radixware.kernel.common.repository.Layer;
import org.radixware.kernel.designer.ads.localization.MultilingualEditorUtils;
import static org.radixware.kernel.designer.ads.localization.merge.ChooseBranchesPanel.messageError;
import org.radixware.kernel.designer.ads.localization.source.FilterUtils;
import org.radixware.kernel.designer.common.dialogs.components.state.StateAbstractDialog;
import org.radixware.kernel.designer.common.dialogs.utils.DialogUtils;


public class LocalizingStringMergeOptions extends StateAbstractDialog.StateAbstractPanel {
    
    private final LocalizingStringOptions options;
    private boolean showDdsSegment = true;
    
    public LocalizingStringMergeOptions(Branch branch, Map<Layer, List<Module>> layers) {
        initComponents();
        layerPanel1.open(layers == null ? null : new HashMap<>(layers), showDdsSegment);
        options = new LocalizingStringOptions(branch);
        options.setBaseDevelopmentLayerUri(branch.getBaseDevelopmentLayerUri());
        layerPanel1.changeGap(90);
        
        authorComboBox.addItem(FilterUtils.NOT_DEFINED);
        for (String name : ILocalizingBundleDef.authors.getAuthors()){
            authorComboBox.addItem(name);
        }
        String author = MultilingualEditorUtils.getPreferensesValue(MultilingualEditorUtils.MERGE_AUTHOR, FilterUtils.NOT_DEFINED);
        if (author != null){
            authorComboBox.setSelectedItem(author);
        } else {
            authorComboBox.setSelectedIndex(0);
        }
        
        timePanel.open(null, null);
        check();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        authorComboBox = new javax.swing.JComboBox();
        timePanel = new org.radixware.kernel.designer.ads.localization.dialog.TimeFilterPanel();
        jLabel2 = new javax.swing.JLabel();
        layerPanel1 = new org.radixware.kernel.designer.ads.localization.dialog.LayerPanel();
        jLabel1 = new javax.swing.JLabel();
        txtOutput = new javax.swing.JTextField();
        btnChooseFile = new javax.swing.JButton();

        timePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(LocalizingStringMergeOptions.class, "LocalizingStringMergeOptions.timePanel.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(LocalizingStringMergeOptions.class, "LocalizingStringMergeOptions.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(LocalizingStringMergeOptions.class, "LocalizingStringMergeOptions.jLabel1.text")); // NOI18N

        txtOutput.setEditable(false);
        txtOutput.setText(org.openide.util.NbBundle.getMessage(LocalizingStringMergeOptions.class, "LocalizingStringMergeOptions.txtOutput.text")); // NOI18N
        txtOutput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOutputMouseClicked(evt);
            }
        });
        txtOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOutputActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnChooseFile, org.openide.util.NbBundle.getMessage(LocalizingStringMergeOptions.class, "LocalizingStringMergeOptions.btnChooseFile.text")); // NOI18N
        btnChooseFile.setMaximumSize(new java.awt.Dimension(47, 20));
        btnChooseFile.setMinimumSize(new java.awt.Dimension(47, 20));
        btnChooseFile.setPreferredSize(new java.awt.Dimension(47, 20));
        btnChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(48, 48, 48)
                        .addComponent(authorComboBox, 0, 613, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)
                        .addComponent(txtOutput)
                        .addGap(0, 0, 0)
                        .addComponent(btnChooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(layerPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnChooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(layerPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(authorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOutputActionPerformed

    private void btnChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFileActionPerformed
        chooseFile();
    }//GEN-LAST:event_btnChooseFileActionPerformed

    private void chooseFile(){
        File currentFile =  options.getFromBranchFile();
        BranchFileChooser fileChooser = BranchFileChooser.createFileChooser(currentFile, options.getBaseDevelopmentLayerUri(), currentFile.getAbsolutePath());
        while (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION && fileChooser.getSelectedFile() != null) {
            if (Branch.isBranchDir(fileChooser.getSelectedFile())
                    && !fileChooser.getSelectedFile().equals(currentFile)) {
                File f = fileChooser.getSelectedFile();
                try {
                    if (!LocalizingStringMergeUtils.radixVersionNotLessThen_2_1_7(f)){
                        options.setToBranchFile(f);
                        txtOutput.setText(f.getAbsolutePath());
                    } else {
                        DialogUtils.messageError("RadixWare version less than 2.1.7");
                    }
                } catch (XmlException | IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
                break;
            } 
            messageError("Incorrect branch directory");
        }
        check();
    }
    
    private void txtOutputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOutputMouseClicked
        if (evt.getClickCount() == 2) {
            chooseFile();
        }
    }//GEN-LAST:event_txtOutputMouseClicked

    public LocalizingStringOptions getOptions() {
        options.setDateFrom(timePanel.getTimeFrom());
        options.setDateTo(timePanel.getTimeTo());
        options.setLayers(MultilingualEditorUtils.getLayersAndModules(layerPanel1.getSelectedLayers()), showDdsSegment);
        Object value = authorComboBox.getSelectedItem();
        if (value instanceof String && value != FilterUtils.NOT_DEFINED){
            options.setLastModifiedAuthor((String) value);
        }
        save();
        return options;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox authorComboBox;
    private javax.swing.JButton btnChooseFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private org.radixware.kernel.designer.ads.localization.dialog.LayerPanel layerPanel1;
    private org.radixware.kernel.designer.ads.localization.dialog.TimeFilterPanel timePanel;
    private javax.swing.JTextField txtOutput;
    // End of variables declaration//GEN-END:variables

    @Override
    public void check() {
        if (options.getToBranchFile() != null){
            stateManager.ok();
        } else {
            stateManager.error("Branch directory is not defined");
        }
        
        changeSupport.fireChange();
    }
    
    public void save(){
        String author = null;
        Object value = authorComboBox.getSelectedItem();
        if (value instanceof String && value != FilterUtils.NOT_DEFINED){
            author = (String) value;
        }
        MultilingualEditorUtils.setPreferensesValue(MultilingualEditorUtils.MERGE_AUTHOR, author);
        
    }
}
