/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.radixware.kernel.designer.ads.localization.merge;

import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.radixware.kernel.common.repository.Branch;
import org.radixware.kernel.common.utils.Utils;
import org.radixware.kernel.designer.ads.localization.MultilingualEditorUtils;
import org.radixware.kernel.designer.common.dialogs.RadixWareDesignerIcon;
import org.radixware.kernel.designer.common.dialogs.utils.DialogUtils;
import org.radixware.kernel.designer.common.general.filesystem.RadixFileUtil;

public class ChooseBranchesPanel extends javax.swing.JPanel {
    private final String LOCALIZING_BRANCHES = "LocalizingBranchesDirs";
    private final String DELIMITER = "|";
    private Branch branch = null;
    private DefaultTableModel tableModel;
    /**
     * Creates new form ChooseBranchesPanel
     */
    public ChooseBranchesPanel() {
        initComponents();
        branchesTable.setTableHeader(null);
        branchesTable.setShowGrid(false);
        branchesTable.setIntercellSpacing(new Dimension(0, 0));
        branchesTable.setFillsViewportHeight(true);
        tableModel = (DefaultTableModel) branchesTable.getModel();
        branchesTable.getColumnModel().getColumn(1).setCellRenderer(new BranchTableCellRender());
        branchesTable.getColumnModel().getColumn(0).setMinWidth(20);
        branchesTable.getColumnModel().getColumn(0).setMaxWidth(20);
        
        addBtn.setIcon(RadixWareDesignerIcon.CREATE.ADD.getIcon());
        removeBtn.setIcon(RadixWareDesignerIcon.DELETE.DELETE.getIcon());
    }
    
    public void open(){
        branch = RadixFileUtil.getOpenedBranches().iterator().next();
        restorePreferenses();
    }
    
    private void restorePreferenses(){
        final Preferences pref = Utils.findPreferencesWithoutException(MultilingualEditorUtils.EDITOR_KEY);
        String dirs = null;
        if (pref != null) {
            dirs = pref.get(LOCALIZING_BRANCHES, null);
        }
        List<String> branchesPaths = new ArrayList<>();
        if (dirs != null) {
            String[] branches = dirs.split(DELIMITER);
            for (String branche : branches) {
                if (LocalizingStringMergeUtils.checkPath(new File(branche), branch.getFile().getParentFile(), branch.getBaseDevelopmentLayerUri())) {
                    branchesPaths.add(branche);
                }
            }
        }

        removeBtn.setEnabled(branchesTable.getRowCount() != 0);
    }
    
   public void savePreferenses(){
        final Preferences pref = Utils.findPreferencesWithoutException(MultilingualEditorUtils.EDITOR_KEY);
        String dirs = null;
//        if (pref != null) {
//            StringBuilder sb = new StringBuilder();
//            List<String> branchesPaths = new ArrayList<>(tableModel.getDataVector());
//            if (dirs != null) {
//                for (int count = 0; count < tableModel.getRowCount(); count++){
//                    sb.append(tableModel.getValueAt(count, 1).toString());
//                }
//            }
//            dirs = pref.put(LOCALIZING_BRANCHES, ); 
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        branchesTable = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();

        branchesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        branchesTable.getTableHeader().setResizingAllowed(false);
        branchesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(branchesTable);
        if (branchesTable.getColumnModel().getColumnCount() > 0) {
            branchesTable.getColumnModel().getColumn(0).setResizable(false);
            branchesTable.getColumnModel().getColumn(0).setPreferredWidth(20);
            branchesTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ChooseBranchesPanel.class, "ChooseBranchesPanel.branchesTable.columnModel.title0_1")); // NOI18N
            branchesTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ChooseBranchesPanel.class, "ChooseBranchesPanel.branchesTable.columnModel.title1_1")); // NOI18N
        }

        org.openide.awt.Mnemonics.setLocalizedText(addBtn, org.openide.util.NbBundle.getMessage(ChooseBranchesPanel.class, "ChooseBranchesPanel.addBtn.text")); // NOI18N
        addBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeBtn, org.openide.util.NbBundle.getMessage(ChooseBranchesPanel.class, "ChooseBranchesPanel.removeBtn.text")); // NOI18N
        removeBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                    .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(addBtn)
                .addGap(5, 5, 5)
                .addComponent(removeBtn)
                .addContainerGap(44, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        final int rowIndex = branchesTable.getSelectedRow();
        if (rowIndex != -1) {
            tableModel.removeRow(rowIndex);

            final int rowsCount = branchesTable.getRowCount();
            if (rowsCount == 0) {
                removeBtn.setEnabled(false);
            } else {
                int newRowPosition = rowsCount - 1;
                branchesTable.setRowSelectionInterval(newRowPosition, newRowPosition);
            }
        }
    }//GEN-LAST:event_removeBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        File currentFile = branch.getFile().getParentFile();
        BranchFileChooser fileChooser = BranchFileChooser.createFileChooser(currentFile, branch.getBaseDevelopmentLayerUri(), currentFile.getAbsolutePath());
        while (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION && fileChooser.getSelectedFile() != null) {
            if (Branch.isBranchDir(fileChooser.getSelectedFile())
                    && !fileChooser.getSelectedFile().equals(currentFile)) {

                BranchFile branchFile = new BranchFile(fileChooser.getSelectedFile());
                if (branchFile.getBranch() != null){
                    removeBtn.setEnabled(true);

                    final int newRowPosition = branchesTable.getRowCount();
                    tableModel.addRow(new Object[]{true, branchFile}); 
                    branchesTable.setRowSelectionInterval(newRowPosition, newRowPosition);
                    break;
                }
            } 
            messageError("Incorrect branch directory");
        }
    }//GEN-LAST:event_addBtnActionPerformed

    public static void messageError(final String mess) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                DialogUtils.messageError(mess);
            }
        });
    }
    
    private class BranchTableCellRender extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (value != null) {
                if (value instanceof BranchFile) {
                    BranchFile branchFile = (BranchFile) value;
                    setIcon(branchFile.getIcon());
                    setText(branchFile.toString());
                }
            }
            return this;
        }
    }
    
    private class BranchFile{
        private Branch branch = null;

        public BranchFile(File branchDir) {
            try {
                branch = Branch.Factory.loadFromDir(branchDir);
            } catch (IOException ex) {
                Logger.getLogger(LocalizingStringMergeUtils.class.getName()).log(Level.FINE, ex.getMessage(), ex);
            }
        }

        public Branch getBranch() {
            return branch;
        }
        
        public Icon getIcon(){
            return branch.getIcon().getIcon();
        }

        @Override
        public String toString() {
            return branch.getName();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTable branchesTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeBtn;
    // End of variables declaration//GEN-END:variables
}
