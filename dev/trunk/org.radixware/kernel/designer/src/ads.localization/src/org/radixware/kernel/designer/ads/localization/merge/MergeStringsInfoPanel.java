/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.radixware.kernel.designer.ads.localization.merge;

import java.awt.Component;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.radixware.kernel.common.defs.Definition;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.ads.localization.AdsLocalizingBundleDef;
import org.radixware.kernel.common.defs.localization.ILocalizingBundleDef;
import org.radixware.kernel.common.defs.localization.IMultilingualStringDef;
import org.radixware.kernel.common.enums.EIsoLanguage;
import org.radixware.schemas.adsdef.LocalizedString.Value;

public class MergeStringsInfoPanel extends javax.swing.JPanel {
    private DefaultTableModel tableModel;
    
    public MergeStringsInfoPanel(List<MergeBundle> bundles) {
        initComponents();
        table.setTableHeader(null);
        table.setFillsViewportHeight(true);
        tableModel = (DefaultTableModel) table.getModel();
        table.getColumnModel().getColumn(0).setMinWidth(20);
        table.getColumnModel().getColumn(0).setMaxWidth(20);
        table.getColumnModel().getColumn(1).setCellRenderer(new TableCellHeightRenderer());
        initValues(bundles);
    }
    
    private void initValues(List<MergeBundle> bundles){
        Map<IMultilingualStringDef, MergeInfo> modifiedStrings = new HashMap<>();
        for (MergeBundle bundle : bundles) {
            for (MergeFile file : bundle.getBundleFiles()) {
                for (IMultilingualStringDef multilingualStringDef : file.getMergeStrings()){
                    MergeInfo strings = modifiedStrings.get(multilingualStringDef);
                    if (strings == null){
                        strings = new MergeInfo(multilingualStringDef);
                    }
                    
                    MergeString string = file.findMergeString(multilingualStringDef);
                    if (string != null){
                        strings.add(string);
                    }
                    
                    if (!strings.isEmpty()){
                        modifiedStrings.put(multilingualStringDef, strings);
                    }
                }
            }
        }
        
        for (IMultilingualStringDef string : modifiedStrings.keySet()){
            MergeInfo mergeInfo = modifiedStrings.get(string);
            tableModel.addRow(new Object[]{ mergeInfo.isNeedMerged(), mergeInfo});
        }
        tableModel.addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                int column = e.getColumn();
                if (column == 0) {
                    int row = e.getFirstRow();
                    Object data = tableModel.getValueAt(row, 0);
                    if (data != null && data instanceof Boolean){
                        Boolean value = (Boolean) data;
                        data = tableModel.getValueAt(row, 1);
                        if (data instanceof MergeInfo) {
                            ((MergeInfo) data).setNeedMerged(value);
                        }
                    }
                    
                }
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(MergeStringsInfoPanel.class, "MergeStringsInfoPanel.table.columnModel.title0")); // NOI18N
            table.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(MergeStringsInfoPanel.class, "MergeStringsInfoPanel.table.columnModel.title1")); // NOI18N
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    class MergeInfo{
        private final IMultilingualStringDef srcString;
        private final List<MergeString> destStrings;

        public MergeInfo(IMultilingualStringDef srcString) {
            this.srcString = srcString;
            destStrings = new ArrayList<>();
        }
        
        public boolean isEmpty(){
            return destStrings.isEmpty();
        }
        
        public void add(MergeString mergeString){
            destStrings.add(mergeString);
        }
        
        public void setNeedMerged(boolean value){
            for (MergeString string : destStrings){
                string.setNeedMerge(value);
            }
        }
        
        public boolean isNeedMerged(){
           for (MergeString string : destStrings){
                if (string.isNeedMerge()){
                    return true;
                }
            } 
           return false;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append("<html>String Id: #");
            sb.append(srcString.getId());

            if (srcString instanceof RadixObject){
                sb.append("<br><i>Location: ");
                sb.append(((RadixObject)srcString).getQualifiedName());
                sb.append("</i>");
            }

            for (MergeString string : destStrings) {
                Set<EIsoLanguage> languages = string.getLanguages();
                for (EIsoLanguage language : languages) {
                    String s = srcString.getValue(language);
                    if (s != null) {
                        sb.append("<br><b>");
                        sb.append(language);
                        sb.append("</b><br/>");
                        sb.append("\"");
                        sb.append(SimpleEscaping.escapeHTML(s));
                        sb.append("\"");
                        Timestamp time = srcString.getLastChangeTime(language);
                        if (time != null) {
                            sb.append("<br/>Last modified ");
                            sb.append(dateTimeFormat.format(time));
                        }
                        String author = srcString.getLastChangeAuthor(language);
                        if (author != null) {
                            if (time != null) {
                                sb.append(" by ");
                            } else {
                                sb.append("<br/>Last modified by ");
                            }
                            sb.append(author);
                        }
                    }
                }

            }
            sb.append("</html>");
            return sb.toString();
        }
        
        private final DateFormat dateTimeFormat= new SimpleDateFormat("yyyy.MM.dd HH:mm");
    } 
    
    private static class TableCellHeightRenderer extends DefaultTableCellRenderer {

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            table.setRowHeight(row, getPreferredSize().height);

            return this;
        }
    }
    
    private static class SimpleEscaping {

        private static final Pattern[] patterns = new Pattern[]{
            Pattern.compile("&"),
            Pattern.compile("<"),
            Pattern.compile(">")
        };
        private static final String[] replacements = {
            "&amp;",
            "&lt;",
            "&gt;"
        };

        public static String escapeHTML(String input) {
            for (int i = 0; i < patterns.length; i++) {
                input = patterns[i].matcher(input).replaceAll(replacements[i]);
            }
            return input;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
