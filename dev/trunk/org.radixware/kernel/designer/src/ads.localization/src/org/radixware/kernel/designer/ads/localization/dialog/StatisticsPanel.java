/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * StatisticsDiagramPanel.java
 *
 * Created on Oct 7, 2009, 2:24:40 PM
 */

package org.radixware.kernel.designer.ads.localization.dialog;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractButton;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.enums.EIsoLanguage;
import org.radixware.kernel.designer.ads.localization.RowString;
import org.radixware.kernel.designer.ads.localization.source.FilterSettings;
import org.radixware.kernel.designer.ads.localization.source.FilterUtils;


public class StatisticsPanel extends JPanel/*StateAbstractPanel*/ {
    private Color[] colors = { Color.cyan, Color.yellow,  Color.red, Color.orange,  Color.green, 
                                      Color.pink,Color.gray, Color.blue, Color.lightGray , Color.magenta,
                                      Color.white, Color.darkGray};
    private List<StatisticsInfo> statistic;

    /** Creates new form StatisticsDiagramPanel */
    public StatisticsPanel(final List<RowString> mlStrings, final List<RowString> filtredStrings, final List<EIsoLanguage> sourceLang, final List<EIsoLanguage> translLangs) {
        initComponents();
        this.statistic = new ArrayList<>();
        tablePanel.setBorder(new EmptyBorder(10,0,0,0));
        
        this.add(diagrammPanel);
        this.add(tablePanel);
        if (filtredStrings == null) {
            tablePanel.setUseFilterEnabled(false);
            update(sourceLang, translLangs, mlStrings);
        } else {
            tablePanel.setUseFilterEnabled(true);
            tablePanel.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    int state = e.getStateChange();
                    List<RowString> currentList;
                    final String toolTipText;
                    if (state == ItemEvent.SELECTED) {
                        currentList = filtredStrings;
                        toolTipText = NbBundle.getMessage(StatisticsPanel.class, "NOT_USE_FILTER");
                    } else {
                        currentList = mlStrings;
                        toolTipText = NbBundle.getMessage(StatisticsPanel.class, "USE_FILTER");
                    }
                    tablePanel.setUseFilterToolTip(toolTipText);
                    update(sourceLang, translLangs, currentList);

                }
            });
            
            tablePanel.setUseFilterSelected(true);
            update(sourceLang, translLangs, filtredStrings);
            tablePanel.setUseFilterToolTip(NbBundle.getMessage(StatisticsPanel.class, "NOT_USE_FILTER"));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        diagrammPanel = new org.radixware.kernel.designer.ads.localization.dialog.StatisticsDiagramPanel();
        tablePanel = new org.radixware.kernel.designer.ads.localization.dialog.StatisticsTable();

        setPreferredSize(new java.awt.Dimension(0, 0));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));
        add(diagrammPanel);
        add(tablePanel);
    }// </editor-fold>//GEN-END:initComponents


    public final void update(final List<EIsoLanguage> sourceLang, final List<EIsoLanguage> translLangs,final List<RowString> strings){
        calc(translLangs,strings);
        diagrammPanel.open(statistic);
        tablePanel.open(statistic);
    }
    
    private void calc(final List<EIsoLanguage> translLangs, List<RowString> mlStrings) {
        statistic.clear();
        int index=0;

        for(EIsoLanguage lang:translLangs){
            StatisticsInfo info=new StatisticsInfo(lang,getColor(index),mlStrings);
            statistic.add(info);
            index++;
        }
        if(translLangs.size()>1){
            int n=0;
            for(RowString rowString:mlStrings){
                 if(!rowString.isNeedsCheck(translLangs)){
                    n++;
                 }
            }
            StatisticsInfo info=new StatisticsInfo(NbBundle.getMessage(StatisticsDiagramPanel.class, "ALL_LANGS"),getColor(index),mlStrings,n);
            statistic.add(info);
        }
    }


    private Color getColor(int i) {
         return colors[i%colors.length];
    }

    public List<StatisticsInfo> getStatisticsInfo() {
        return statistic;
    }

    public class StatisticsInfo {
        private String label;
        private BigDecimal persent;
        private Color color;
        private int checkWordCount;
        private long checkCharacterCount;
        private long checkCharacterWithSpaceCount;
        private int wordCount;
        private int checkedMlStringCount;
        private long characterCount;
        private long characterWithSpaceCount;
        private List<RowString> mlStrings;

        StatisticsInfo(final EIsoLanguage lang,final Color color,List<RowString> mlStrings) {
            label=lang.getName();
            this.color=color;
            this.mlStrings = mlStrings;
            
            int size=mlStrings.size(),ckwords=0,words=0;
            long ckcharacterWithSpace=0, ckcharacter=0,characterWithSpace=0, character=0;
            for(RowString rowString : mlStrings){
                final String translation=rowString.getValue(lang);
                if((!rowString.isNeedsCheck(lang))){
                    if(translation!=null){
                        ckcharacterWithSpace+=translation.length();
                        ckwords+=calcWords( translation);
                        ckcharacter+=calcCharacters( translation);
                    }
                    checkedMlStringCount++;
                }else{
                    if(translation!=null){
                        characterWithSpace+=translation.length();
                        words+=calcWords( translation);
                        character+=calcCharacters( translation);
                    }
                }
            }
            persent=calcPersent(checkedMlStringCount,  size);

            checkWordCount=ckwords;
            checkCharacterCount=ckcharacter;
            checkCharacterWithSpaceCount=ckcharacterWithSpace;

            wordCount=words+ckwords;
            characterCount=character+ckcharacter;
            characterWithSpaceCount=characterWithSpace+ckcharacterWithSpace;
        }

        StatisticsInfo(final String s, final Color c,List<RowString> mlStrings,int sumOfUncheckedWords) {
            label=s;
            color=c;
            
            this.persent=calcPersent(sumOfUncheckedWords,  mlStrings.size());
            this.mlStrings = mlStrings;
        }

        public BigDecimal getPersent() {
            return persent;
        }

        public String getLabel() {
            return label;//isTranslatedLang ? label :label +"(source language)";
        }

        public Color getColor() {
            return color;
        }

        public int getCheckWordCount() {
            return checkWordCount;
        }
        
        public int getCheckedMlStringCount() {
            return checkedMlStringCount;
        }
        
        public int getMlStringCount() {
            return mlStrings.size();
        }

        public long getCheckCharacterCount() {
            return checkCharacterCount;
        }

        public long getCheckCharacterWithSpaceCount() {
            return checkCharacterWithSpaceCount;
        }
        
        public int getWordCount() {
            return wordCount;
        }
        
        public long getCharacterCount() {
            return characterCount;
        }

        public long getCharacterWithSpaceCount() {
            return characterWithSpaceCount;
        }
        
        private int calcWords(final String translation) {
            String[] strArr=translation.split("\n");
            return strArr.length;
        }
        
        private int calcCharacters(final String translation) {
            String s=translation.replace("\n", "");
            s=s.replace(" ", "");
            return s.length();
        }
        
        private BigDecimal calcPersent(final int sumOfUncheckedWords,final int size) {
            BigDecimal x = new BigDecimal(sumOfUncheckedWords*100.0/size);
            x = x.setScale(2, BigDecimal.ROUND_HALF_UP);
            return x;
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.radixware.kernel.designer.ads.localization.dialog.StatisticsDiagramPanel diagrammPanel;
    private org.radixware.kernel.designer.ads.localization.dialog.StatisticsTable tablePanel;
    // End of variables declaration//GEN-END:variables

}
