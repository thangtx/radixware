/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.radixware.kernel.designer.ads.localization.source;

import java.io.File;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import org.radixware.kernel.common.repository.Branch;
import org.radixware.kernel.designer.common.dialogs.components.state.StateAbstractDialog;
import org.radixware.kernel.designer.common.general.filesystem.RadixFileUtil;

/**
 *
 * @author avoloshchuk
 */
public class Xls2MlsOptionsPanel extends StateAbstractDialog.StateAbstractPanel {

    /**
     * Creates new form ImportOptions
     */
    public Xls2MlsOptionsPanel() {
        initComponents();
        
        txtInput.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                getFileFromText();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                getFileFromText();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                getFileFromText();
            }
            
        });
        
        check();
    }
    
    private File inFile;

     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtInput = new javax.swing.JTextField();
        btnChooseFile = new javax.swing.JButton();
        setAgreed = new javax.swing.JCheckBox();
        setCkecked = new javax.swing.JCheckBox();

        setMinimumSize(new java.awt.Dimension(300, 94));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(Xls2MlsOptionsPanel.class, "Xls2MlsOptionsPanel.jLabel1.text")); // NOI18N

        txtInput.setText(org.openide.util.NbBundle.getMessage(Xls2MlsOptionsPanel.class, "Xls2MlsOptionsPanel.txtInput.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnChooseFile, org.openide.util.NbBundle.getMessage(Xls2MlsOptionsPanel.class, "Xls2MlsOptionsPanel.btnChooseFile.text")); // NOI18N
        btnChooseFile.setMaximumSize(new java.awt.Dimension(47, 20));
        btnChooseFile.setMinimumSize(new java.awt.Dimension(47, 20));
        btnChooseFile.setPreferredSize(new java.awt.Dimension(47, 20));
        btnChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFileActionPerformed(evt);
            }
        });

        setAgreed.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(setAgreed, org.openide.util.NbBundle.getMessage(Xls2MlsOptionsPanel.class, "Xls2MlsOptionsPanel.setAgreed.text")); // NOI18N
        setAgreed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAgreedActionPerformed(evt);
            }
        });

        setCkecked.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(setCkecked, org.openide.util.NbBundle.getMessage(Xls2MlsOptionsPanel.class, "Xls2MlsOptionsPanel.setCkecked.text")); // NOI18N
        setCkecked.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)
                        .addComponent(txtInput, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(btnChooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(setAgreed)
                            .addComponent(setCkecked))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnChooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setCkecked)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setAgreed)))
                .addContainerGap(10, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFileActionPerformed
        chooseFile();
        check();
    }//GEN-LAST:event_btnChooseFileActionPerformed

    private void setAgreedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAgreedActionPerformed
        if (setAgreed.isSelected()){
            setCkecked.setSelected(true);
            setCkecked.setEnabled(false);
        } else {
            setCkecked.setEnabled(true);
        }
    }//GEN-LAST:event_setAgreedActionPerformed

    private void chooseFile() {
        String locations = System.getProperty("user.home");
        JFileChooser chooser = new JFileChooser(locations);
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filter = new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().endsWith(".xls");
                }
            }

            @Override
            public String getDescription() {
                return "Excel File (xls)";
            }
        };

        chooser.addChoosableFileFilter(filter);
        chooser.setFileFilter(filter);
        chooser.setMultiSelectionEnabled(false);
        chooser.setDialogTitle("Choose location");

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            final File file = chooser.getSelectedFile();
            if (file != null && file.exists()) {
                inFile = file;
            }
            txtInput.setText(inFile.getAbsolutePath());
        }
    }
    
    private void getFileFromText(){
        String text = txtInput.getText();
        File file = new File(text);
        if (text.endsWith(".xls") && file.exists()) {
            inFile = file;
        } else {
            inFile = null;
        }
        check();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox setAgreed;
    private javax.swing.JCheckBox setCkecked;
    private javax.swing.JTextField txtInput;
    // End of variables declaration//GEN-END:variables

    @Override
    public void check() {
        if (inFile == null){
            stateManager.error("file not selected");
        } else {
            stateManager.ok();
        }
        changeSupport.fireChange();
    }
    
    
    public boolean getSetAgreed(){
        return setAgreed.isSelected();
    }

    public boolean getSetCkecked() {
        return setCkecked.isSelected();
    }

    public File getInFile() {
        return inFile;
    }
}
