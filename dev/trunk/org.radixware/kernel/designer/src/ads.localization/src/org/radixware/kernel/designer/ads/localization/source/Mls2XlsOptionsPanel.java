
package org.radixware.kernel.designer.ads.localization.source;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.BoxLayout;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.jdesktop.swingx.JXTable.BooleanEditor;
import org.radixware.kernel.common.defs.Definition;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.localization.ILocalizingBundleDef;
import org.radixware.kernel.common.repository.Branch;
import org.radixware.kernel.common.repository.Layer;
import org.radixware.kernel.designer.ads.localization.MultilingualEditor;
import org.radixware.kernel.designer.common.dialogs.utils.DialogUtils;


public class Mls2XlsOptionsPanel extends javax.swing.JPanel {

    private File outFile;
    private final Branch branch;
    public Mls2XlsOptionsPanel(Set<Layer> layers) {
        
        initComponents();
        
        timePanel.open(null, null);
        
        authorComboBox.addItem(FilterUtils.NOT_DEFINED);
        for (String name : ILocalizingBundleDef.authors.getAuthors()){
            authorComboBox.addItem(name);
        }
        String author = getPreferensesValue(MultilingualEditor.EXPORT_AUTHOR, FilterUtils.NOT_DEFINED);
        if (author != null){
            authorComboBox.setSelectedItem(author);
        } else {
            authorComboBox.setSelectedIndex(0);
        }
        
        String locations = System.getProperty("user.home") + File.separator + "strings.xls";
        txtOutput.setText(getPreferensesValue(MultilingualEditor.OUTPUT_LOCATIONS, locations));

        branch = layers.iterator().next().getBranch();
        List<Layer> allLayers = branch.getLayers().getInOrder();
        LayerTableModel model = new LayerTableModel();
        int count = 0;
        for (Layer layer : allLayers){
            if (!layer.isLocalizing()){
                boolean selected = false;
                if (layers.contains(layer)){
                    selected = true;
                }
                model.addRow(new Object[]{layer, selected});
                count++;
            }
        }
        model.setAllSelected(count == model.getSelectedSize());
        layersTabel.setModel(model);
        layersTabel.getColumnModel().getColumn(0).setCellRenderer(new Render());
        TableColumn checkboxesColumn = layersTabel.getColumnModel().getColumn(1);
        checkboxesColumn.setPreferredWidth(60);
        checkboxesColumn.setMaxWidth(60);
        checkboxesColumn.setMinWidth(60);
        checkboxesColumn.setCellRenderer(layersTabel.getDefaultRenderer(Boolean.class));
        layersTabel.getTableHeader().setReorderingAllowed(false);
        layersTabel.setRowHeight(20);
    }

    public File getOutputFile(){
        if (outFile == null) {
            setOutputFile(new File(txtOutput.getText()), false);
        }
        return outFile;
    }
    
    public Set<String> getSelectedLayers(){
        Set<String> layers = ((LayerTableModel)layersTabel.getModel()).getSelectedLayers();
        if (layers == null || layers.isEmpty())
                return null;
        else return layers;
    }

    public Branch getBranch() {
        return branch;
    }

    public Date getFromDate(){
        return timePanel.getTimeFrom();
    }
    
    public Date getToDate(){
        return timePanel.getTimeTo();
    }
    
    public String getLastModifiedAuthor(){
        Object value = authorComboBox.getSelectedItem();
        if (value instanceof String && value != FilterUtils.NOT_DEFINED){
            return (String) value;
        }
        return null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        edTimeFrom = new org.radixware.kernel.designer.ads.editors.common.adsvalasstr.AdsValAsStrEditor();
        lbFrom = new javax.swing.JLabel();
        creationTimePanel = new org.radixware.kernel.designer.ads.localization.dialog.TimeFilterPanel();
        jLabel1 = new javax.swing.JLabel();
        txtOutput = new javax.swing.JTextField();
        btnChooseFile = new javax.swing.JButton();
        timePanel = new org.radixware.kernel.designer.ads.localization.dialog.TimeFilterPanel();
        authorComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        layersPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        layersTabel = new javax.swing.JTable();

        org.openide.awt.Mnemonics.setLocalizedText(lbFrom, org.openide.util.NbBundle.getMessage(Mls2XlsOptionsPanel.class, "Mls2XlsOptionsPanel.lbFrom.text")); // NOI18N

        setMaximumSize(new java.awt.Dimension(391, 153));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(Mls2XlsOptionsPanel.class, "Mls2XlsOptionsPanel.jLabel1.text")); // NOI18N

        txtOutput.setText(org.openide.util.NbBundle.getMessage(Mls2XlsOptionsPanel.class, "Mls2XlsOptionsPanel.txtOutput.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnChooseFile, org.openide.util.NbBundle.getMessage(Mls2XlsOptionsPanel.class, "Mls2XlsOptionsPanel.btnChooseFile.text")); // NOI18N
        btnChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFileActionPerformed(evt);
            }
        });

        timePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(Mls2XlsOptionsPanel.class, "Mls2XlsOptionsPanel.timePanel.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(Mls2XlsOptionsPanel.class, "Mls2XlsOptionsPanel.jLabel2.text")); // NOI18N

        layersPanel.setLayout(new javax.swing.BoxLayout(layersPanel, javax.swing.BoxLayout.PAGE_AXIS));

        layersTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(layersTabel);

        layersPanel.add(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(authorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(timePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addComponent(txtOutput)
                        .addGap(0, 0, 0)
                        .addComponent(btnChooseFile))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(layersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                        .addGap(2, 2, 2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnChooseFile))
                .addGap(10, 10, 10)
                .addComponent(timePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(authorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(layersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFileActionPerformed
        chooseFile();
    }//GEN-LAST:event_btnChooseFileActionPerformed

    private void chooseFile() {
        JFileChooser chooser = new JFileChooser(txtOutput.getText());
        chooser.setSelectedFile(new File("strings.xls"));
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filter = new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().endsWith(".xls");
                }
            }

            @Override
            public String getDescription() {
                return "Excel File (xls)";
            }
        };

        chooser.addChoosableFileFilter(filter);
        chooser.setFileFilter(filter);
        chooser.setMultiSelectionEnabled(false);
        chooser.setDialogTitle("Choose location");

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            if (file != null) {
                setOutputFile(file, true);
                txtOutput.setText(outFile.getPath());
            }
        }
    }

    private void setOutputFile(File file, boolean showOverwrite) {
        if (!file.getName().endsWith(".xls")) {
            file = new File(file.getAbsolutePath() + ".xls");
        }
        if (file.exists() && showOverwrite) {
            if (!DialogUtils.messageConfirmation("File " + file.getPath() + " is already exists. Overwrite?")) {
                return;
            }
        }
        outFile = file;
    }

    private String getPreferensesValue(String key, String defaultValue) {
        try {
            if (Preferences.userRoot().nodeExists(MultilingualEditor.PREFERENCES_KEY)) {
                Preferences designerPreferences = Preferences.userRoot().node(MultilingualEditor.PREFERENCES_KEY);
                if (designerPreferences.nodeExists(MultilingualEditor.EDITOR_KEY)) {
                    Preferences editor = designerPreferences.node(MultilingualEditor.EDITOR_KEY);
                    return editor.get(key, defaultValue);
                }
            }
        } catch (BackingStoreException ex) {
            DialogUtils.messageError(ex);
        }
        return defaultValue;
    }
    
    public void save(){
        Preferences designerPreferences = Preferences.userRoot().node(MultilingualEditor.PREFERENCES_KEY);
        Preferences editor = designerPreferences.node(MultilingualEditor.EDITOR_KEY);
        
        editor.put(MultilingualEditor.OUTPUT_LOCATIONS, txtOutput.getText());
        String author = getLastModifiedAuthor();
        if (author == null){
            editor.remove(MultilingualEditor.EXPORT_AUTHOR);
        } else {
            editor.put(MultilingualEditor.EXPORT_AUTHOR, author);
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox authorComboBox;
    private javax.swing.JButton btnChooseFile;
    private org.radixware.kernel.designer.ads.localization.dialog.TimeFilterPanel creationTimePanel;
    private org.radixware.kernel.designer.ads.editors.common.adsvalasstr.AdsValAsStrEditor edTimeFrom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel layersPanel;
    private javax.swing.JTable layersTabel;
    private javax.swing.JLabel lbFrom;
    private org.radixware.kernel.designer.ads.localization.dialog.TimeFilterPanel timePanel;
    private javax.swing.JTextField txtOutput;
    // End of variables declaration//GEN-END:variables

    class Render extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); 
            if (value instanceof RadixObject) {
                RadixObject radixObject = (RadixObject) value;
                if (radixObject instanceof Branch){
                    setText("Select All");
                    setIcon(null);
                } else {
                    setText(radixObject.getName());
                    setIcon(radixObject.getIcon().getIcon());
                }
                return this;
            }
            return component;
        }
        
        
    }

    
    class LayerTableModel extends DefaultTableModel{
        public LayerTableModel() {
            addColumn("Name");
            addColumn("Assign");
            addRow(new Object[]{branch, false});
        }
        
        private void setAllLayersSelected(Object value){
            for (int i = 1; i < getRowCount(); i++){
                setValueAt(value, i, 1);
            }
        }
        
        public void setAllSelected(boolean selected){
            setValueAt(selected, 0, 1);
        }
        
        public Set<String> getSelectedLayers(){
            Set<String> list = new HashSet<>();
            for (int i = 1; i < getRowCount(); i++){
                if (getValueAt(i,1) == Boolean.TRUE){
                    Object value = getValueAt(i,0);
                    if (value instanceof Layer){
                        Layer layer = (Layer) value;
                        list.add(layer.getURI());
                    }
                }
            }
            return list;
        }
        
        public int getSelectedSize(){
            int selected = 0;
            for (int i = 0; i < getRowCount(); i++){
                if (getValueAt(i,1) == Boolean.TRUE){
                    selected++;
                }
            }
            return selected;
        }

        @Override
        public void setValueAt(Object aValue, int row, int column) {
            super.setValueAt(aValue, row, column);
            if (row == 0 && column == 1){
                setAllLayersSelected(aValue);
            } else {
                int count = getSelectedSize();
                if (getValueAt(0, 1) == Boolean.FALSE &&count == getRowCount() - 1){
                    super.setValueAt(Boolean.TRUE, 0, 1);
                } else {
                    if (getValueAt(0, 1) == Boolean.TRUE && aValue == Boolean.FALSE){
                        super.setValueAt(Boolean.FALSE, 0, 1);
                    }
                }
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            if (columnIndex == 1) {
			return Boolean.class;
            }
            return super.getColumnClass(columnIndex);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return column == 1;
        }
    }
}
