/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.ads.editors.clazz.sql.panels;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.util.NbBundle;
import org.radixware.kernel.common.defs.ExtendableDefinitions.EScope;
import org.radixware.kernel.common.defs.IFilter;
import org.radixware.kernel.common.defs.IParameterDef;
import org.radixware.kernel.common.defs.RadixObject;
import org.radixware.kernel.common.defs.VisitorProvider;
import org.radixware.kernel.common.defs.ads.clazz.entity.AdsEntityObjectClassDef;
import org.radixware.kernel.common.defs.ads.clazz.members.AdsDynamicPropertyDef;
import org.radixware.kernel.common.defs.ads.clazz.members.AdsParameterPropertyDef;
import org.radixware.kernel.common.defs.ads.clazz.members.AdsPropertyDef;
import org.radixware.kernel.common.defs.ads.common.AdsVisitorProviders;
import org.radixware.kernel.common.enums.EParamDirection;
import org.radixware.kernel.common.sqml.tags.ParameterTag;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ChooseDefinitionCfg;
import org.radixware.kernel.designer.common.dialogs.scmlnb.tags.TagEditor;


public class ParameterTagEditor extends TagEditor<ParameterTag> {

    /** Creates new form ParameterTagEditor */
    public ParameterTagEditor() {
        initComponents();
        DefaultComboBoxModel model = new DefaultComboBoxModel(EParamDirection.values());
        coDirection.setModel(model);
        coDirection.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                lbDirection.setVisible(coDirection.isVisible());
            }
        });
        lbDirection.setVisible(coDirection.isVisible());
        rbUseProperty.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                dlProperty.setEnabled(rbUseProperty.isSelected());
            }
        });
        dlProperty.setEnabled(rbUseProperty.isSelected());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgPropOrPk = new javax.swing.ButtonGroup();
        dlpParameter = new org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel();
        cbLiteral = new javax.swing.JCheckBox();
        lbDirection = new javax.swing.JLabel();
        coDirection = new javax.swing.JComboBox();
        lbParameter = new javax.swing.JLabel();
        dlProperty = new org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel();
        rbUsePrimaryKey = new javax.swing.JRadioButton();
        rbUseProperty = new javax.swing.JRadioButton();

        setMaximumSize(new java.awt.Dimension(32767, 90));
        setMinimumSize(new java.awt.Dimension(380, 160));
        setPreferredSize(new java.awt.Dimension(380, 160));

        cbLiteral.setText(org.openide.util.NbBundle.getMessage(ParameterTagEditor.class, "ParameterTagEditor.cbLiteral.text")); // NOI18N

        lbDirection.setText(org.openide.util.NbBundle.getMessage(ParameterTagEditor.class, "ParameterTagEditor.lbDirection.text")); // NOI18N

        coDirection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbParameter.setText(org.openide.util.NbBundle.getMessage(ParameterTagEditor.class, "ParameterTagEditor.lbParameter.text")); // NOI18N

        bgPropOrPk.add(rbUsePrimaryKey);
        rbUsePrimaryKey.setText(org.openide.util.NbBundle.getMessage(ParameterTagEditor.class, "ParameterTagEditor.rbUsePrimaryKey.text")); // NOI18N

        bgPropOrPk.add(rbUseProperty);
        rbUseProperty.setText(org.openide.util.NbBundle.getMessage(ParameterTagEditor.class, "ParameterTagEditor.rbUseProperty.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbParameter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dlpParameter, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbDirection)
                                .addGap(24, 24, 24)
                                .addComponent(coDirection, 0, 202, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbLiteral)))
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbUseProperty)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dlProperty, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbUsePrimaryKey)
                        .addContainerGap(240, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dlpParameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbParameter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coDirection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDirection)
                    .addComponent(cbLiteral))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbUsePrimaryKey)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbUseProperty)
                    .addComponent(dlProperty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected boolean tagDefined() {
        return getParameterDef() != null;
    }

    @Override
    protected String getTitle() {
        return NbBundle.getMessage(ParameterTagEditor.class, "parameter-tag-editor-title");
    }

    @Override
    protected void applyChanges() {
        AdsDynamicPropertyDef paramdef = getParameterDef();
        if (AdsParameterPropertyDef.canBeLiteral(paramdef)) {
            getObject().setLiteral(cbLiteral.isSelected());
        }
        if (AdsParameterPropertyDef.canBeOutput(paramdef)) {
            getObject().setDirection((EParamDirection) coDirection.getSelectedItem());
        }
        if (paramdef instanceof AdsDynamicPropertyDef) {
            if (rbUseProperty.isSelected()) {
                getObject().setPropId(dlProperty.getDefinitionId());
            } else {
                getObject().setPropId(null);
            }
        }
    }

    private AdsDynamicPropertyDef getParameterDef() {
        final IParameterDef iParam = getObject().findParameter();
        AdsDynamicPropertyDef param = iParam != null ? (AdsDynamicPropertyDef) iParam.getDefinition() : null;
        if (param == null) {
            param = getOpenInfo().getLookup().lookup(AdsDynamicPropertyDef.class);
        }
        return param;
    }

    @Override
    protected void afterOpen() {
        final AdsDynamicPropertyDef paramDef = getParameterDef();
        if (paramDef != null) {

            dlpParameter.open(paramDef, paramDef.getId());

            if (getObject().isLiteral() || AdsParameterPropertyDef.canBeLiteral(paramDef)) {
                cbLiteral.setVisible(true);
                cbLiteral.setEnabled(true);
                cbLiteral.setSelected(getObject().isLiteral());
            } else {
                cbLiteral.setVisible(false);
            }

            if (AdsParameterPropertyDef.canBeOutput(paramDef)) {
                coDirection.setVisible(true);
                coDirection.setEnabled(true);
                coDirection.setSelectedItem(getObject().getDirection());
            } else {
                coDirection.setVisible(false);
            }

            final AdsEntityObjectClassDef entity = AdsParameterPropertyDef.findEntity(paramDef);
            if (entity != null) {
                rbUsePrimaryKey.setVisible(true);
                rbUsePrimaryKey.setVisible(true);
                dlProperty.setVisible(true);
                final IFilter propertyFilter = AdsVisitorProviders.newPropertyForParameterTagFilter(entity);
                final VisitorProvider propertyProvider = new VisitorProvider() {

                    @Override
                    public boolean isTarget(RadixObject radixObject) {
                        if (radixObject instanceof AdsPropertyDef) {
                            final AdsPropertyDef propDef = (AdsPropertyDef) radixObject;
                            return entity.getProperties().findById(propDef.getId(), EScope.ALL).get() == propDef && propertyFilter.isTarget(radixObject);
                        } else {
                            return false;
                        }
                    }
                };
                ChooseDefinitionCfg cfg = ChooseDefinitionCfg.Factory.newInstance(entity, propertyProvider);
                if (getObject().getPropId() != null) {
                    rbUseProperty.setSelected(true);
                    dlProperty.open(cfg, entity.getProperties().findById(getObject().getPropId(), EScope.ALL).get(), getObject().getPropId());
                } else {
                    rbUsePrimaryKey.setSelected(true);
                    dlProperty.open(cfg, null, null);
                }
            } else {
                rbUsePrimaryKey.setVisible(false);
                rbUseProperty.setVisible(false);
                dlProperty.setVisible(false);
            }

        } else {
            coDirection.setVisible(false);
            cbLiteral.setVisible(false);
            rbUsePrimaryKey.setVisible(false);
            rbUseProperty.setVisible(false);
            dlpParameter.open(null, null);
        }
    }

    @Override
    protected void setReadOnly(boolean readOnly) {
        boolean enabled = !readOnly;
        final AdsDynamicPropertyDef propertyAsParameter = getParameterDef();
        cbLiteral.setEnabled(propertyAsParameter != null && enabled && AdsParameterPropertyDef.canBeLiteral(propertyAsParameter));
        coDirection.setEnabled(propertyAsParameter != null && enabled && AdsParameterPropertyDef.canBeOutput(propertyAsParameter));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgPropOrPk;
    private javax.swing.JCheckBox cbLiteral;
    private javax.swing.JComboBox coDirection;
    private org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel dlProperty;
    private org.radixware.kernel.designer.common.dialogs.components.DefinitionLinkEditPanel dlpParameter;
    private javax.swing.JLabel lbDirection;
    private javax.swing.JLabel lbParameter;
    private javax.swing.JRadioButton rbUsePrimaryKey;
    private javax.swing.JRadioButton rbUseProperty;
    // End of variables declaration//GEN-END:variables
}
