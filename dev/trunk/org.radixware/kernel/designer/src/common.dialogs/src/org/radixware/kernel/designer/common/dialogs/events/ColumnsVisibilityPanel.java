/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * ColumnsVisibilityPanel.java
 *
 * Created on Jan 15, 2009, 4:09:13 PM
 */

package org.radixware.kernel.designer.common.dialogs.events;

import javax.swing.JCheckBox;
import javax.swing.table.TableColumn;


public class ColumnsVisibilityPanel extends javax.swing.JPanel {

    private final boolean[] visible;
    private final JCheckBox[] checkBoxes;
    private final TableColumn[] columns;
    private final TraceTable traceTable;
    private final ColumnsVisibilityDialog dialog;

    /** Creates new form ColumnsVisibilityPanel */
    public ColumnsVisibilityPanel(ColumnsVisibilityDialog dialog, TraceTable traceTable) {
        this.traceTable = traceTable;
        this.dialog = dialog;
        initComponents();
        checkBoxes = new JCheckBox[] {severityCheckBox, numberCheckBox, dateCheckBox, timeCheckBox, loggerCheckBox, messageCheckBox};

        visible = new boolean[traceTable.getColumnCount()];
        columns = new TableColumn[traceTable.getColumnCount()];
        for (int i = 0; i < traceTable.getColumnCount(); ++i) {
            columns[i] = traceTable.getColumnModel().getColumn(i);
            visible[i] = true;
        }
    }

    public void apply() {
        for (int i = 0; i < columns.length; i++)
            traceTable.getColumnModel().removeColumn(columns[i]);
        for (int i = 0; i < checkBoxes.length; i++) {
            visible[i] = checkBoxes[i].isSelected();
            if (checkBoxes[i].isSelected())
                traceTable.getColumnModel().addColumn(columns[i]);
        }
    }

    public void restore() {
        for (int i = 0; i < checkBoxes.length; i++)
            checkBoxes[i].setSelected(visible[i]);
    }

    private void check() {
        for (int i = 0; i < checkBoxes.length; ++i) {
            if (checkBoxes[i].isSelected()) {
                dialog.setOkButtonEnabled(true);
                return;
            }
        }
        dialog.setOkButtonEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        severityCheckBox = new javax.swing.JCheckBox();
        dateCheckBox = new javax.swing.JCheckBox();
        timeCheckBox = new javax.swing.JCheckBox();
        numberCheckBox = new javax.swing.JCheckBox();
        loggerCheckBox = new javax.swing.JCheckBox();
        messageCheckBox = new javax.swing.JCheckBox();

        severityCheckBox.setText(org.openide.util.NbBundle.getMessage(ColumnsVisibilityPanel.class, "ColumnsVisibilityPanel.severityCheckBox.text")); // NOI18N
        severityCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                severityCheckBoxStateChanged(evt);
            }
        });

        dateCheckBox.setText(org.openide.util.NbBundle.getMessage(ColumnsVisibilityPanel.class, "ColumnsVisibilityPanel.dateCheckBox.text")); // NOI18N
        dateCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dateCheckBoxStateChanged(evt);
            }
        });

        timeCheckBox.setText(org.openide.util.NbBundle.getMessage(ColumnsVisibilityPanel.class, "ColumnsVisibilityPanel.timeCheckBox.text")); // NOI18N
        timeCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                timeCheckBoxStateChanged(evt);
            }
        });

        numberCheckBox.setText(org.openide.util.NbBundle.getMessage(ColumnsVisibilityPanel.class, "ColumnsVisibilityPanel.numberCheckBox.text")); // NOI18N
        numberCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numberCheckBoxStateChanged(evt);
            }
        });

        loggerCheckBox.setText(org.openide.util.NbBundle.getMessage(ColumnsVisibilityPanel.class, "ColumnsVisibilityPanel.loggerCheckBox.text")); // NOI18N
        loggerCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                loggerCheckBoxStateChanged(evt);
            }
        });

        messageCheckBox.setText(org.openide.util.NbBundle.getMessage(ColumnsVisibilityPanel.class, "ColumnsVisibilityPanel.messageCheckBox.text")); // NOI18N
        messageCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                messageCheckBoxStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(severityCheckBox)
                    .addComponent(numberCheckBox)
                    .addComponent(dateCheckBox)
                    .addComponent(timeCheckBox)
                    .addComponent(loggerCheckBox)
                    .addComponent(messageCheckBox))
                .addContainerGap(127, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(severityCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numberCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loggerCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messageCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void severityCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_severityCheckBoxStateChanged
        check();
    }//GEN-LAST:event_severityCheckBoxStateChanged

    private void numberCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numberCheckBoxStateChanged
        check();
    }//GEN-LAST:event_numberCheckBoxStateChanged

    private void dateCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dateCheckBoxStateChanged
        check();
    }//GEN-LAST:event_dateCheckBoxStateChanged

    private void timeCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_timeCheckBoxStateChanged
        check();
    }//GEN-LAST:event_timeCheckBoxStateChanged

    private void loggerCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_loggerCheckBoxStateChanged
        check();
    }//GEN-LAST:event_loggerCheckBoxStateChanged

    private void messageCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_messageCheckBoxStateChanged
        check();
    }//GEN-LAST:event_messageCheckBoxStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox dateCheckBox;
    private javax.swing.JCheckBox loggerCheckBox;
    private javax.swing.JCheckBox messageCheckBox;
    private javax.swing.JCheckBox numberCheckBox;
    private javax.swing.JCheckBox severityCheckBox;
    private javax.swing.JCheckBox timeCheckBox;
    // End of variables declaration//GEN-END:variables

}
