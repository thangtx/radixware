/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.dialogs.components;

import javax.swing.SpinnerNumberModel;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.radixware.kernel.common.defs.ads.IModalDisplayable;
import org.radixware.kernel.common.enums.ERuntimeEnvironmentType;


public class SizeEditPanel extends javax.swing.JPanel {

    private IModalDisplayable displayable;
    private boolean isUpdating = false;
    private ERuntimeEnvironmentType env;

    public SizeEditPanel() {
        initComponents();
        SpinnerNumberModel numberModel = (SpinnerNumberModel)edWidth.getModel();
        numberModel.setMaximum(10000);
        numberModel.setMinimum(0);
        
        numberModel = (SpinnerNumberModel)edHeight.getModel();
        numberModel.setMaximum(10000);
        numberModel.setMinimum(0);
        
        edWidth.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (isUpdating) {
                    return;
                }
                if (displayable == null) {
                    return;
                }
                final Object val = edWidth.getValue();
                if (val instanceof Integer) {                    
                    displayable.getModialViewSizeInfo(env).setWidth((Integer) val);
                }
            }
        });
        edHeight.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (isUpdating) {
                    return;
                }
                if (displayable == null) {
                    return;
                }
                final Object val = edHeight.getValue();
                if (val instanceof Integer) {
                    displayable.getModialViewSizeInfo(env).setHeight((Integer) val);
                }
            }
        });
    }

    public void open(IModalDisplayable displayable, ERuntimeEnvironmentType env) {
        this.displayable = displayable;
        this.env = env;
        update();
    }

    public void update() {
        if (displayable == null) {
            setVisible(false);
            return;
        }
        if (displayable.getClientEnvironment() == ERuntimeEnvironmentType.COMMON_CLIENT) {

            final String title = env == ERuntimeEnvironmentType.EXPLORER ? "For Desktop Explorer" : "For WEB Explorer";
            final TitledBorder border = new TitledBorder(title);
            this.setBorder(border);
            setVisible(true);
        } else {
            if (env != displayable.getClientEnvironment()) {
                setVisible(false);
            } else {
                setVisible(true);
                this.setBorder(new EmptyBorder(5, 5, 5, 5));
            }
        }



        edHeight.setEnabled(displayable != null && !displayable.isReadOnly());
        edWidth.setEnabled(displayable != null && !displayable.isReadOnly());


        isUpdating = true;
        try {
            edWidth.setValue(displayable.getModialViewSizeInfo(env).getWidth());
            edHeight.setValue(displayable.getModialViewSizeInfo(env).getHeight());
        } finally {
            isUpdating = false;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        edWidth = new javax.swing.JSpinner();
        edHeight = new javax.swing.JSpinner();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SizeEditPanel.class, "SizeEditPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SizeEditPanel.class, "SizeEditPanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(edWidth, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                    .addComponent(edHeight))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(edWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(edHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner edHeight;
    private javax.swing.JSpinner edWidth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
