/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.dialogs.components;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.ChangeSupport;
import org.radixware.kernel.designer.common.dialogs.components.state.StateManager;
import org.radixware.kernel.designer.common.dialogs.utils.IAcceptResult;
import org.radixware.kernel.designer.common.dialogs.utils.IAdvancedAcceptor;


/**
 * Radix object name editor panel
 */
public class NameEditPanel extends JPanel implements ICheckableEditor {

    private boolean isKeyTyped = false; //whether we had any key typed in name's textfield
    private StateManager stateManager = new StateManager(this);
    private IAdvancedAcceptor<String> nameAcceptor;

    public NameEditPanel() {
        initComponents();
        stateManager.ok();
        DocumentListener edNameListener = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                changedUpdate(e);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                changedUpdate(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                changeSupport.fireChange();
                isComplete();
            }
        };
        edName.getDocument().addDocumentListener(edNameListener);

        edName.addKeyListener(new KeyAdapter() {

            @Override
            public void keyTyped(KeyEvent e) {
                isKeyTyped = true;
                super.keyTyped(e);
            }
        });
    }

    public boolean isKeyTyped() {
        return isKeyTyped;
    }

    @Override
    public int getBaseline(int width, int height) {
        return edName.getBaseline(width, height);
    }

    @Override
    public Dimension getPreferredSize() {
        return edName.getPreferredSize();
    }

    @Override
    public void setPreferredSize(Dimension preferredSize) {
        if (preferredSize != null) {
            edName.setPreferredSize(preferredSize);
        }
        super.setPreferredSize(preferredSize);
    }

    @Override
    public Dimension getMinimumSize() {
        return edName.getMinimumSize();
    }

    @Override
    public void setMinimumSize(Dimension minimumSize) {
        if (minimumSize != null) {
            edName.setMinimumSize(minimumSize);
        }
        super.setMinimumSize(minimumSize);
    }

    @Override
    public Dimension getMaximumSize() {
        return edName.getMaximumSize();
    }

    @Override
    public void setMaximumSize(Dimension maximumSize) {
        if (maximumSize != null) {
            edName.setMaximumSize(maximumSize);
        }
        super.setMaximumSize(maximumSize);
    }

    public boolean isEditable() {
        return edName.isEditable();
    }

    public void setEditable(boolean editable) {
        edName.setEditable(editable);
    }

    @Override
    public boolean isEnabled() {
        return edName.isEnabled();
    }

    @Override
    public void setEnabled(boolean enabled) {
        edName.setEnabled(enabled);
        isComplete();
    }

    @Override
    public boolean requestFocusInWindow() {
        edName.selectAll();
        return edName.requestFocusInWindow();
    }

    public void selectAll() {
        edName.selectAll();
    }

    public String getCurrentName() {
        return edName.getText();
    }

    public void setCurrentName(String name) {
        edName.setText(name);
        //edName.selectAll();
        isComplete();
    }

    @Override
    public Color getForeground() {
        if (edName != null)
           return edName.getForeground();
        return super.getForeground();
    }

    @Override
    public void setForeground(Color fg) {
        if (edName != null)
            edName.setForeground(fg);
        else
            super.setForeground(fg);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        edName = new javax.swing.JTextField();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(edName, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(edName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField edName;
    // End of variables declaration//GEN-END:variables
    private final ChangeSupport changeSupport = new ChangeSupport(this);

    public final void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    public final void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }

    @Override
    public IAdvancedAcceptor<String> getNameAcceptor() {
        return nameAcceptor;
    }

    @Override
    public void setNameAcceptor(IAdvancedAcceptor<String> nameAcceptor) {
        this.nameAcceptor = nameAcceptor;
        isComplete();
    }

    @Override
    public boolean isComplete() {
        if (!isEnabled()) {
            stateManager.ok();
            return true;
        }

        if (nameAcceptor != null) {
            final String name = edName.getText();
            final IAcceptResult acceptResult = nameAcceptor.getResult(name);
            if (!acceptResult.isAccepted()) {
                stateManager.error(acceptResult.getErrorMessage());
                return false;
            }
        }

        stateManager.ok();
        return true;
    }
}

