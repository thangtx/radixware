/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.dialogs.chooseobject;

import java.util.ArrayList;
import java.util.List;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionListener;
import org.openide.util.ChangeSupport;
import org.radixware.kernel.common.defs.Definition;
import org.radixware.kernel.common.types.Id;
import org.radixware.kernel.common.utils.RadixObjectsUtils;
import org.radixware.kernel.designer.common.dialogs.chooseobject.ConfigureDefinitionTable.IdBooleanValueChangeEvent;

/**
 * Panel that allows to edit list of Radix object.
 */
public class ConfigureDefinitionListPanel extends javax.swing.JPanel {

    private final ConfigureDefinitionTable table = new ConfigureDefinitionTable();

    public ConfigureDefinitionListPanel() {
        initComponents();
        tableScrollPane.setViewportView(table);
        addConfigurableIdIsCheckedListener(new ConfigureDefinitionTable.IdBooleanValueChangeListener() {

            @Override
            public void onEvent(IdBooleanValueChangeEvent e) {
                changeSupport.fireChange();
            }
        });
    }
    private ConfigureDefinitionListCfg cfg = null;
    private List<Id> configurableDefinitionIds = null;

    /**
     * Get list of configurable definition identifies.
     */
    public List<Id> getConfigurableDefinitionIds() {
        synchronized (this) {
            return new ArrayList<Id>(configurableDefinitionIds);
        }
    }

    /**
     * Initialize panel.
     */
    public void open(List<Id> configurableDefinitionIds, ConfigureDefinitionListCfg cfg) {
        synchronized (this) {
            this.configurableDefinitionIds = new ArrayList<Id>(configurableDefinitionIds);
            this.cfg = cfg;
            update();
        }
    }

    public void update() {
        synchronized (this) {
            List<Definition> orderedAvailableDefinitions = new ArrayList<Definition>(cfg.getAvailableDefinitions());
            RadixObjectsUtils.sortByName(orderedAvailableDefinitions);
            table.setData(configurableDefinitionIds, orderedAvailableDefinitions, cfg.getDisabledIds());
        }
    }

    @Override
    public void setEnabled(boolean enabled) {
        table.setEnabled(enabled);
        super.setEnabled(enabled);
    }

    protected ChangeSupport changeSupport = new ChangeSupport(this);

    /**
     * All listener to listen any addition or removing in configurable objects.
     */
    public void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    public void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }

    public void addConfigurableDefinitionIsCheckedListener(ConfigureDefinitionTable.DefBooleanValueChangeListener l){
        table.addConfigurableDefinitionIsCheckedkListener(l);
    }

     public void removeConfigurableDefinitionIsCheckedListener(ConfigureDefinitionTable.DefBooleanValueChangeListener l){
        table.removeConfigurableDefinitionIsCheckedkListener(l);
    }

    public void addConfigurableIdIsCheckedListener(ConfigureDefinitionTable.IdBooleanValueChangeListener l){
        table.addConfigurableIdIsCheckedkListener(l);
    }

    public void removeConfigurableIdIsCheckedListener(ConfigureDefinitionTable.IdBooleanValueChangeListener l){
        table.removeConfigurableIdIsCheckedkListener(l);
    }

    public void addSelectionListener(ListSelectionListener listener){
        table.getSelectionModel().addListSelectionListener(listener);
    }

    public void removeSelectionListener(ListSelectionListener listener){
        table.getSelectionModel().removeListSelectionListener(listener); 
    }

    public Definition getSelectedDefinition(){
        int row = table.getSelectedRow();
        List<Definition> orderedAvailableDefinitions = new ArrayList<Definition>(cfg.getAvailableDefinitions());
        RadixObjectsUtils.sortByName(orderedAvailableDefinitions);
        if (row > -1 && row < orderedAvailableDefinitions.size()){
            return orderedAvailableDefinitions.get(row);
        }
        return null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableScrollPane = new javax.swing.JScrollPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables
}
