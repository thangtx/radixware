/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * GenericParametersWizardTable.java
 *
 * Created on 27.07.2009, 10:33:50
 */
package org.radixware.kernel.designer.common.dialogs.choosetype;

import java.util.LinkedList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.util.ChangeSupport;
import org.radixware.kernel.common.defs.Definition;
import org.radixware.kernel.common.defs.ads.type.AdsTypeDeclaration;
import org.radixware.kernel.common.defs.ads.type.IAdsTypedObject;
import org.radixware.kernel.designer.common.dialogs.components.CommonParametersEditorCellLib;
import org.radixware.kernel.designer.common.dialogs.components.CommonParametersEditorCellLib.ParameterNameChangeEvent;


public class GenericParametersWizardTable extends javax.swing.JPanel {

    private CommonParametersEditorCellLib.ParameterNameChangeListener nameListener = new CommonParametersEditorCellLib.ParameterNameChangeListener() {

        @Override
        public void onEvent(ParameterNameChangeEvent e) {
            GenericParametersWizardTable.this.changeSupport.fireChange();
        }
    };

    /**
     * Creates new form GenericParametersWizardTable
     */
    public GenericParametersWizardTable() {
        initComponents();
        table.setupTableUI(true, false, true, false, true);
        table.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                changeSupport.fireChange();
            }
        });
        table.addNameChangeListener(nameListener);
    }

    public void open(Definition context, IAdsTypedObject parameter, AdsTypeDeclaration.TypeArguments arguments) {
        table.clearTable();
        for (AdsTypeDeclaration.TypeArgument arg : arguments.getArgumentList()) {
            // "?" default value for argument name, editable only in class owner editor
            CommonParametersEditorCellLib.StringCellValue nameitem = new CommonParametersEditorCellLib.StringCellValue("?");
            CommonParametersEditorCellLib.TypePresentation typeitem = new CommonParametersEditorCellLib.TypePresentation(arg.getType(), context, parameter);
//            if (onCreation) {
//                table.addModelRow(new Object[]{ nameitem, AdsTypeDeclaration.TypeArgument.Derivation.NONE, typeitem });
//            } else {
            table.addModelRow(new Object[]{ nameitem, arg.getDerivation(), typeitem });
//            }
        }
    }

    public LinkedList<AdsTypeDeclaration.TypeArgument> getGenericParameters() {
        LinkedList<AdsTypeDeclaration.TypeArgument> result = new LinkedList<AdsTypeDeclaration.TypeArgument>();
        LinkedList<String> names = table.getCurrentNames();
        LinkedList<AdsTypeDeclaration.TypeArgument.Derivation> derivations = table.getCurrentDerivations();
        LinkedList<AdsTypeDeclaration> types = table.getCurrentTypes();
        for (int i = 0, size = names.size() - 1; i <= size; i++) {
            AdsTypeDeclaration.TypeArgument arg = AdsTypeDeclaration.TypeArgument.Factory.newInstance(names.get(i), types.get(i), derivations.get(i));
            result.add(arg);
        }
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new org.radixware.kernel.designer.common.dialogs.components.CommonParametersTable();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addGap(13, 13, 13))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private org.radixware.kernel.designer.common.dialogs.components.CommonParametersTable table;
    // End of variables declaration//GEN-END:variables
    private ChangeSupport changeSupport = new ChangeSupport(this);

    public void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    public void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }

    public boolean isComplete() {
        return table.isComplete();
    }
}
