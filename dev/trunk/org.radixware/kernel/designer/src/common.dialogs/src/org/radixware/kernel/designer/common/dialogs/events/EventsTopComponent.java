/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.designer.common.dialogs.events;

import java.awt.BorderLayout;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.radixware.kernel.common.defs.RadixObjectIcon;

/**
 * Top component which displays something.
 *
 */
final class EventsTopComponent extends TopComponent {

    private static EventsTopComponent instance = null;
    private static final String PREFERRED_ID = "EventsTopComponent";
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";

    private EventsTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(EventsTopComponent.class, "CTL_EventsTopComponent"));
        setToolTipText(NbBundle.getMessage(EventsTopComponent.class, "HINT_EventsTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));

        this.setLayout(new BorderLayout(0, 0));
        TraceTable traceTable = new TraceTable();
        JScrollPane scrollPane = new JScrollPane(traceTable);
		TraceToolBar traceToolBar = new TraceToolBar(traceTable);

		this.add(traceToolBar, BorderLayout.NORTH);
		this.add(scrollPane, BorderLayout.CENTER);
        
        getTraceTableModel().addMaxSeverityChangeListener(new TraceTableModel.MaxSeverityChangeListener() {

            @Override
            public void maxSeverityChanged() {
                updateIcon();
            }
        });

        updateIcon();
    }

    private synchronized void updateIcon() {
        EventsTopComponent.this.setIcon(RadixObjectIcon.getForSeverity(getTraceTableModel().getMaxSeverity()).getImage());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized EventsTopComponent getDefault() {
        if (instance == null) {
            instance = new EventsTopComponent();
        }
        return instance;
    }

    public static TraceTableModel getTraceTableModel() {
        return TraceTable.getTraceTableModel();
    }

    /**
     * Obtain the EventsTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized EventsTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(EventsTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof EventsTopComponent) {
            return (EventsTopComponent) win;
        }
        Logger.getLogger(EventsTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return EventsTopComponent.getDefault();
        }
    }

}
