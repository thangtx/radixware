/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * HexEditor.java
 *
 * Created on 28.10.2009, 15:35:23
 */

package org.radixware.kernel.common.design.msdleditor.field.panel;

import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
import org.radixware.kernel.common.exceptions.WrongFormatError;
import org.radixware.kernel.common.utils.Hex;


public class HexEditor extends javax.swing.JPanel {

    private boolean isHex = true;
    
    private boolean isMustConvertAtChange = true;

    public void setIsMustConvertAtChange(boolean isMustConvertAtChange) {
        this.isMustConvertAtChange = isMustConvertAtChange;
    }
    

    private boolean isHex(String s)
    {
       final byte[] res = org.apache.xmlbeans.impl.util.HexBin.decode(s.getBytes());
       return res != null;        
    }
    

    /** Creates new form HexEditor */
    public HexEditor() {
        initComponents();
                
        jTextArea1.setDocument(new PlainDocument(){

            @Override
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
              boolean isMayUse = true;
              if (isHex)
              {
                String oldText = jTextArea1.getText();
                if (oldText==null)
                    oldText = "";
                String sPrior = oldText.substring(0, offs);
                String sNext = oldText.substring(offs);
                String t = sPrior + str + sNext;
                if (t.length()%2 != 0)
                    t += "0";
                isMayUse = isHex(t);
              }
              if (isMayUse)  
                super.insertString(offs, str, a);
            }
        });
    }

    public void setValue(byte[] value) {
        String text = null;
        if (isHex) {
            for (int i=0; i<value.length; i++) {
                text = Hex.encode(value);
            }
        }
        else {
            try {
                text = new String(value, "US-ASCII");
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(HexEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        jTextArea1.setText(text);
    }

    public boolean getIsHex() {
        return isHex;
    }

    public void setIsHex(boolean isHex) {
        this.isHex = isHex;
        if (isHex)
            jRadioButton2.setSelected(true);
        else
            jRadioButton1.setSelected(true);
    }

    public byte[] getValue() {
        String s = jTextArea1.getText();
        if (isHex) {
            return Hex.decode(s);
        }
        else {
            try {
                return s.getBytes("US-ASCII");
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(HexEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return null;
    }
    
    public String getAasAddress() {
        String res = aasAddressTextField.getText();
        return "".equals(res) ? null : res;
    }
    
    public void setAasAddress(String aasAddress) {
        aasAddressTextField.setText(aasAddress);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        aasAddressTextField = new javax.swing.JTextField();
        aasAddressLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("ASCII");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("HEX");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        aasAddressTextField.setText("jTextField1");
        aasAddressTextField.setToolTipText("Used for preprocessor class methods execution. Pattern: host:port");

        aasAddressLabel.setText("AAS address:");
        aasAddressLabel.setToolTipText("Used for preprocessor class methods execution. Pattern: host:port");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(aasAddressLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aasAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(aasAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aasAddressLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        if (isMustConvertAtChange)
        {
            String t = jTextArea1.getText();
            if (t.length()%2 != 0)
                t += "0";
            jTextArea1.setText(t);
            
            byte[] res = null;
            try {
                 res = getValue();
            } catch (WrongFormatError ex) {
                JOptionPane.showMessageDialog(null, ex);
                jRadioButton2.setSelected(true);
                return;
            }        
            isHex = false;
            setValue(res);
        }
        else
            isHex = false;
        
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        if (isMustConvertAtChange)
        {
            byte[] res = getValue();
            isHex = true;
            setValue(res);
        }
        else
            isHex = true;
        
    }//GEN-LAST:event_jRadioButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aasAddressLabel;
    private javax.swing.JTextField aasAddressTextField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
