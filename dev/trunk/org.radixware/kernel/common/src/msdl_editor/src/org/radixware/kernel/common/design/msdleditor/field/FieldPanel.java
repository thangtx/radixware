/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * FieldPanel.java
 *
 * Created on 24.03.2009, 11:52:02
 */

package org.radixware.kernel.common.design.msdleditor.field;

import java.awt.BorderLayout;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.radixware.kernel.common.design.msdleditor.AbstractEditItem;
import org.radixware.kernel.common.msdl.MsdlField;
import org.radixware.kernel.common.msdl.MsdlField.MsdlFieldStructureChangedEvent;
import org.radixware.kernel.common.msdl.MsdlField.MsdlFieldStructureChangedListener;
import org.radixware.kernel.common.msdl.fields.BCHFieldModel;
import org.radixware.kernel.common.msdl.fields.BinFieldModel;
import org.radixware.kernel.common.msdl.fields.ChoiceFieldModel;
import org.radixware.kernel.common.msdl.fields.DateTimeFieldModel;
import org.radixware.kernel.common.msdl.fields.IntFieldModel;
import org.radixware.kernel.common.msdl.fields.NumFieldModel;
import org.radixware.kernel.common.msdl.fields.SequenceFieldModel;
import org.radixware.kernel.common.msdl.fields.StrFieldModel;
import org.radixware.kernel.common.msdl.fields.StructureFieldModel;
import org.radixware.kernel.common.design.msdleditor.field.panel.BCHPanel;
import org.radixware.kernel.common.design.msdleditor.field.panel.BinPanel;
import org.radixware.kernel.common.design.msdleditor.field.panel.ChoicePanel;
import org.radixware.kernel.common.design.msdleditor.field.panel.DateTimePanel;
import org.radixware.kernel.common.design.msdleditor.field.panel.IntPanel;
import org.radixware.kernel.common.design.msdleditor.field.panel.NumPanel;
import org.radixware.kernel.common.design.msdleditor.field.panel.SequencePanel;
import org.radixware.kernel.common.design.msdleditor.field.panel.StrPanel;
import org.radixware.kernel.common.design.msdleditor.field.panel.StructurePanel;
import org.radixware.kernel.common.msdl.IEnumPanelRetriever;
import org.radixware.kernel.common.msdl.IFieldTemplateTextFieldRetriever;


public class FieldPanel extends AbstractEditItem implements MsdlFieldStructureChangedListener {

    private static final String PREFERENCES_KEY = "MsdlEditor";
    private static final String FIELD_DIVIDER_POS = "FieldDividerPos";
    private JPanel panel = null;
    private IEnumPanelRetriever enumRetriever;
    /** Creates new form FieldPanel */
    public FieldPanel() {
        initComponents();
    }

    public void open(MsdlField field, IEnumPanelRetriever enumRetriever, JPanel functionPanel, IFieldTemplateTextFieldRetriever retriever) {
        super.open(field);
        this.enumRetriever = enumRetriever;
        fieldHeaderPanel1.open(field,functionPanel, retriever);
        field.getStructureChangedSupport().addEventListener(this);
        titledPiecePanel1.open(field.getFieldModel(),field.getFieldModel().getField());
        addPanel();
        try {
            if (Preferences.userRoot().nodeExists(PREFERENCES_KEY)) {
                Preferences editorPreferences = Preferences.userRoot().node(PREFERENCES_KEY);
                int pos = editorPreferences.getInt(FIELD_DIVIDER_POS, 300);
                jSplitPane1.setDividerLocation(pos);
            }
        } catch (BackingStoreException ex) {
            JOptionPane.showMessageDialog(null, "Can't restore configuration: " + ex.getMessage());
        }
        
        fieldHeaderPanel1.setArrayEnabled(fieldHeaderPanel1.canBeArray());
        
        update();
    }

    @Override
    public void update() {
        fieldHeaderPanel1.update();
        if (panel != null)
            ((AbstractEditItem)panel).update();
        super.update();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fieldHeaderPanel1 = new org.radixware.kernel.common.design.msdleditor.field.panel.FieldHeaderPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelField = new javax.swing.JPanel();
        jPanelFieldPiece = new javax.swing.JPanel();
        titledPiecePanel1 = new org.radixware.kernel.common.design.msdleditor.piece.TitledPiecePanel();

        setLayout(new java.awt.BorderLayout());
        add(fieldHeaderPanel1, java.awt.BorderLayout.NORTH);

        jSplitPane1.setDividerLocation(180);
        jSplitPane1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSplitPane1PropertyChange(evt);
            }
        });

        jPanelField.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(jPanelField);

        jPanelFieldPiece.setLayout(new java.awt.BorderLayout());
        jPanelFieldPiece.add(titledPiecePanel1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanelFieldPiece);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jSplitPane1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSplitPane1PropertyChange
        if (evt.getPropertyName().equalsIgnoreCase("dividerLocation")) {
            int newValue = ((Integer)evt.getNewValue()).intValue();
            Preferences editorPreferences = Preferences.userRoot().node(PREFERENCES_KEY);
            editorPreferences.putInt(FIELD_DIVIDER_POS, newValue);
            try {
                Preferences.userRoot().flush();
            }
            catch (BackingStoreException ex) {
                JOptionPane.showMessageDialog(null, "Can't save configuration: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jSplitPane1PropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.radixware.kernel.common.design.msdleditor.field.panel.FieldHeaderPanel fieldHeaderPanel1;
    private javax.swing.JPanel jPanelField;
    private javax.swing.JPanel jPanelFieldPiece;
    private javax.swing.JSplitPane jSplitPane1;
    private org.radixware.kernel.common.design.msdleditor.piece.TitledPiecePanel titledPiecePanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onEvent(MsdlFieldStructureChangedEvent e) {
        if (panel != null)
            jPanelField.remove(panel);
        addPanel();
        titledPiecePanel1.open(getMsdlField().getFieldModel(),getMsdlField().getFieldModel().getField());
    }

    private void addPanel(){
        jPanelField.removeAll();
        //jPanelField.repaint();
        boolean isDbf = getMsdlField().getRootMsdlScheme().isDbf();
        jSplitPane1.setVisible(!isDbf);
        fieldHeaderPanel1.setDbfViewMode(isDbf);
        if (isDbf) {
            return;
        }
        switch (getMsdlField().getFieldModel().getType()) {
            case BCH:
                BCHPanel bchPanel = new BCHPanel();
                bchPanel.open((BCHFieldModel)getMsdlField().getFieldModel());
                panel = bchPanel;
                break;
            case BIN:
                BinPanel binPanel = new BinPanel();
                binPanel.open((BinFieldModel)getMsdlField().getFieldModel());
                panel = binPanel;
                break;
            case CHOICE:
                ChoicePanel choicePanel = new ChoicePanel();
                JPanel enumPanel = null;
                if (enumRetriever != null)
                    enumPanel = enumRetriever.getStrEnumPanel();
                choicePanel.open((ChoiceFieldModel)getMsdlField().getFieldModel(),enumPanel);
                panel = choicePanel;
                break;
            case DATETIME:
                DateTimePanel timePanel = new DateTimePanel();
                timePanel.open((DateTimeFieldModel)getMsdlField().getFieldModel());
                panel = timePanel;
                break;
            case INT:
                IntPanel intPanel = new IntPanel();
                enumPanel = null;
                if (enumRetriever != null)
                    enumPanel = enumRetriever.getIntEnumPanel();
                intPanel.open((IntFieldModel)getMsdlField().getFieldModel(),enumPanel);
                panel = intPanel;
                break;
            case NUM:
                NumPanel numPanel = new NumPanel();
                numPanel.open((NumFieldModel)getMsdlField().getFieldModel());
                panel = numPanel;
                break;
            case SEQUENCE:
                SequencePanel seqPanel = new SequencePanel();
                seqPanel.open((SequenceFieldModel)getMsdlField().getFieldModel());
                panel = seqPanel;
                break;
            case STR:
                StrPanel strPanel = new StrPanel();
                enumPanel = null;
                if (enumRetriever != null)
                    enumPanel = enumRetriever.getStrEnumPanel();
                strPanel.open((StrFieldModel)getMsdlField().getFieldModel(),enumPanel);
                panel = strPanel;
                break;
            case STRUCTURE:
                StructurePanel structurePanel = new StructurePanel();
                structurePanel.open((StructureFieldModel)getMsdlField().getFieldModel(), (RootPanel)null);
                panel = structurePanel;
                break;
        }
        if (panel != null)
            jPanelField.add(panel,BorderLayout.CENTER);
        //jPanelField.validate();
    }

}
