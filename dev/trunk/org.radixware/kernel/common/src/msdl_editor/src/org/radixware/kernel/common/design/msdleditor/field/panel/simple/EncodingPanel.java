/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

/*
 * EncodingPanel.java
 *
 * Created on 22.01.2009, 11:25:34
 */

package org.radixware.kernel.common.design.msdleditor.field.panel.simple;

import java.awt.event.ActionListener;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import org.radixware.kernel.common.design.msdleditor.AbstractEditItem;
import org.radixware.kernel.common.msdl.enums.EEncoding;
import java.util.List;


public class EncodingPanel extends AbstractEditItem {

    private EEncoding parentValue;
    public static class EncodingModel extends DefaultComboBoxModel {
        public EncodingModel() {
            super(new EEncoding[]{EEncoding.NONE,EEncoding.ASCII,EEncoding.BCD,EEncoding.BIN,
                           EEncoding.CP866,EEncoding.CP1251,EEncoding.CP1252,EEncoding.EBCDIC,
                           EEncoding.HEXEBCDIC,EEncoding.HEX,EEncoding.LITTLEENDIANBIN,
                           EEncoding.BIGENDIANBIN,EEncoding.UTF8,EEncoding.DECIMAL});
        }
        
        public EncodingModel(EEncoding[] encodings) {
            super(encodings);
        }
    }

    /** Creates new form EncodingPanel */
    public EncodingPanel() {
        initComponents();
        setEncodingModel(new EncodingModel());
    }
    
    public void setAllowedEncodings(EEncoding[] encodings) {
        setEncodingModel(new EncodingModel(encodings));
    }

    public void addActionListener(final ActionListener l) {
        jComboBoxEncoding.addActionListener(l);
    }

    public void removeActionListener(final ActionListener l) {
        jComboBoxEncoding.removeActionListener(l);
    }

    public SetParentPanel getSetParentPanel() {
        return setParentPanel;
    }

    public void setEncodingModel(ComboBoxModel model) {
        jComboBoxEncoding.setModel(model);
    }

    public void setEncoding(EEncoding value, EEncoding parentValue) {
        this.parentValue = parentValue;
        getSetParentPanel().setSelected(false);
        jComboBoxEncoding.getModel().setSelectedItem(value);
        getSetParentPanel().setEnabled(parentValue != EEncoding.NONE);
        if (value == EEncoding.NONE) {
            if(isAcceptableEncoding(parentValue)) {
                getSetParentPanel().setSelected(parentValue != EEncoding.NONE);
                jComboBoxEncoding.getModel().setSelectedItem(parentValue);
                jComboBoxEncoding.setEnabled(parentValue == EEncoding.NONE);
            }
            else {
                jComboBoxEncoding.getModel().setSelectedItem(EEncoding.getInstance(null));
                jComboBoxEncoding.setEnabled(true);
                getSetParentPanel().setEnabled(true);
            }
        }
    }

    public EEncoding getEncoding() {
        if (getSetParentPanel().getSelected()) {
            if(isAcceptableEncoding(parentValue)) {
                jComboBoxEncoding.getModel().setSelectedItem(parentValue);
                jComboBoxEncoding.setEnabled(false);
            }
            else {
                jComboBoxEncoding.getModel().setSelectedItem(EEncoding.getInstance(null));
                jComboBoxEncoding.setEnabled(true);
                getSetParentPanel().setSelected(false);
            }
            return EEncoding.NONE;
        }
        else {
            jComboBoxEncoding.setEnabled(true);
            EEncoding result = (EEncoding)jComboBoxEncoding.getModel().getSelectedItem();
            if (result == EEncoding.NONE && parentValue != EEncoding.NONE && isAcceptableEncoding(parentValue)) {
                jComboBoxEncoding.getModel().setSelectedItem(parentValue);
                jComboBoxEncoding.setEnabled(false);
                getSetParentPanel().setSelected(true);
            }
            return result;
        }
    }
    
    public boolean isAcceptableEncoding(EEncoding value) {
        ComboBoxModel model = jComboBoxEncoding.getModel();
        for(int i = 0; i < model.getSize(); ++i) {
            EEncoding item = (EEncoding)model.getElementAt(i);
            if (item != null && item.getValue() != null && item.getValue().equals(value.getValue()))
                return true;
        }
        return false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jComboBoxEncoding = new javax.swing.JComboBox();
        setParentPanel = new org.radixware.kernel.common.design.msdleditor.field.panel.simple.SetParentPanel();

        setLayout(new java.awt.GridBagLayout());

        jComboBoxEncoding.setMaximumRowCount(13);
        jComboBoxEncoding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEncodingActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        add(jComboBoxEncoding, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        add(setParentPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxEncodingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEncodingActionPerformed
        // do nothing
    }//GEN-LAST:event_jComboBoxEncodingActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBoxEncoding;
    private org.radixware.kernel.common.design.msdleditor.field.panel.simple.SetParentPanel setParentPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setControlEnabled(boolean state) {
        jComboBoxEncoding.setEnabled(state);
    }
}
