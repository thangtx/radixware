/*
 * Copyright (c) 2008-2015, Compass Plus Limited. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/. This Source Code is distributed
 * WITHOUT ANY WARRANTY; including any implied warranties but not limited to
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0. for more details.
 */

package org.radixware.kernel.utils.keyStoreAdmin.dialogs;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;



public class GenerateKeyPairDialog extends AKeyStoreAdminDialog {

    public static final int MIN_KEY_LENGTH = 512;
    public static final int MAX_KEY_LENGTH = 2048;

    private String[] aliases;
    private int keyLength;
    private int publicExponent;
    private String alias;
    private int duration;

    private static final ResourceBundle bundle = ResourceBundle.getBundle("org/radixware/kernel/utils/keyStoreAdmin/resources/GenerateKeyPairDialog");

    /** Creates new form GenerateKeyPairDialog */
    public GenerateKeyPairDialog(java.awt.Frame parent, String[] aliases, int defaultDurationDays) {
        super(parent);
        initComponents();
        this.aliases = aliases;

        jSpinnerDurationDays.setValue(defaultDurationDays);
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    public int getKeyLength() {
        return keyLength;
    }

    public int getPublicExponent() {
        return publicExponent;
    }

    public String getAlias() {
        return alias;
    }

    public int getDuration() {
        return duration;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabelAlias = new javax.swing.JLabel();
        jLabelKeyLength = new javax.swing.JLabel();
        jLabelPublicExponent = new javax.swing.JLabel();
        jComboBoxKeyLength = new javax.swing.JComboBox();
        jComboBoxPublicExponent = new javax.swing.JComboBox();
        jTextFieldAlias = new javax.swing.JTextField();
        jLabelDurationDays = new javax.swing.JLabel();
        jSpinnerDurationDays = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/radixware/kernel/utils/keyStoreAdmin/resources/GenerateKeyPairDialog"); // NOI18N
        setTitle(bundle.getString("Dialog.title")); // NOI18N
        setModal(true);
        setName("Form"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText(bundle.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(bundle.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabelAlias.setLabelFor(jTextFieldAlias);
        jLabelAlias.setText(bundle.getString("jLabelAlias.text")); // NOI18N
        jLabelAlias.setName("jLabelAlias"); // NOI18N

        jLabelKeyLength.setLabelFor(jComboBoxKeyLength);
        jLabelKeyLength.setText(bundle.getString("jLabelKeyLength.text")); // NOI18N
        jLabelKeyLength.setName("jLabelKeyLength"); // NOI18N

        jLabelPublicExponent.setLabelFor(jComboBoxPublicExponent);
        jLabelPublicExponent.setText(bundle.getString("jLabelPublicExponent.text")); // NOI18N
        jLabelPublicExponent.setName("jLabelPublicExponent"); // NOI18N

        jComboBoxKeyLength.setEditable(true);
        jComboBoxKeyLength.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "512", "768", "1024", "1280", "1536", "1792", "2048" }));
        jComboBoxKeyLength.setSelectedIndex(2);
        jComboBoxKeyLength.setName("jComboBoxKeyLength"); // NOI18N
        jComboBoxKeyLength.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char key = e.getKeyChar();
                if (!Character.isDigit(key) && key!=KeyEvent.VK_BACK_SPACE && key!=KeyEvent.VK_DELETE)
                e.consume();
            }
        });

        jComboBoxPublicExponent.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "3", "65537" }));
        jComboBoxPublicExponent.setName("jComboBoxPublicExponent"); // NOI18N

        jTextFieldAlias.setName("jTextFieldAlias"); // NOI18N

        jLabelDurationDays.setLabelFor(jSpinnerDurationDays);
        jLabelDurationDays.setText(bundle.getString("jLabelDurationDays.text")); // NOI18N
        jLabelDurationDays.setName("jLabelDurationDays"); // NOI18N

        jSpinnerDurationDays.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(90), Integer.valueOf(1), null, Integer.valueOf(1)));
        jSpinnerDurationDays.setName("jSpinnerDurationDays"); // NOI18N
        ((javax.swing.JSpinner.DefaultEditor)jSpinnerDurationDays.getEditor()).getTextField().addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(java.awt.event.KeyEvent e) {
                char key = e.getKeyChar();
                if (!Character.isDigit(key) && key!=KeyEvent.VK_BACK_SPACE && key!=KeyEvent.VK_DELETE)
                e.consume();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelAlias, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelPublicExponent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelKeyLength, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 26, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldAlias, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBoxPublicExponent, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxKeyLength, javax.swing.GroupLayout.Alignment.TRAILING, 0, 174, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelDurationDays)
                        .addGap(33, 33, 33)
                        .addComponent(jSpinnerDurationDays, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelKeyLength)
                    .addComponent(jComboBoxKeyLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPublicExponent)
                    .addComponent(jComboBoxPublicExponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAlias)
                    .addComponent(jTextFieldAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDurationDays)
                    .addComponent(jSpinnerDurationDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    protected void doClose(int retStatus) {
        returnStatus = retStatus;
        if (returnStatus==RET_OK){
            if (!checkInput())
                return;

            keyLength = Integer.parseInt((String)jComboBoxKeyLength.getSelectedItem());
            publicExponent = Integer.parseInt((String)jComboBoxPublicExponent.getSelectedItem());
            alias = jTextFieldAlias.getText();
            duration = (Integer)jSpinnerDurationDays.getValue();
        }
        setVisible(false);
        dispose();
    }

    /** Checks that input values are valid */
    private boolean checkInput(){
        String dialogTitle = bundle.getString("JOptionPaneInputError.title");
        if (((String)jComboBoxKeyLength.getSelectedItem()).length()==0){            
            String dialogMessage = bundle.getString("KeyLengthIsEmpty");
            JOptionPane.showMessageDialog(this, dialogMessage, dialogTitle, JOptionPane.ERROR_MESSAGE);
            jComboBoxKeyLength.requestFocusInWindow();
            return false;
        }

        for (char c : ((String)jComboBoxKeyLength.getSelectedItem()).toCharArray())
            if (!Character.isDigit(c)){
                String dialogMessage = bundle.getString("InvalidKeyLengthCharacter");
                JOptionPane.showMessageDialog(this, dialogMessage, dialogTitle, JOptionPane.ERROR_MESSAGE);
                jComboBoxKeyLength.requestFocusInWindow();
                return false;
            }
        int length = Integer.parseInt((String)jComboBoxKeyLength.getSelectedItem());
        if (length<MIN_KEY_LENGTH || length>MAX_KEY_LENGTH || length%8>0){
            String dialogMessage = String.format(bundle.getString("InvalidKeyLength"), MIN_KEY_LENGTH, MAX_KEY_LENGTH);
            JOptionPane.showMessageDialog(this, dialogMessage, dialogTitle, JOptionPane.ERROR_MESSAGE);
            jComboBoxKeyLength.requestFocusInWindow();
            return false;
        }

        if (jTextFieldAlias.getText().length()==0){
            String dialogMessage = bundle.getString("AliasIsEmpty");
            JOptionPane.showMessageDialog(this, dialogMessage, dialogTitle, JOptionPane.ERROR_MESSAGE);
            jTextFieldAlias.requestFocusInWindow();
            return false;
        }

        for (String existingAlias: aliases){
            if (jTextFieldAlias.getText().equals(existingAlias)){
                String dialogMessage = String.format(bundle.getString("AliasExists"), existingAlias);
                int confirm = JOptionPane.showConfirmDialog(this, dialogMessage, dialogTitle, JOptionPane.YES_NO_OPTION);
                if (confirm==JOptionPane.NO_OPTION){
                    jTextFieldAlias.requestFocusInWindow();
                    return false;
                }
                break;
            }
        }

        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox jComboBoxKeyLength;
    private javax.swing.JComboBox jComboBoxPublicExponent;
    private javax.swing.JLabel jLabelAlias;
    private javax.swing.JLabel jLabelDurationDays;
    private javax.swing.JLabel jLabelKeyLength;
    private javax.swing.JLabel jLabelPublicExponent;
    private javax.swing.JSpinner jSpinnerDurationDays;
    private javax.swing.JTextField jTextFieldAlias;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
}